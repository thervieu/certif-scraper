[
  {
    "question_text": "A company is implementing an application on Amazon EC2 instances. The application needs to process incoming transactions. When the application detects a transaction that is not valid, the application must send a chat message to the company's support team. To send the message, the application needs to retrieve the access token to authenticate by using the chat API.\n\nA developer needs to implement a solution to store the access token. The access token must be encrypted at rest and in transit. The access token must also be accessible from other AWS accounts.\n\nWhich solution will meet these requirements with the LEAST management overhead?",
    "question_type": "single",
    "choices": [
      "Use an AWS Systems Manager Parameter Store SecureString parameter that uses an AWS Key Management Service (AWS KMS) AWS managed key to store the access token. Add a resource-based policy to the parameter to allow access from other accounts. Update the IAM role of the EC2 instances with permissions to access Parameter Store. Retrieve the token from Parameter Store with the decrypt flag enabled. Use the decrypted access token to send the message to the chat.",
      "Encrypt the access token by using an AWS Key Management Service (AWS KMS) customer managed key. Store the access token in an Amazon DynamoDB table. Update the IAM role of the EC2 instances with permissions to access DynamoDB and AWS KMS. Retrieve the token from DynamoDDecrypt the token by using AWS KMS on the EC2 instances. Use the decrypted access token to send the message to the chat.",
      "Use AWS Secrets Manager with an AWS Key Management Service (AWS KMS) customer managed key to store the access token. Add a resource-based policy to the secret to allow access from other accounts. Update the IAM role of the EC2 instances with permissions to access Secrets Manager. Retrieve the token from Secrets Manager. Use the decrypted access token to send the message to the chat.",
      "Encrypt the access token by using an AWS Key Management Service (AWS KMS) AWS managed key. Store the access token in an Amazon S3 bucket. Add a bucket policy to the S3 bucket to allow access from other accounts. Update the IAM role of the EC2 instances with permissions to access Amazon S3 and AWS KMS. Retrieve the token from the S3 bucket. Decrypt the token by using AWS KMS on the EC2 instances. Use the decrypted access token to send the massage to the chat."
    ],
    "site_answers": [
      "Use AWS Secrets Manager with an AWS Key Management Service (AWS KMS) customer managed key to store the access token. Add a resource-based policy to the secret to allow access from other accounts. Update the IAM role of the EC2 instances with permissions to access Secrets Manager. Retrieve the token from Secrets Manager. Use the decrypted access token to send the message to the chat."
    ]
  },
  {
    "question_text": "A company is running Amazon EC2 instances in multiple AWS accounts. A developer needs to implement an application that collects all the lifecycle events of the EC2 instances. The application needs to store the lifecycle events in a single Amazon Simple Queue Service (Amazon SQS) queue in the company's main AWS account for further processing.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure Amazon EC2 to deliver the EC2 instance lifecycle events from all accounts to the Amazon EventBridge event bus of the main account. Add an EventBridge rule to the event bus of the main account that matches all EC2 instance lifecycle events. Add the SQS queue as a target of the rule.",
      "Use the resource policies of the SQS queue in the main account to give each account permissions to write to that SQS queue. Add to the Amazon EventBridge event bus of each account an EventBridge rule that matches all EC2 instance lifecycle events. Add the SQS queue in the main account as a target of the rule.",
      "Write an AWS Lambda function that scans through all EC2 instances in the company accounts to detect EC2 instance lifecycle changes. Configure the Lambda function to write a notification message to the SQS queue in the main account if the function detects an EC2 instance lifecycle change. Add an Amazon EventBridge scheduled rule that invokes the Lambda function every minute.",
      "Configure the permissions on the main account event bus to receive events from all accounts. Create an Amazon EventBridge rule in each account to send all the EC2 instance lifecycle events to the main account event bus. Add an EventBridge rule to the main account event bus that matches all EC2 instance lifecycle events. Set the SQS queue as a target for the rule."
    ],
    "site_answers": [
      "Configure the permissions on the main account event bus to receive events from all accounts. Create an Amazon EventBridge rule in each account to send all the EC2 instance lifecycle events to the main account event bus. Add an EventBridge rule to the main account event bus that matches all EC2 instance lifecycle events. Set the SQS queue as a target for the rule."
    ]
  },
  {
    "question_text": "An application is using Amazon Cognito user pools and identity pools for secure access. A developer wants to integrate the user-specific file upload and download features in the application with Amazon S3. The developer must ensure that the files are saved and retrieved in a secure manner and that users can access only their own files. The file sizes range from 3 KB to 300 MB.\n\nWhich option will meet these requirements with the HIGHEST level of security?",
    "question_type": "single",
    "choices": [
      "Use S3 Event Notifications to validate the file upload and download requests and update the user interface (UI).",
      "Save the details of the uploaded files in a separate Amazon DynamoDB table. Filter the list of files in the user interface (UI) by comparing the current user ID with the user ID associated with the file in the table.",
      "Use Amazon API Gateway and an AWS Lambda function to upload and download files. Validate each request in the Lambda function before performing the requested operation.",
      "Use an IAM policy within the Amazon Cognito identity prefix to restrict users to use their own folders in Amazon S3."
    ],
    "site_answers": [
      "Use an IAM policy within the Amazon Cognito identity prefix to restrict users to use their own folders in Amazon S3."
    ]
  },
  {
    "question_text": "A company is building a scalable data management solution by using AWS services to improve the speed and agility of development. The solution will ingest large volumes of data from various sources and will process this data through multiple business rules and transformations.\n\nThe solution requires business rules to run in sequence and to handle reprocessing of data if errors occur when the business rules run. The company needs the solution to be scalable and to require the least possible maintenance.\n\nWhich AWS service should the company use to manage and automate the orchestration of the data flows to meet these requirements?",
    "question_type": "single",
    "choices": [
      "AWS Batch",
      "AWS Step Functions",
      "AWS Glue",
      "AWS Lambda"
    ],
    "site_answers": [
      "AWS Step Functions"
    ]
  },
  {
    "question_text": "A developer has created an AWS Lambda function that is written in Python. The Lambda function reads data from objects in Amazon S3 and writes data to an Amazon DynamoDB table. The function is successfully invoked from an S3 event notification when an object is created. However, the function fails when it attempts to write to the DynamoDB table.\n\nWhat is the MOST likely cause of this issue?",
    "question_type": "single",
    "choices": [
      "The Lambda function's concurrency limit has been exceeded.",
      "DynamoDB table requires a global secondary index (GSI) to support writes.",
      "The Lambda function does not have IAM permissions to write to DynamoDB.",
      "The DynamoDB table is not running in the same Availability Zone as the Lambda function."
    ],
    "site_answers": [
      "The Lambda function does not have IAM permissions to write to DynamoDB."
    ]
  },
  {
    "question_text": "A developer is creating an AWS CloudFormation template to deploy Amazon EC2 instances across multiple AWS accounts. The developer must choose the EC2 instances from a list of approved instance types.\n\nHow can the developer incorporate the list of approved instance types in the CloudFormation template?",
    "question_type": "single",
    "choices": [
      "Create a separate CloudFormation template for each EC2 instance type in the list.",
      "In the Resources section of the CloudFormation template, create resources for each EC2 instance type in the list.",
      "In the CloudFormation template, create a separate parameter for each EC2 instance type in the list.",
      "In the CloudFormation template, create a parameter with the list of EC2 instance types as AllowedValues."
    ],
    "site_answers": [
      "In the CloudFormation template, create a parameter with the list of EC2 instance types as AllowedValues."
    ]
  },
  {
    "question_text": "A developer has an application that makes batch requests directly to Amazon DynamoDB by using the BatchGetItem low-level API operation. The responses frequently return values in the UnprocessedKeys element.\n\nWhich actions should the developer take to increase the resiliency of the application when the batch response includes values in UnprocessedKeys? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Retry the batch operation immediately.",
      "Retry the batch operation with exponential backoff and randomized delay.",
      "Update the application to use an AWS software development kit (AWS SDK) to make the requests.",
      "Increase the provisioned read capacity of the DynamoDB tables that the operation accesses.",
      "Increase the provisioned write capacity of the DynamoDB tables that the operation accesses."
    ],
    "site_answers": [
      "Retry the batch operation with exponential backoff and randomized delay.",
      "Increase the provisioned read capacity of the DynamoDB tables that the operation accesses."
    ]
  },
  {
    "question_text": "A company is running a custom application on a set of on-premises Linux servers that are accessed using Amazon API Gateway. AWS X-Ray tracing has been enabled on the API test stage.\n\nHow can a developer enable X-Ray tracing on the on-premises servers with the LEAST amount of configuration?",
    "question_type": "single",
    "choices": [
      "Install and run the X-Ray SDK on the on-premises servers to capture and relay the data to the X-Ray service.",
      "Install and run the X-Ray daemon on the on-premises servers to capture and relay the data to the X-Ray service.",
      "Capture incoming requests on-premises and configure an AWS Lambda function to pull, process, and relay relevant data to X-Ray using the PutTraceSegments API call.",
      "Capture incoming requests on-premises and configure an AWS Lambda function to pull, process, and relay relevant data to X-Ray using the PutTelemetryRecords API call."
    ],
    "site_answers": [
      "Install and run the X-Ray daemon on the on-premises servers to capture and relay the data to the X-Ray service."
    ]
  },
  {
    "question_text": "A company wants to share information with a third party. The third party has an HTTP API endpoint that the company can use to share the information. The company has the required API key to access the HTTP API.\n\nThe company needs a way to manage the API key by using code. The integration of the API key with the application code cannot affect application performance.\n\nWhich solution will meet these requirements MOST securely?",
    "question_type": "single",
    "choices": [
      "Store the API credentials in AWS Secrets Manager. Retrieve the API credentials at runtime by using the AWS SDK. Use the credentials to make the API call.",
      "Store the API credentials in a local code variable. Push the code to a secure Git repository. Use the local code variable at runtime to make the API call.",
      "Store the API credentials as an object in a private Amazon S3 bucket. Restrict access to the S3 object by using IAM policies. Retrieve the API credentials at runtime by using the AWS SDK. Use the credentials to make the API call.",
      "Store the API credentials in an Amazon DynamoDB table. Restrict access to the table by using resource-based policies. Retrieve the API credentials at runtime by using the AWS SDK. Use the credentials to make the API call."
    ],
    "site_answers": [
      "Store the API credentials in AWS Secrets Manager. Retrieve the API credentials at runtime by using the AWS SDK. Use the credentials to make the API call."
    ]
  },
  {
    "question_text": "A developer is deploying a new application to Amazon Elastic Container Service (Amazon ECS). The developer needs to securely store and retrieve different types of variables. These variables include authentication information for a remote API, the URL for the API, and credentials. The authentication information and API URL must be available to all current and future deployed versions of the application across development, testing, and production environments.\n\nHow should the developer retrieve the variables with the FEWEST application changes?",
    "question_type": "single",
    "choices": [
      "Update the application to retrieve the variables from AWS Systems Manager Parameter Store. Use unique paths in Parameter Store for each variable in each environment. Store the credentials in AWS Secrets Manager in each environment.",
      "Update the application to retrieve the variables from AWS Key Management Service (AWS KMS). Store the API URL and credentials as unique keys for each environment.",
      "Update the application to retrieve the variables from an encrypted file that is stored with the application. Store the API URL and credentials in unique files for each environment.",
      "Update the application to retrieve the variables from each of the deployed environments. Define the authentication information and API URL in the ECS task definition as unique names during the deployment process."
    ],
    "site_answers": [
      "Update the application to retrieve the variables from AWS Systems Manager Parameter Store. Use unique paths in Parameter Store for each variable in each environment. Store the credentials in AWS Secrets Manager in each environment."
    ]
  },
  {
    "question_text": "A company is migrating legacy internal applications to AWS. Leadership wants to rewrite the internal employee directory to use native AWS services. A developer needs to create a solution for storing employee contact details and high-resolution photos for use with the new application.\n\nWhich solution will enable the search and retrieval of each employee's individual details and high-resolution photos using AWS APIs?",
    "question_type": "single",
    "choices": [
      "Encode each employee's contact information and photos using Base64. Store the information in an Amazon DynamoDB table using a sort key.",
      "Store each employee's contact information in an Amazon DynamoDB table along with the object keys for the photos stored in Amazon S3.",
      "Use Amazon Cognito user pools to implement the employee directory in a fully managed software-as-a-service (SaaS) method.",
      "Store employee contact information in an Amazon RDS DB instance with the photos stored in Amazon Elastic File System (Amazon EFS)."
    ],
    "site_answers": [
      "Store each employee's contact information in an Amazon DynamoDB table along with the object keys for the photos stored in Amazon S3."
    ]
  },
  {
    "question_text": "A developer is creating an application that will give users the ability to store photos from their cellphones in the cloud. The application needs to support tens of thousands of users. The application uses an Amazon API Gateway REST API that is integrated with AWS Lambda functions to process the photos. The application stores details about the photos in Amazon DynamoDB.\n\nUsers need to create an account to access the application. In the application, users must be able to upload photos and retrieve previously uploaded photos. The photos will range in size from 300 KB to 5 MB.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Use Amazon Cognito user pools to manage user accounts. Create an Amazon Cognito user pool authorizer in API Gateway to control access to the API. Use the Lambda function to store the photos and details in the DynamoDB table. Retrieve previously uploaded photos directly from the DynamoDB table.",
      "Use Amazon Cognito user pools to manage user accounts. Create an Amazon Cognito user pool authorizer in API Gateway to control access to the API. Use the Lambda function to store the photos in Amazon S3. Store the object's S3 key as part of the photo details in the DynamoDB table. Retrieve previously uploaded photos by querying DynamoDB for the S3 key.",
      "Create an IAM user for each user of the application during the sign-up process. Use IAM authentication to access the API Gateway API. Use the Lambda function to store the photos in Amazon S3. Store the object's S3 key as part of the photo details in the DynamoDB table. Retrieve previously uploaded photos by querying DynamoDB for the S3 key.",
      "Create a users table in DynamoDB. Use the table to manage user accounts. Create a Lambda authorizer that validates user credentials against the users table. Integrate the Lambda authorizer with API Gateway to control access to the API. Use the Lambda function to store the photos in Amazon S3. Store the object's S3 key as par of the photo details in the DynamoDB table. Retrieve previously uploaded photos by querying DynamoDB for the S3 key."
    ],
    "site_answers": [
      "Use Amazon Cognito user pools to manage user accounts. Create an Amazon Cognito user pool authorizer in API Gateway to control access to the API. Use the Lambda function to store the photos in Amazon S3. Store the object's S3 key as part of the photo details in the DynamoDB table. Retrieve previously uploaded photos by querying DynamoDB for the S3 key."
    ]
  },
  {
    "question_text": "A company receives food orders from multiple partners. The company has a microservices application that uses Amazon API Gateway APIs with AWS Lambda integration. Each partner sends orders by calling a customized API that is exposed through API Gateway. The API call invokes a shared Lambda function to process the orders.\n\nPartners need to be notified after the Lambda function processes the orders. Each partner must receive updates for only the partner's own orders. The company wants to add new partners in the future with the fewest code changes possible.\n\nWhich solution will meet these requirements in the MOST scalable way?",
    "question_type": "single",
    "choices": [
      "Create a different Amazon Simple Notification Service (Amazon SNS) topic for each partner. Configure the Lambda function to publish messages for each partner to the partner's SNS topic.",
      "Create a different Lambda function for each partner. Configure the Lambda function to notify each partner's service endpoint directly.",
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Configure the Lambda function to publish messages with specific attributes to the SNS topic. Subscribe each partner to the SNS topic. Apply the appropriate filter policy to the topic subscriptions.",
      "Create one Amazon Simple Notification Service (Amazon SNS) topic. Subscribe all partners to the SNS topic."
    ],
    "site_answers": [
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Configure the Lambda function to publish messages with specific attributes to the SNS topic. Subscribe each partner to the SNS topic. Apply the appropriate filter policy to the topic subscriptions."
    ]
  },
  {
    "question_text": "A financial company must store original customer records for 10 years for legal reasons. A complete record contains personally identifiable information (PII). According to local regulations, PII is available to only certain people in the company and must not be shared with third parties. The company needs to make the records available to third-party organizations for statistical analysis without sharing the PII.\n\nA developer wants to store the original immutable record in Amazon S3. Depending on who accesses the S3 document, the document should be returned as is or with all the PII removed. The developer has written an AWS Lambda function to remove the PII from the document. The function is named removePii.\n\nWhat should the developer do so that the company can meet the PII requirements while maintaining only one copy of the document?",
    "question_type": "single",
    "choices": [
      "Set up an S3 event notification that invokes the removePii function when an S3 GET request is made. Call Amazon S3 by using a GET request to access the object without PII.",
      "Set up an S3 event notification that invokes the removePii function when an S3 PUT request is made. Call Amazon S3 by using a PUT request to access the object without PII.",
      "Create an S3 Object Lambda access point from the S3 console. Select the removePii function. Use S3 Access Points to access the object without PII.",
      "Create an S3 access point from the S3 console. Use the access point name to call the GetObjectLegalHold S3 API function. Pass in the removePii function name to access the object without PII."
    ],
    "site_answers": [
      "Create an S3 Object Lambda access point from the S3 console. Select the removePii function. Use S3 Access Points to access the object without PII."
    ]
  },
  {
    "question_text": "A developer is deploying an AWS Lambda function The developer wants the ability to return to older versions of the function quickly and seamlessly.\n\nHow can the developer achieve this goal with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Use AWS OpsWorks to perform blue/green deployments.",
      "Use a function alias with different versions.",
      "Maintain deployment packages for older versions in Amazon S3.",
      "Use AWS CodePipeline for deployments and rollbacks."
    ],
    "site_answers": [
      "Use a function alias with different versions."
    ]
  },
  {
    "question_text": "A developer has written an AWS Lambda function. The function is CPU-bound. The developer wants to ensure that the function returns responses quickly.\n\nHow can the developer improve the function's performance?",
    "question_type": "single",
    "choices": [
      "Increase the function's CPU core count.",
      "Increase the function's memory.",
      "Increase the function's reserved concurrency.",
      "Increase the function's timeout."
    ],
    "site_answers": [
      "Increase the function's memory."
    ]
  },
  {
    "question_text": "For a deployment using AWS Code Deploy, what is the run order of the hooks for in-place deployments?",
    "question_type": "single",
    "choices": [
      "BeforeInstall -> ApplicationStop -> ApplicationStart -> AfterInstall",
      "ApplicationStop -> BeforeInstall -> AfterInstall -> ApplicationStart",
      "BeforeInstall -> ApplicationStop -> ValidateService -> ApplicationStart",
      "ApplicationStop -> BeforeInstall -> ValidateService -> ApplicationStart"
    ],
    "site_answers": [
      "ApplicationStop -> BeforeInstall -> AfterInstall -> ApplicationStart"
    ]
  },
  {
    "question_text": "A company is building a serverless application on AWS. The application uses an AWS Lambda function to process customer orders 24 hours a day, 7 days a week. The Lambda function calls an external vendor's HTTP API to process payments.\n\nDuring load tests, a developer discovers that the external vendor payment processing API occasionally times out and returns errors. The company expects that some payment processing API calls will return errors.\n\nThe company wants the support team to receive notifications in near real time only when the payment processing external API error rate exceed 5% of the total number of transactions in an hour. Developers need to use an existing Amazon Simple Notification Service (Amazon SNS) topic that is configured to notify the support team.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Write the results of payment processing API calls to Amazon CloudWatch. Use Amazon CloudWatch Logs Insights to query the CloudWatch logs. Schedule the Lambda function to check the CloudWatch logs and notify the existing SNS topic.",
      "Publish custom metrics to CloudWatch that record the failures of the external payment processing API calls. Configure a CloudWatch alarm to notify the existing SNS topic when error rate exceeds the specified rate.",
      "Publish the results of the external payment processing API calls to a new Amazon SNS topic. Subscribe the support team members to the new SNS topic.",
      "Write the results of the external payment processing API calls to Amazon S3. Schedule an Amazon Athena query to run at regular intervals. Configure Athena to send notifications to the existing SNS topic when the error rate exceeds the specified rate."
    ],
    "site_answers": [
      "Publish custom metrics to CloudWatch that record the failures of the external payment processing API calls. Configure a CloudWatch alarm to notify the existing SNS topic when error rate exceeds the specified rate."
    ]
  },
  {
    "question_text": "A company is offering APIs as a service over the internet to provide unauthenticated read access to statistical information that is updated daily. The company uses Amazon API Gateway and AWS Lambda to develop the APIs. The service has become popular, and the company wants to enhance the responsiveness of the APIs.\n\nWhich action can help the company achieve this goal?",
    "question_type": "single",
    "choices": [
      "Enable API caching in API Gateway.",
      "Configure API Gateway to use an interface VPC endpoint.",
      "Enable cross-origin resource sharing (CORS) for the APIs.",
      "Configure usage plans and API keys in API Gateway."
    ],
    "site_answers": [
      "Enable API caching in API Gateway."
    ]
  },
  {
    "question_text": "A developer wants to store information about movies. Each movie has a title, release year, and genre. The movie information also can include additional properties about the cast and production crew. This additional information is inconsistent across movies. For example, one movie might have an assistant director, and another movie might have an animal trainer.\n\nThe developer needs to implement a solution to support the following use cases:For a given title and release year, get all details about the movie that has that title and release year.\n\nFor a given title, get all details about all movies that have that title.\n\nFor a given genre, get all details about all movies in that genre.\n\nWhich data store configuration will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon DynamoDB table. Configure the table with a primary key that consists of the title as the partition key and the release year as the sort key. Create a global secondary index that uses the genre as the partition key and the title as the sort key.",
      "Create an Amazon DynamoDB table. Configure the table with a primary key that consists of the genre as the partition key and the release year as the sort key. Create a global secondary index that uses the title as the partition key.",
      "On an Amazon RDS DB instance, create a table that contains columns for title, release year, and genre. Configure the title as the primary key.",
      "On an Amazon RDS DB instance, create a table where the primary key is the title and all other data is encoded into JSON format as one additional column."
    ],
    "site_answers": [
      "Create an Amazon DynamoDB table. Configure the table with a primary key that consists of the title as the partition key and the release year as the sort key. Create a global secondary index that uses the genre as the partition key and the title as the sort key."
    ]
  },
  {
    "question_text": "A developer maintains an Amazon API Gateway REST API. Customers use the API through a frontend UI and Amazon Cognito authentication.\n\nThe developer has a new version of the API that contains new endpoints and backward-incompatible interface changes. The developer needs to provide beta access to other developers on the team without affecting customers.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Define a development stage on the API Gateway API. Instruct the other developers to point the endpoints to the development stage.",
      "Define a new API Gateway API that points to the new API application code. Instruct the other developers to point the endpoints to the new API.",
      "Implement a query parameter in the API application code that determines which code version to call.",
      "Specify new API Gateway endpoints for the API endpoints that the developer wants to add."
    ],
    "site_answers": [
      "Define a development stage on the API Gateway API. Instruct the other developers to point the endpoints to the development stage."
    ]
  },
  {
    "question_text": "A developer is creating an application that will store personal health information (PHI). The PHI needs to be encrypted at all times. An encrypted Amazon RDS for MySQL DB instance is storing the data. The developer wants to increase the performance of the application by caching frequently accessed data while adding the ability to sort or rank the cached datasets.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon ElastiCache for Redis instance. Enable encryption of data in transit and at rest. Store frequently accessed data in the cache.",
      "Create an Amazon ElastiCache for Memcached instance. Enable encryption of data in transit and at rest. Store frequently accessed data in the cache.",
      "Create an Amazon RDS for MySQL read replica. Connect to the read replica by using SSL. Configure the read replica to store frequently accessed data.",
      "Create an Amazon DynamoDB table and a DynamoDB Accelerator (DAX) cluster for the table. Store frequently accessed data in the DynamoDB table."
    ],
    "site_answers": [
      "Create an Amazon ElastiCache for Redis instance. Enable encryption of data in transit and at rest. Store frequently accessed data in the cache."
    ]
  },
  {
    "question_text": "A company has a multi-node Windows legacy application that runs on premises. The application uses a network shared folder as a centralized configuration repository to store configuration files in .xml format. The company is migrating the application to Amazon EC2 instances. As part of the migration to AWS, a developer must identify a solution that provides high availability for the repository.\n\nWhich solution will meet this requirement MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Mount an Amazon Elastic Block Store (Amazon EBS) volume onto one of the EC2 instances. Deploy a file system on the EBS volume. Use the host operating system to share a folder. Update the application code to read and write configuration files from the shared folder.",
      "Deploy a micro EC2 instance with an instance store volume. Use the host operating system to share a folder. Update the application code to read and write configuration files from the shared folder.",
      "Create an Amazon S3 bucket to host the repository. Migrate the existing .xml files to the S3 bucket. Update the application code to use the AWS SDK to read and write configuration files from Amazon S3.",
      "Create an Amazon S3 bucket to host the repository. Migrate the existing .xml files to the S3 bucket. Mount the S3 bucket to the EC2 instances as a local volume. Update the application code to read and write configuration files from the disk."
    ],
    "site_answers": [
      "Create an Amazon S3 bucket to host the repository. Migrate the existing .xml files to the S3 bucket. Update the application code to use the AWS SDK to read and write configuration files from Amazon S3."
    ]
  },
  {
    "question_text": "A company wants to deploy and maintain static websites on AWS. Each website's source code is hosted in one of several version control systems, including AWS CodeCommit, Bitbucket, and GitHub.\n\nThe company wants to implement phased releases by using development, staging, user acceptance testing, and production environments in the AWS Cloud. Deployments to each environment must be started by code merges on the relevant Git branch. The company wants to use HTTPS for all data exchange. The company needs a solution that does not require servers to run continuously.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Host each website by using AWS Amplify with a serverless backend. Conned the repository branches that correspond to each of the desired environments. Start deployments by merging code changes to a desired branch.",
      "Host each website in AWS Elastic Beanstalk with multiple environments. Use the EB CLI to link each repository branch. Integrate AWS CodePipeline to automate deployments from version control code merges.",
      "Host each website in different Amazon S3 buckets for each environment. Configure AWS CodePipeline to pull source code from version control. Add an AWS CodeBuild stage to copy source code to Amazon S3.",
      "Host each website on its own Amazon EC2 instance. Write a custom deployment script to bundle each website's static assets. Copy the assets to Amazon EC2. Set up a workflow to run the script when code is merged."
    ],
    "site_answers": [
      "Host each website by using AWS Amplify with a serverless backend. Conned the repository branches that correspond to each of the desired environments. Start deployments by merging code changes to a desired branch."
    ]
  },
  {
    "question_text": "A company is migrating an on-premises database to Amazon RDS for MySQL. The company has read-heavy workloads. The company wants to refactor the code to achieve optimum read performance for queries.\n\nWhich solution will meet this requirement with LEAST current and future effort?",
    "question_type": "single",
    "choices": [
      "Use a multi-AZ Amazon RDS deployment. Increase the number of connections that the code makes to the database or increase the connection pool size if a connection pool is in use.",
      "Use a multi-AZ Amazon RDS deployment. Modify the code so that queries access the secondary RDS instance.",
      "Deploy Amazon RDS with one or more read replicas. Modify the application code so that queries use the URL for the read replicas.",
      "Use open source replication software to create a copy of the MySQL database on an Amazon EC2 instance. Modify the application code so that queries use the IP address of the EC2 instance."
    ],
    "site_answers": [
      "Deploy Amazon RDS with one or more read replicas. Modify the application code so that queries use the URL for the read replicas."
    ]
  },
  {
    "question_text": "A developer is creating an application that will be deployed on IoT devices. The application will send data to a RESTful API that is deployed as an AWS Lambda function. The application will assign each API request a unique identifier. The volume of API requests from the application can randomly increase at any given time of day.\n\nDuring periods of request throttling, the application might need to retry requests. The API must be able to handle duplicate requests without inconsistencies or data loss.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon RDS for MySQL DB instance. Store the unique identifier for each request in a database table. Modify the Lambda function to check the table for the identifier before processing the request.",
      "Create an Amazon DynamoDB table. Store the unique identifier for each request in the table. Modify the Lambda function to check the table for the identifier before processing the request.",
      "Create an Amazon DynamoDB table. Store the unique identifier for each request in the table. Modify the Lambda function to return a client error response when the function receives a duplicate request.",
      "Create an Amazon ElastiCache for Memcached instance. Store the unique identifier for each request in the cache. Modify the Lambda function to check the cache for the identifier before processing the request."
    ],
    "site_answers": [
      "Create an Amazon DynamoDB table. Store the unique identifier for each request in the table. Modify the Lambda function to check the table for the identifier before processing the request."
    ]
  },
  {
    "question_text": "A developer wants to expand an application to run in multiple AWS Regions. The developer wants to copy Amazon Machine Images (AMIs) with the latest changes and create a new application stack in the destination Region. According to company requirements, all AMIs must be encrypted in all Regions. However, not all the AMIs that the company uses are encrypted.\n\nHow can the developer expand the application to run in the destination Region while meeting the encryption requirement?",
    "question_type": "single",
    "choices": [
      "Create new AMIs, and specify encryption parameters. Copy the encrypted AMIs to the destination Region. Delete the unencrypted AMIs.",
      "Use AWS Key Management Service (AWS KMS) to enable encryption on the unencrypted AMIs. Copy the encrypted AMIs to the destination Region.",
      "Use AWS Certificate Manager (ACM) to enable encryption on the unencrypted AMIs. Copy the encrypted AMIs to the destination Region.",
      "Copy the unencrypted AMIs to the destination Region. Enable encryption by default in the destination Region."
    ],
    "site_answers": [
      "Create new AMIs, and specify encryption parameters. Copy the encrypted AMIs to the destination Region. Delete the unencrypted AMIs."
    ]
  },
  {
    "question_text": "A company hosts a client-side web application for one of its subsidiaries on Amazon S3. The web application can be accessed through Amazon CloudFront from https://www.example.com. After a successful rollout, the company wants to host three more client-side web applications for its remaining subsidiaries on three separate S3 buckets.\n\nTo achieve this goal, a developer moves all the common JavaScript files and web fonts to a central S3 bucket that serves the web applications. However, during testing, the developer notices that the browser blocks the JavaScript files and web fonts.\n\nWhat should the developer do to prevent the browser from blocking the JavaScript files and web fonts?",
    "question_type": "single",
    "choices": [
      "Create four access points that allow access to the central S3 bucket. Assign an access point to each web application bucket.",
      "Create a bucket policy that allows access to the central S3 bucket. Attach the bucket policy to the central S3 bucket",
      "Create a cross-origin resource sharing (CORS) configuration that allows access to the central S3 bucket. Add the CORS configuration to the central S3 bucket.",
      "Create a Content-MD5 header that provides a message integrity check for the central S3 bucket. Insert the Content-MD5 header for each web application request."
    ],
    "site_answers": [
      "Create a cross-origin resource sharing (CORS) configuration that allows access to the central S3 bucket. Add the CORS configuration to the central S3 bucket."
    ]
  },
  {
    "question_text": "An application is processing clickstream data using Amazon Kinesis. The clickstream data feed into Kinesis experiences periodic spikes. The PutRecords API call occasionally fails and the logs show that the failed call returns the response shown below:Which techniques will help mitigate this exception? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Implement retries with exponential backoff.",
      "Use a PutRecord API instead of PutRecords.",
      "Reduce the frequency and/or size of the requests.",
      "Use Amazon SNS instead of Kinesis.",
      "Reduce the number of KCL consumers."
    ],
    "site_answers": [
      "Implement retries with exponential backoff.",
      "Reduce the frequency and/or size of the requests."
    ]
  },
  {
    "question_text": "A company has an application that uses Amazon Cognito user pools as an identity provider. The company must secure access to user records. The company has set up multi-factor authentication (MFA). The company also wants to send a login activity notification by email every time a user logs in.\n\nWhat is the MOST operationally efficient solution that meets this requirement?",
    "question_type": "single",
    "choices": [
      "Create an AWS Lambda function that uses Amazon Simple Email Service (Amazon SES) to send the email notification. Add an Amazon API Gateway API to invoke the function. Call the API from the client side when login confirmation is received.",
      "Create an AWS Lambda function that uses Amazon Simple Email Service (Amazon SES) to send the email notification. Add an Amazon Cognito post authentication Lambda trigger for the function.",
      "Create an AWS Lambda function that uses Amazon Simple Email Service (Amazon SES) to send the email notification. Create an Amazon CloudWatch Logs log subscription filter to invoke the function based on the login status.",
      "Configure Amazon Cognito to stream all logs to Amazon Kinesis Data Firehose. Create an AWS Lambda function to process the streamed logs and to send the email notification based on the login status of each user."
    ],
    "site_answers": [
      "Create an AWS Lambda function that uses Amazon Simple Email Service (Amazon SES) to send the email notification. Add an Amazon Cognito post authentication Lambda trigger for the function."
    ]
  },
  {
    "question_text": "A developer has an application that stores data in an Amazon S3 bucket. The application uses an HTTP API to store and retrieve objects. When the PutObject API operation adds objects to the S3 bucket the developer must encrypt these objects at rest by using server-side encryption with Amazon S3 managed keys (SSE-S3).\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Create an AWS Key Management Service (AWS KMS) key. Assign the KMS key to the S3 bucket.",
      "Set the x-amz-server-side-encryption header when invoking the PutObject API operation.",
      "Provide the encryption key in the HTTP header of every request.",
      "Apply TLS to encrypt the traffic to the S3 bucket."
    ],
    "site_answers": [
      "Set the x-amz-server-side-encryption header when invoking the PutObject API operation."
    ]
  },
  {
    "question_text": "A developer needs to perform geographic load testing of an API. The developer must deploy resources to multiple AWS Regions to support the load testing of the API.\n\nHow can the developer meet these requirements without additional application code?",
    "question_type": "single",
    "choices": [
      "Create and deploy an AWS Lambda function in each desired Region. Configure the Lambda function to create a stack from an AWS CloudFormation template in that Region when the function is invoked.",
      "Create an AWS CloudFormation template that defines the load test resources. Use the AWS CLI create-stack-set command to create a stack set in the desired Regions.",
      "Create an AWS Systems Manager document that defines the resources. Use the document to create the resources in the desired Regions.",
      "Create an AWS CloudFormation template that defines the load test resources. Use the AWS CLI deploy command to create a stack from the template in each Region."
    ],
    "site_answers": [
      "Create an AWS CloudFormation template that defines the load test resources. Use the AWS CLI create-stack-set command to create a stack set in the desired Regions."
    ]
  },
  {
    "question_text": "A developer is creating an application that includes an Amazon API Gateway REST API in the us-east-2 Region. The developer wants to use Amazon CloudFront and a custom domain name for the API. The developer has acquired an SSL/TLS certificate for the domain from a third-party provider.\n\nHow should the developer configure the custom domain for the application?",
    "question_type": "single",
    "choices": [
      "Import the SSL/TLS certificate into AWS Certificate Manager (ACM) in the same Region as the API. Create a DNS A record for the custom domain.",
      "Import the SSL/TLS certificate into CloudFront. Create a DNS CNAME record for the custom domain.",
      "Import the SSL/TLS certificate into AWS Certificate Manager (ACM) in the same Region as the API. Create a DNS CNAME record for the custom domain.",
      "Import the SSL/TLS certificate into AWS Certificate Manager (ACM) in the us-east-1 Region. Create a DNS CNAME record for the custom domain."
    ],
    "site_answers": [
      "Import the SSL/TLS certificate into AWS Certificate Manager (ACM) in the us-east-1 Region. Create a DNS CNAME record for the custom domain."
    ]
  },
  {
    "question_text": "A developer is creating a template that uses AWS CloudFormation to deploy an application. The application is serverless and uses Amazon API Gateway, Amazon DynamoDB, and AWS Lambda.\n\nWhich AWS service or tool should the developer use to define serverless resources in YAML?",
    "question_type": "single",
    "choices": [
      "CloudFormation serverless intrinsic functions",
      "AWS Elastic Beanstalk",
      "AWS Serverless Application Model (AWS SAM)",
      "AWS Cloud Development Kit (AWS CDK)"
    ],
    "site_answers": [
      "AWS Serverless Application Model (AWS SAM)"
    ]
  },
  {
    "question_text": "A developer wants to insert a record into an Amazon DynamoDB table as soon as a new file is added to an Amazon S3 bucket.\n\nWhich set of steps would be necessary to achieve this?",
    "question_type": "single",
    "choices": [
      "Create an event with Amazon EventBridge that will monitor the S3 bucket and then insert the records into DynamoDB.",
      "Configure an S3 event to invoke an AWS Lambda function that inserts records into DynamoDB.",
      "Create an AWS Lambda function that will poll the S3 bucket and then insert the records into DynamoDB.",
      "Create a cron job that will run at a scheduled time and insert the records into DynamoDB."
    ],
    "site_answers": [
      "Configure an S3 event to invoke an AWS Lambda function that inserts records into DynamoDB."
    ]
  },
  {
    "question_text": "A development team maintains a web application by using a single AWS CloudFormation template. The template defines web servers and an Amazon RDS database. The team uses the Cloud Formation template to deploy the Cloud Formation stack to different environments.\n\nDuring a recent application deployment, a developer caused the primary development database to be dropped and recreated. The result of this incident was a loss of data. The team needs to avoid accidental database deletion in the future.\n\nWhich solutions will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Add a CloudFormation Deletion Policy attribute with the Retain value to the database resource.",
      "Update the CloudFormation stack policy to prevent updates to the database.",
      "Modify the database to use a Multi-AZ deployment.",
      "Create a CloudFormation stack set for the web application and database deployments.",
      "Add a Cloud Formation DeletionPolicy attribute with the Retain value to the stack."
    ],
    "site_answers": [
      "Add a CloudFormation Deletion Policy attribute with the Retain value to the database resource.",
      "Update the CloudFormation stack policy to prevent updates to the database."
    ]
  },
  {
    "question_text": "A company has an Amazon S3 bucket that contains sensitive data. The data must be encrypted in transit and at rest. The company encrypts the data in the S3 bucket by using an AWS Key Management Service (AWS KMS) key. A developer needs to grant several other AWS accounts the permission to use the S3 GetObject operation to retrieve the data from the S3 bucket.\n\nHow can the developer enforce that all requests to retrieve the data provide encryption in transit?",
    "question_type": "single",
    "choices": [
      "Define a resource-based policy on the S3 bucket to deny access when a request meets the condition \"aws:SecureTransport\": \"false\".",
      "Define a resource-based policy on the S3 bucket to allow access when a request meets the condition \"aws:SecureTransport\": \"false\".",
      "Define a role-based policy on the other accounts' roles to deny access when a request meets the condition of \"aws:SecureTransport\": \"false\".",
      "Define a resource-based policy on the KMS key to deny access when a request meets the condition of \"aws:SecureTransport\": \"false\"."
    ],
    "site_answers": [
      "Define a resource-based policy on the S3 bucket to deny access when a request meets the condition \"aws:SecureTransport\": \"false\"."
    ]
  },
  {
    "question_text": "An application that is hosted on an Amazon EC2 instance needs access to files that are stored in an Amazon S3 bucket. The application lists the objects that are stored in the S3 bucket and displays a table to the user. During testing, a developer discovers that the application does not show any objects in the list.\n\nWhat is the MOST secure way to resolve this issue?",
    "question_type": "single",
    "choices": [
      "Update the IAM instance profile that is attached to the EC2 instance to include the S3:* permission for the S3 bucket.",
      "Update the IAM instance profile that is attached to the EC2 instance to include the S3:ListBucket permission for the S3 bucket.",
      "Update the developer's user permissions to include the S3:ListBucket permission for the S3 bucket.",
      "Update the S3 bucket policy by including the S3:ListBucket permission and by setting the Principal element to specify the account number of the EC2 instance."
    ],
    "site_answers": [
      "Update the IAM instance profile that is attached to the EC2 instance to include the S3:ListBucket permission for the S3 bucket."
    ]
  },
  {
    "question_text": "A company is planning to securely manage one-time fixed license keys in AWS. The company's development team needs to access the license keys in automaton scripts that run in Amazon EC2 instances and in AWS CloudFormation stacks.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Amazon S3 with encrypted files prefixed with \"config\"",
      "AWS Secrets Manager secrets with a tag that is named SecretString",
      "AWS Systems Manager Parameter Store SecureString parameters",
      "CloudFormation NoEcho parameters"
    ],
    "site_answers": [
      "AWS Systems Manager Parameter Store SecureString parameters"
    ]
  },
  {
    "question_text": "A company has deployed infrastructure on AWS. A development team wants to create an AWS Lambda function that will retrieve data from an Amazon Aurora database. The Amazon Aurora database is in a private subnet in company's VPC. The VPC is named VPC1. The data is relational in nature. The Lambda function needs to access the data securely.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create the Lambda function. Configure VPC1 access for the function. Attach a security group named SG1 to both the Lambda function and the database. Configure the security group inbound and outbound rules to allow TCP traffic on Port 3306.",
      "Create and launch a Lambda function in a new public subnet that is in a new VPC named VPC2. Create a peering connection between VPC1 and VPC2.",
      "Create the Lambda function. Configure VPC1 access for the function. Assign a security group named SG1 to the Lambda function. Assign a second security group named SG2 to the database. Add an inbound rule to SG1 to allow TCP traffic from Port 3306.",
      "Export the data from the Aurora database to Amazon S3. Create and launch a Lambda function in VPC1. Configure the Lambda function query the data from Amazon S3."
    ],
    "site_answers": [
      "Create the Lambda function. Configure VPC1 access for the function. Attach a security group named SG1 to both the Lambda function and the database. Configure the security group inbound and outbound rules to allow TCP traffic on Port 3306."
    ]
  },
  {
    "question_text": "A developer is building a web application that uses Amazon API Gateway to expose an AWS Lambda function to process requests from clients. During testing, the developer notices that the API Gateway times out even though the Lambda function finishes under the set time limit.\n\nWhich of the following API Gateway metrics in Amazon CloudWatch can help the developer troubleshoot the issue? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "CacheHitCount",
      "IntegrationLatency",
      "CacheMissCount",
      "Latency",
      "Count"
    ],
    "site_answers": [
      "IntegrationLatency",
      "Latency"
    ]
  },
  {
    "question_text": "A development team wants to build a continuous integration/continuous delivery (CI/CD) pipeline. The team is using AWS CodePipeline to automate the code build and deployment. The team wants to store the program code to prepare for the CI/CD pipeline.\n\nWhich AWS service should the team use to store the program code?",
    "question_type": "single",
    "choices": [
      "AWS CodeDeploy",
      "AWS CodeArtifact",
      "AWS CodeCommit",
      "Amazon CodeGuru"
    ],
    "site_answers": [
      "AWS CodeCommit"
    ]
  },
  {
    "question_text": "A developer is designing an AWS Lambda function that creates temporary files that are less than 10 MB during invocation. The temporary files will be accessed and modified multiple times during invocation. The developer has no need to save or retrieve these files in the future.\n\nWhere should the temporary files be stored?",
    "question_type": "single",
    "choices": [
      "the /tmp directory",
      "Amazon Elastic File System (Amazon EFS)",
      "Amazon Elastic Block Store (Amazon EBS)",
      "Amazon S3"
    ],
    "site_answers": [
      "the /tmp directory"
    ]
  },
  {
    "question_text": "A developer is designing a serverless application with two AWS Lambda functions to process photos. One Lambda function stores objects in an Amazon S3 bucket and stores the associated metadata in an Amazon DynamoDB table. The other Lambda function fetches the objects from the S3 bucket by using the metadata from the DynamoDB table. Both Lambda functions use the same Python library to perform complex computations and are approaching the quota for the maximum size of zipped deployment packages.\n\nWhat should the developer do to reduce the size of the Lambda deployment packages with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Package each Python library in its own .zip file archive. Deploy each Lambda function with its own copy of the library.",
      "Create a Lambda layer with the required Python library. Use the Lambda layer in both Lambda functions.",
      "Combine the two Lambda functions into one Lambda function. Deploy the Lambda function as a single .zip file archive.",
      "Download the Python library to an S3 bucket. Program the Lambda functions to reference the object URLs."
    ],
    "site_answers": [
      "Create a Lambda layer with the required Python library. Use the Lambda layer in both Lambda functions."
    ]
  },
  {
    "question_text": "A developer is writing an AWS Lambda function. The developer wants to log key events that occur while the Lambda function runs. The developer wants to include a unique identifier to associate the events with a specific function invocation. The developer adds the following code to the Lambda function:Which solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Obtain the request identifier from the AWS request ID field in the context object. Configure the application to write logs to standard output.",
      "Obtain the request identifier from the AWS request ID field in the event object. Configure the application to write logs to a file.",
      "Obtain the request identifier from the AWS request ID field in the event object. Configure the application to write logs to standard output.",
      "Obtain the request identifier from the AWS request ID field in the context object. Configure the application to write logs to a file."
    ],
    "site_answers": [
      "Obtain the request identifier from the AWS request ID field in the context object. Configure the application to write logs to standard output."
    ]
  },
  {
    "question_text": "A developer is working on a serverless application that needs to process any changes to an Amazon DynamoDB table with an AWS Lambda function.\n\nHow should the developer configure the Lambda function to detect changes to the DynamoDB table?",
    "question_type": "single",
    "choices": [
      "Create an Amazon Kinesis data stream, and attach it to the DynamoDB table. Create a trigger to connect the data stream to the Lambda function.",
      "Create an Amazon EventBridge rule to invoke the Lambda function on a regular schedule. Conned to the DynamoDB table from the Lambda function to detect changes.",
      "Enable DynamoDB Streams on the table. Create a trigger to connect the DynamoDB stream to the Lambda function.",
      "Create an Amazon Kinesis Data Firehose delivery stream, and attach it to the DynamoDB table. Configure the delivery stream destination as the Lambda function."
    ],
    "site_answers": [
      "Enable DynamoDB Streams on the table. Create a trigger to connect the DynamoDB stream to the Lambda function."
    ]
  },
  {
    "question_text": "An application uses an Amazon EC2 Auto Scaling group. A developer notices that EC2 instances are taking a long time to become available during scale-out events. The UserData script is taking a long time to run.\n\nThe developer must implement a solution to decrease the time that elapses before an EC2 instance becomes available. The solution must make the most recent version of the application available at all times and must apply all available security updates. The solution also must minimize the number of images that are created. The images must be validated.\n\nWhich combination of steps should the developer take to meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Use EC2 Image Builder to create an Amazon Machine Image (AMI). Install all the patches and agents that are needed to manage and run the application. Update the Auto Scaling group launch configuration to use the AMI.",
      "Use EC2 Image Builder to create an Amazon Machine Image (AMI). Install the latest version of the application and all the patches and agents that are needed to manage and run the application. Update the Auto Scaling group launch configuration to use the AMI.",
      "Set up AWS CodeDeploy to deploy the most recent version of the application at runtime.",
      "Set up AWS CodePipeline to deploy the most recent version of the application at runtime.",
      "Remove any commands that perform operating system patching from the UserData script."
    ],
    "site_answers": [
      "Use EC2 Image Builder to create an Amazon Machine Image (AMI). Install all the patches and agents that are needed to manage and run the application. Update the Auto Scaling group launch configuration to use the AMI.",
      "Set up AWS CodeDeploy to deploy the most recent version of the application at runtime."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function that needs credentials to connect to an Amazon RDS for MySQL database. An Amazon S3 bucket currently stores the credentials. The developer needs to improve the existing solution by implementing credential rotation and secure storage. The developer also needs to provide integration with the Lambda function.\n\nWhich solution should the developer use to store and retrieve the credentials with the LEAST management overhead?",
    "question_type": "single",
    "choices": [
      "Store the credentials in AWS Systems Manager Parameter Store. Select the database that the parameter will access. Use the default AWS Key Management Service (AWS KMS) key to encrypt the parameter. Enable automatic rotation for the parameter. Use the parameter from Parameter Store on the Lambda function to connect to the database.",
      "Encrypt the credentials with the default AWS Key Management Service (AWS KMS) key. Store the credentials as environment variables for the Lambda function. Create a second Lambda function to generate new credentials and to rotate the credentials by updating the environment variables of the first Lambda function. Invoke the second Lambda function by using an Amazon EventBridge rule that runs on a schedule. Update the database to use the new credentials. On the first Lambda function, retrieve the credentials from the environment variables. Decrypt the credentials by using AWS KMS, Connect to the database.",
      "Store the credentials in AWS Secrets Manager. Set the secret type to Credentials for Amazon RDS database. Select the database that the secret will access. Use the default AWS Key Management Service (AWS KMS) key to encrypt the secret. Enable automatic rotation for the secret. Use the secret from Secrets Manager on the Lambda function to connect to the database.",
      "Encrypt the credentials by using AWS Key Management Service (AWS KMS). Store the credentials in an Amazon DynamoDB table. Create a second Lambda function to rotate the credentials. Invoke the second Lambda function by using an Amazon EventBridge rule that runs on a schedule. Update the DynamoDB table. Update the database to use the generated credentials. Retrieve the credentials from DynamoDB with the first Lambda function. Connect to the database."
    ],
    "site_answers": [
      "Store the credentials in AWS Secrets Manager. Set the secret type to Credentials for Amazon RDS database. Select the database that the secret will access. Use the default AWS Key Management Service (AWS KMS) key to encrypt the secret. Enable automatic rotation for the secret. Use the secret from Secrets Manager on the Lambda function to connect to the database."
    ]
  },
  {
    "question_text": "A developer has written the following IAM policy to provide access to an Amazon S3 bucket:\n\n\"Version\": \"2012-10-17\",\"Statement\": [\"Effect\": \"Allow\",\"Action\": [\"s3:GetObject\",\"s3: PutObject\"\"Resource\": \"arn: aws: s3: : : DOC-EXAMPLE-BUCKET/*\"},\n{\"Effect\": \"Deny\",\"Action\": \"s3 :* \",\"Resource\": \"arn: aws:s3: : : DOC-EXAMPLE-BUCKET/secrets*\"}\n\nWhich access does the policy allow regarding the s3:GetObject and s3:PutObject actions?",
    "question_type": "single",
    "choices": [
      "Access on all buckets except the \"DOC-EXAMPLE-BUCKET\" bucket",
      "Access on all buckets that start with \"DOC-EXAMPLE-BUCKET\" except the \"DOC-EXAMPLE-BUCKET/secrets\" bucket",
      "Access on all objects in the \"DOC-EXAMPLE-BUCKET\" bucket along with access to all S3 actions for objects in the \"DOC-EXAMPLE-BUCKET\" bucket that start with \"secrets\"",
      "Access on all objects in the \"DOC-EXAMPLE-BUCKET\" bucket except on objects that start with \"secrets\""
    ],
    "site_answers": [
      "Access on all objects in the \"DOC-EXAMPLE-BUCKET\" bucket except on objects that start with \"secrets\""
    ]
  },
  {
    "question_text": "A developer is creating a mobile app that calls a backend service by using an Amazon API Gateway REST API. For integration testing during the development phase, the developer wants to simulate different backend responses without invoking the backend service.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Create an AWS Lambda function. Use API Gateway proxy integration to return constant HTTP responses.",
      "Create an Amazon EC2 instance that serves the backend REST API by using an AWS CloudFormation template.",
      "Customize the API Gateway stage to select a response type based on the request.",
      "Use a request mapping template to select the mock integration response."
    ],
    "site_answers": [
      "Use a request mapping template to select the mock integration response."
    ]
  },
  {
    "question_text": "A developer has a legacy application that is hosted on-premises. Other applications hosted on AWS depend on the on-premises application for proper functioning. In case of any application errors, the developer wants to be able to use Amazon CloudWatch to monitor and troubleshoot all applications from one place.\n\nHow can the developer accomplish this?",
    "question_type": "single",
    "choices": [
      "Install an AWS SDK on the on-premises server to automatically send logs to CloudWatch.",
      "Download the CloudWatch agent to the on-premises server. Configure the agent to use IAM user credentials with permissions for CloudWatch.",
      "Upload log files from the on-premises server to Amazon S3 and have CloudWatch read the files.",
      "Upload log files from the on-premises server to an Amazon EC2 instance and have the instance forward the logs to CloudWatch."
    ],
    "site_answers": [
      "Download the CloudWatch agent to the on-premises server. Configure the agent to use IAM user credentials with permissions for CloudWatch."
    ]
  },
  {
    "question_text": "An Amazon Kinesis Data Firehose delivery stream is receiving customer data that contains personally identifiable information. A developer needs to remove pattern-based customer identifiers from the data and store the modified data in an Amazon S3 bucket.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Implement Kinesis Data Firehose data transformation as an AWS Lambda function. Configure the function to remove the customer identifiers. Set an Amazon S3 bucket as the destination of the delivery stream.",
      "Launch an Amazon EC2 instance. Set the EC2 instance as the destination of the delivery stream. Run an application on the EC2 instance to remove the customer identifiers. Store the transformed data in an Amazon S3 bucket.",
      "Create an Amazon OpenSearch Service instance. Set the OpenSearch Service instance as the destination of the delivery stream. Use search and replace to remove the customer identifiers. Export the data to an Amazon S3 bucket.",
      "Create an AWS Step Functions workflow to remove the customer identifiers. As the last step in the workflow, store the transformed data in an Amazon S3 bucket. Set the workflow as the destination of the delivery stream."
    ],
    "site_answers": [
      "Implement Kinesis Data Firehose data transformation as an AWS Lambda function. Configure the function to remove the customer identifiers. Set an Amazon S3 bucket as the destination of the delivery stream."
    ]
  },
  {
    "question_text": "A developer is using an AWS Lambda function to generate avatars for profile pictures that are uploaded to an Amazon S3 bucket. The Lambda function is automatically invoked for profile pictures that are saved under the /original/ S3 prefix. The developer notices that some pictures cause the Lambda function to time out. The developer wants to implement a fallback mechanism by using another Lambda function that resizes the profile picture.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Set the image resize Lambda function as a destination of the avatar generator Lambda function for the events that fail processing.",
      "Create an Amazon Simple Queue Service (Amazon SQS) queue. Set the SQS queue as a destination with an on failure condition for the avatar generator Lambda function. Configure the image resize Lambda function to poll from the SQS queue.",
      "Create an AWS Step Functions state machine that invokes the avatar generator Lambda function and uses the image resize Lambda function as a fallback. Create an Amazon EventBridge rule that matches events from the S3 bucket to invoke the state machine.",
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Set the SNS topic as a destination with an on failure condition for the avatar generator Lambda function. Subscribe the image resize Lambda function to the SNS topic."
    ],
    "site_answers": [
      "Set the image resize Lambda function as a destination of the avatar generator Lambda function for the events that fail processing."
    ]
  },
  {
    "question_text": "A developer needs to migrate an online retail application to AWS to handle an anticipated increase in traffic. The application currently runs on two servers: one server for the web application and another server for the database. The web server renders webpages and manages session state in memory. The database server hosts a MySQL database that contains order details. When traffic to the application is heavy, the memory usage for the web server approaches 100% and the application slows down considerably.\n\nThe developer has found that most of the memory increase and performance decrease is related to the load of managing additional user sessions. For the web server migration, the developer will use Amazon EC2 instances with an Auto Scaling group behind an Application Load Balancer.\n\nWhich additional set of changes should the developer make to the application to improve the application's performance?",
    "question_type": "single",
    "choices": [
      "Use an EC2 instance to host the MySQL database. Store the session data and the application data in the MySQL database.",
      "Use Amazon ElastiCache for Memcached to store and manage the session data. Use an Amazon RDS for MySQL DB instance to store the application data.",
      "Use Amazon ElastiCache for Memcached to store and manage the session data and the application data.",
      "Use the EC2 instance store to manage the session data. Use an Amazon RDS for MySQL DB instance to store the application data."
    ],
    "site_answers": [
      "Use Amazon ElastiCache for Memcached to store and manage the session data. Use an Amazon RDS for MySQL DB instance to store the application data."
    ]
  },
  {
    "question_text": "An application uses Lambda functions to extract metadata from files uploaded to an S3 bucket; the metadata is stored in Amazon DynamoDB. The application starts behaving unexpectedly, and the developer wants to examine the logs of the Lambda function code for errors.\n\nBased on this system configuration, where would the developer find the logs?",
    "question_type": "single",
    "choices": [
      "Amazon S3",
      "AWS CloudTrail",
      "Amazon CloudWatch",
      "Amazon DynamoDB"
    ],
    "site_answers": [
      "Amazon CloudWatch"
    ]
  },
  {
    "question_text": "A company is using an AWS Lambda function to process records from an Amazon Kinesis data stream. The company recently observed slow processing of the records. A developer notices that the iterator age metric for the function is increasing and that the Lambda run duration is constantly above normal.\n\nWhich actions should the developer take to increase the processing speed? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Increase the number of shards of the Kinesis data stream.",
      "Decrease the timeout of the Lambda function.",
      "Increase the memory that is allocated to the Lambda function.",
      "Decrease the number of shards of the Kinesis data stream.",
      "Increase the timeout of the Lambda function."
    ],
    "site_answers": [
      "Increase the number of shards of the Kinesis data stream.",
      "Increase the memory that is allocated to the Lambda function."
    ]
  },
  {
    "question_text": "A company needs to harden its container images before the images are in a running state. The company's application uses Amazon Elastic Container Registry (Amazon ECR) as an image registry. Amazon Elastic Kubernetes Service (Amazon EKS) for compute, and an AWS CodePipeline pipeline that orchestrates a continuous integration and continuous delivery (CI/CD) workflow.\n\nDynamic application security testing occurs in the final stage of the pipeline after a new image is deployed to a development namespace in the EKS cluster. A developer needs to place an analysis stage before this deployment to analyze the container image earlier in the CI/CD pipeline.\n\nWhich solution will meet these requirements with the MOST operational efficiency?",
    "question_type": "single",
    "choices": [
      "Build the container image and run the docker scan command locally. Mitigate any findings before pushing changes to the source code repository. Write a pre-commit hook that enforces the use of this workflow before commit.",
      "Create a new CodePipeline stage that occurs after the container image is built. Configure ECR basic image scanning to scan on image push. Use an AWS Lambda function as the action provider. Configure the Lambda function to check the scan results and to fail the pipeline if there are findings.",
      "Create a new CodePipeline stage that occurs after source code has been retrieved from its repository. Run a security scanner on the latest revision of the source code. Fail the pipeline if there are findings.",
      "Add an action to the deployment stage of the pipeline so that the action occurs before the deployment to the EKS cluster. Configure ECR basic image scanning to scan on image push. Use an AWS Lambda function as the action provider. Configure the Lambda function to check the scan results and to fail the pipeline if there are findings."
    ],
    "site_answers": [
      "Create a new CodePipeline stage that occurs after the container image is built. Configure ECR basic image scanning to scan on image push. Use an AWS Lambda function as the action provider. Configure the Lambda function to check the scan results and to fail the pipeline if there are findings."
    ]
  },
  {
    "question_text": "A developer is testing a new file storage application that uses an Amazon CloudFront distribution to serve content from an Amazon S3 bucket. The distribution accesses the S3 bucket by using an origin access identity (OAI). The S3 bucket's permissions explicitly deny access to all other users.\n\nThe application prompts users to authenticate on a login page and then uses signed cookies to allow users to access their personal storage directories. The developer has configured the distribution to use its default cache behavior with restricted viewer access and has set the origin to point to the S3 bucket. However, when the developer tries to navigate to the login page, the developer receives a 403 Forbidden error.\n\nThe developer needs to implement a solution to allow unauthenticated access to the login page. The solution also must keep all private content secure.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add a second cache behavior to the distribution with the same origin as the default cache behavior. Set the path pattern for the second cache behavior to the path of the login page, and make viewer access unrestricted. Keep the default cache behavior's settings unchanged.",
      "Add a second cache behavior to the distribution with the same origin as the default cache behavior. Set the path pattern for the second cache behavior to *, and make viewer access restricted. Change the default cache behavior's path pattern to the path of the login page, and make viewer access unrestricted.",
      "Add a second origin as a failover origin to the default cache behavior. Point the failover origin to the S3 bucket. Set the path pattern for the primary origin to *, and make viewer access restricted. Set the path pattern for the failover origin to the path of the login page, and make viewer access unrestricted.",
      "Add a bucket policy to the S3 bucket to allow read access. Set the resource on the policy to the Amazon Resource Name (ARN) of the login page object in the S3 bucket. Add a CloudFront function to the default cache behavior to redirect unauthorized requests to the login page's S3 URL."
    ],
    "site_answers": [
      "Add a second cache behavior to the distribution with the same origin as the default cache behavior. Set the path pattern for the second cache behavior to the path of the login page, and make viewer access unrestricted. Keep the default cache behavior's settings unchanged."
    ]
  },
  {
    "question_text": "A developer is using AWS Amplify Hosting to build and deploy an application. The developer is receiving an increased number of bug reports from users. The developer wants to add end-to-end testing to the application to eliminate as many bugs as possible before the bugs reach production.\n\nWhich solution should the developer implement to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Run the amplify add test command in the Amplify CLI.",
      "Create unit tests in the application. Deploy the unit tests by using the amplify push command in the Amplify CLI.",
      "Add a test phase to the amplify.yml build settings for the application.",
      "Add a test phase to the aws-exports.js file for the application."
    ],
    "site_answers": [
      "Add a test phase to the amplify.yml build settings for the application."
    ]
  },
  {
    "question_text": "An ecommerce company is using an AWS Lambda function behind Amazon API Gateway as its application tier. To process orders during checkout, the application calls a POST API from the frontend. The POST API invokes the Lambda function asynchronously. In rare situations, the application has not processed orders. The Lambda application logs show no errors or failures.\n\nWhat should a developer do to solve this problem?",
    "question_type": "single",
    "choices": [
      "Inspect the frontend logs for API failures. Call the POST API manually by using the requests from the log file.",
      "Create and inspect the Lambda dead-letter queue. Troubleshoot the failed functions. Reprocess the events.",
      "Inspect the Lambda logs in Amazon CloudWatch for possible errors. Fix the errors.",
      "Make sure that caching is disabled for the POST API in API Gateway."
    ],
    "site_answers": [
      "Create and inspect the Lambda dead-letter queue. Troubleshoot the failed functions. Reprocess the events."
    ]
  },
  {
    "question_text": "A company is building a web application on AWS. When a customer sends a request, the application will generate reports and then make the reports available to the customer within one hour. Reports should be accessible to the customer for 8 hours. Some reports are larger than 1 MB. Each report is unique to the customer. The application should delete all reports that are older than 2 days.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Generate the reports and then store the reports as Amazon DynamoDB items that have a specified TTL. Generate a URL that retrieves the reports from DynamoDB. Provide the URL to customers through the web application.",
      "Generate the reports and then store the reports in an Amazon S3 bucket that uses server-side encryption. Attach the reports to an Amazon Simple Notification Service (Amazon SNS) message. Subscribe the customer to email notifications from Amazon SNS.",
      "Generate the reports and then store the reports in an Amazon S3 bucket that uses server-side encryption. Generate a presigned URL that contains an expiration date Provide the URL to customers through the web application. Add S3 Lifecycle configuration rules to the S3 bucket to delete old reports.",
      "Generate the reports and then store the reports in an Amazon RDS database with a date stamp. Generate an URL that retrieves the reports from the RDS database. Provide the URL to customers through the web application. Schedule an hourly AWS Lambda function to delete database records that have expired date stamps."
    ],
    "site_answers": [
      "Generate the reports and then store the reports in an Amazon S3 bucket that uses server-side encryption. Generate a presigned URL that contains an expiration date Provide the URL to customers through the web application. Add S3 Lifecycle configuration rules to the S3 bucket to delete old reports."
    ]
  },
  {
    "question_text": "A company has deployed an application on AWS Elastic Beanstalk. The company has configured the Auto Scaling group that is associated with the Elastic Beanstalk environment to have five Amazon EC2 instances. If the capacity is fewer than four EC2 instances during the deployment, application performance degrades. The company is using the all-at-once deployment policy.\n\nWhat is the MOST cost-effective way to solve the deployment issue?",
    "question_type": "single",
    "choices": [
      "Change the Auto Scaling group to six desired instances.",
      "Change the deployment policy to traffic splitting. Specify an evaluation time of 1 hour.",
      "Change the deployment policy to rolling with additional batch. Specify a batch size of 1.",
      "Change the deployment policy to rolling. Specify a batch size of 2."
    ],
    "site_answers": [
      "Change the deployment policy to rolling with additional batch. Specify a batch size of 1."
    ]
  },
  {
    "question_text": "A developer is incorporating AWS X-Ray into an application that handles personal identifiable information (PII). The application is hosted on Amazon EC2 instances. The application trace messages include encrypted PII and go to Amazon CloudWatch. The developer needs to ensure that no PII goes outside of the EC2 instances.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Manually instrument the X-Ray SDK in the application code.",
      "Use the X-Ray auto-instrumentation agent.",
      "Use Amazon Macie to detect and hide PII. Call the X-Ray API from AWS Lambda.",
      "Use AWS Distro for Open Telemetry."
    ],
    "site_answers": [
      "Manually instrument the X-Ray SDK in the application code."
    ]
  },
  {
    "question_text": "A developer is migrating some features from a legacy monolithic application to use AWS Lambda functions instead. The application currently stores data in an Amazon Aurora DB cluster that runs in private subnets in a VPC. The AWS account has one VPC deployed. The Lambda functions and the DB cluster are deployed in the same AWS Region in the same AWS account.\n\nThe developer needs to ensure that the Lambda functions can securely access the DB cluster without crossing the public internet.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure the DB cluster's public access setting to Yes.",
      "Configure an Amazon RDS database proxy for he Lambda functions.",
      "Configure a NAT gateway and a security group for the Lambda functions.",
      "Configure the VPC, subnets, and a security group for the Lambda functions."
    ],
    "site_answers": [
      "Configure the VPC, subnets, and a security group for the Lambda functions."
    ]
  },
  {
    "question_text": "A developer is building a new application on AWS. The application uses an AWS Lambda function that retrieves information from an Amazon DynamoDB table. The developer hard coded the DynamoDB table name into the Lambda function code. The table name might change over time. The developer does not want to modify the Lambda code if the table name changes.\n\nWhich solution will meet these requirements MOST efficiently?",
    "question_type": "single",
    "choices": [
      "Create a Lambda environment variable to store the table name. Use the standard method for the programming language to retrieve the variable.",
      "Store the table name in a file. Store the file in the /tmp folder. Use the SDK for the programming language to retrieve the table name.",
      "Create a file to store the table name. Zip the file and upload the file to the Lambda layer. Use the SDK for the programming language to retrieve the table name.",
      "Create a global variable that is outside the handler in the Lambda function to store the table name."
    ],
    "site_answers": [
      "Create a Lambda environment variable to store the table name. Use the standard method for the programming language to retrieve the variable."
    ]
  },
  {
    "question_text": "A company has a critical application on AWS. The application exposes an HTTP API by using Amazon API Gateway. The API is integrated with an AWS Lambda function. The application stores data in an Amazon RDS for MySQL DB instance with 2 virtual CPUs (vCPUs) and 64 GB of RAM.\n\nCustomers have reported that some of the API calls return HTTP 500 Internal Server Error responses. Amazon CloudWatch Logs shows errors for \"too many connections.\" The errors occur during peak usage times that are unpredictable.\n\nThe company needs to make the application resilient. The database cannot be down outside of scheduled maintenance hours.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Decrease the number of vCPUs for the DB instance. Increase the max_connections setting.",
      "Use Amazon RDS Proxy to create a proxy that connects to the DB instance. Update the Lambda function to connect to the proxy.",
      "Add a CloudWatch alarm that changes the DB instance class when the number of connections increases to more than 1,000.",
      "Add an Amazon EventBridge rule that increases the max_connections setting of the DB instance when CPU utilization is above 75%."
    ],
    "site_answers": [
      "Use Amazon RDS Proxy to create a proxy that connects to the DB instance. Update the Lambda function to connect to the proxy."
    ]
  },
  {
    "question_text": "A company has installed smart meters in all its customer locations. The smart meters measure power usage at 1-minute intervals and send the usage readings to a remote endpoint for collection. The company needs to create an endpoint that will receive the smart meter readings and store the readings in a database. The company wants to store the location ID and timestamp information.\n\nThe company wants to give its customers low-latency access to their current usage and historical usage on demand. The company expects demand to increase significantly. The solution must not impact performance or include downtime while scaling.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Store the smart meter readings in an Amazon RDS database. Create an index on the location ID and timestamp columns. Use the columns to filter on the customers' data.",
      "Store the smart meter readings in an Amazon DynamoDB table. Create a composite key by using the location ID and timestamp columns. Use the columns to filter on the customers' data.",
      "Store the smart meter readings in Amazon ElastiCache for Redis. Create a SortedSet key by using the location ID and timestamp columns. Use the columns to filter on the customers' data.",
      "Store the smart meter readings in Amazon S3. Partition the data by using the location ID and timestamp columns. Use Amazon Athena to filter on the customers' data."
    ],
    "site_answers": [
      "Store the smart meter readings in an Amazon DynamoDB table. Create a composite key by using the location ID and timestamp columns. Use the columns to filter on the customers' data."
    ]
  },
  {
    "question_text": "A company is building a serverless application that uses AWS Lambda functions. The company needs to create a set of test events to test Lambda functions in a development environment. The test events will be created once and then will be used by all the developers in an IAM developer group. The test events must be editable by any of the IAM users in the IAM developer group.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create and store the test events in Amazon S3 as JSON objects. Allow S3 bucket access to all IAM users.",
      "Create the test events. Configure the event sharing settings to make the test events shareable.",
      "Create and store the test events in Amazon DynamoDB. Allow access to DynamoDB by using IAM roles.",
      "Create the test events. Configure the event sharing settings to make the test events private."
    ],
    "site_answers": [
      "Create the test events. Configure the event sharing settings to make the test events shareable."
    ]
  },
  {
    "question_text": "A developer is configuring an application's deployment environment in AWS CodePipeline. The application code is stored in a GitHub repository. The developer wants to ensure that the repository package's unit tests run in the new deployment environment. The developer has already set the pipeline's source provider to GitHub and has specified the repository and branch to use in the deployment.\n\nWhich combination of steps should the developer take next to meet these requirements with the LEAST overhead? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Create an AWS CodeCommit project. Add the repository package's build and test commands to the project's buildspec.",
      "Create an AWS CodeBuild project. Add the repository package's build and test commands to the project's buildspec.",
      "Create an AWS CodeDeploy project. Add the repository package's build and test commands to the project's buildspec.",
      "Add an action to the source stage. Specify the newly created project as the action provider. Specify the build artifact as the action's input artifact.",
      "Add a new stage to the pipeline after the source stage. Add an action to the new stage. Specify the newly created project as the action provider. Specify the source artifact as the action's input artifact."
    ],
    "site_answers": [
      "Create an AWS CodeBuild project. Add the repository package's build and test commands to the project's buildspec.",
      "Add a new stage to the pipeline after the source stage. Add an action to the new stage. Specify the newly created project as the action provider. Specify the source artifact as the action's input artifact."
    ]
  },
  {
    "question_text": "An engineer created an A/B test of a new feature on an Amazon CloudWatch Evidently project. The engineer configured two variations of the feature (Variation A and Variation B) for the test. The engineer wants to work exclusively with Variation A. The engineer needs to make updates so that Variation A is the only variation that appears when the engineer hits the application's endpoint.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Add an override to the feature. Set the identifier of the override to the engineer's user ID. Set the variation to Variation A.",
      "Add an override to the feature. Set the identifier of the override to Variation A. Set the variation to 100%.",
      "Add an experiment to the project. Set the identifier of the experiment to Variation B. Set the variation to 0%.",
      "Add an experiment to the project. Set the identifier of the experiment to the AWS account's account ISet the variation to Variation A."
    ],
    "site_answers": [
      "Add an override to the feature. Set the identifier of the override to the engineer's user ID. Set the variation to Variation A."
    ]
  },
  {
    "question_text": "A developer is working on an existing application that uses Amazon DynamoDB as its data store. The DynamoDB table has the following attributes: partNumber (partition key), vendor (sort key), description, productFamily, and productType. When the developer analyzes the usage patterns, the developer notices that there are application modules that frequently look for a list of products based on the productFamily and productType attributes.\n\nThe developer wants to make changes to the application to improve performance of the query operations.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a global secondary index (GSI) with productFamily as the partition key and productType as the sort key.",
      "Create a local secondary index (LSI) with productFamily as the partition key and productType as the sort key.",
      "Recreate the table. Add partNumber as the partition key and vendor as the sort key. During table creation, add a local secondary index (LSI) with productFamily as the partition key and productType as the sort key.",
      "Update the queries to use Scan operations with productFamily as the partition key and productType as the sort key."
    ],
    "site_answers": [
      "Create a global secondary index (GSI) with productFamily as the partition key and productType as the sort key."
    ]
  },
  {
    "question_text": "A developer creates a VPC named VPC-A that has public and private subnets. The developer also creates an Amazon RDS database inside the private subnet of VPC-A. To perform some queries, the developer creates an AWS Lambda function in the default VPC. The Lambda function has code to access the RDS database. When the Lambda function runs, an error message indicates that the function cannot connect to the RDS database.\n\nHow can the developer solve this problem?",
    "question_type": "single",
    "choices": [
      "Modify the RDS security group. Add a rule to allow traffic from all the ports from the VPC CIDR block.",
      "Redeploy the Lambda function in the same subnet as the RDS instance. Ensure that the RDS security group allows traffic from the Lambda function.",
      "Create a security group for the Lambda function. Add a new rule in the RDS security group to allow traffic from the new Lambda security group.",
      "Create an IAM role. Attach a policy that allows access to the RDS database. Attach the role to the Lambda function."
    ],
    "site_answers": [
      "Redeploy the Lambda function in the same subnet as the RDS instance. Ensure that the RDS security group allows traffic from the Lambda function."
    ]
  },
  {
    "question_text": "A company runs an application on AWS. The company deployed the application on Amazon EC2 instances. The application stores data on Amazon Aurora.\n\nThe application recently logged multiple application-specific custom DECRYP_ERROR errors to Amazon CloudWatch logs. The company did not detect the issue until the automated tests that run every 30 minutes failed. A developer must implement a solution that will monitor for the custom errors and alert a development team in real time when these errors occur in the production environment.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Configure the application to create a custom metric and to push the metric to CloudWatch. Create an AWS CloudTrail alarm. Configure the CloudTrail alarm to use an Amazon Simple Notification Service (Amazon SNS) topic to send notifications.",
      "Create an AWS Lambda function to run every 5 minutes to scan the CloudWatch logs for the keyword DECRYP_ERROR. Configure the Lambda function to use Amazon Simple Notification Service (Amazon SNS) to send a notification.",
      "Use Amazon CloudWatch Logs to create a metric filter that has a filter pattern for DECRYP_ERROR. Create a CloudWatch alarm on this metric for a threshold >=1. Configure the alarm to send Amazon Simple Notification Service (Amazon SNS) notifications.",
      "Install the CloudWatch unified agent on the EC2 instance. Configure the application to generate a metric for the keyword DECRYP_ERROR errors. Configure the agent to send Amazon Simple Notification Service (Amazon SNS) notifications."
    ],
    "site_answers": [
      "Use Amazon CloudWatch Logs to create a metric filter that has a filter pattern for DECRYP_ERROR. Create a CloudWatch alarm on this metric for a threshold >=1. Configure the alarm to send Amazon Simple Notification Service (Amazon SNS) notifications."
    ]
  },
  {
    "question_text": "A developer created an AWS Lambda function that accesses resources in a VPC. The Lambda function polls an Amazon Simple Queue Service (Amazon SQS) queue for new messages through a VPC endpoint. Then the function calculates a rolling average of the numeric values that are contained in the messages. After initial tests of the Lambda function, the developer found that the value of the rolling average that the function returned was not accurate.\n\nHow can the developer ensure that the function calculates an accurate rolling average?",
    "question_type": "single",
    "choices": [
      "Set the function's reserved concurrency to 1. Calculate the rolling average in the function. Store the calculated rolling average in Amazon ElastiCache.",
      "Modify the function to store the values in Amazon ElastiCache. When the function initializes, use the previous values from the cache to calculate the rolling average.",
      "Set the function's provisioned concurrency to 1. Calculate the rolling average in the function. Store the calculated rolling average in Amazon ElastiCache.",
      "Modify the function to store the values in the function's layers. When the function initializes, use the previously stored values to calculate the rolling average."
    ],
    "site_answers": [
      "Set the function's reserved concurrency to 1. Calculate the rolling average in the function. Store the calculated rolling average in Amazon ElastiCache."
    ]
  },
  {
    "question_text": "A developer is writing unit tests for a new application that will be deployed on AWS. The developer wants to validate all pull requests with unit tests and merge the code with the main branch only when all tests pass.\n\nThe developer stores the code in AWS CodeCommit and sets up AWS CodeBuild to run the unit tests. The developer creates an AWS Lambda function to start the CodeBuild task. The developer needs to identify the CodeCommit events in an Amazon EventBridge event that can invoke the Lambda function when a pull request is created or updated.\n\nWhich CodeCommit event will meet these requirements?",
    "question_type": "single",
    "choices": [
      "pullRequestMergeStatusUpdated",
      "pullRequestApprovalRuleCreated",
      "pullRequestSourceBranchUpdated et pullRequestCreated",
      "pullRequestUpdated et pullRequestSourceBranchCreated"
    ],
    "site_answers": [
      "pullRequestSourceBranchUpdated et pullRequestCreated"
    ]
  },
  {
    "question_text": "A developer deployed an application to an Amazon EC2 instance. The application needs to know the public IPv4 address of the instance.\n\nHow can the application find this information?",
    "question_type": "single",
    "choices": [
      "Query the instance metadata from http://169.254.169.254/latest/meta-data/.",
      "Query the instance user data from http://169.254.169.254/latest/user-data/.",
      "Query the Amazon Machine Image (AMI) information from http://169.254.169.254/latest/meta-data/ami/.",
      "Check the hosts file of the operating system."
    ],
    "site_answers": [
      "Query the instance metadata from http://169.254.169.254/latest/meta-data/."
    ]
  },
  {
    "question_text": "An application under development is required to store hundreds of video files. The data must be encrypted within the application prior to storage, with a unique key for each video file.\n\nHow should the developer code the application?",
    "question_type": "single",
    "choices": [
      "Use the KMS Encrypt API to encrypt the data. Store the encrypted data key and data.",
      "Use a cryptography library to generate an encryption key for the application. Use the encryption key to encrypt the data. Store the encrypted data.",
      "Use the KMS GenerateDataKey API to get a data key. Encrypt the data with the data key. Store the encrypted data key and data.",
      "Upload the data to an S3 bucket using server side-encryption with an AWS KMS key."
    ],
    "site_answers": [
      "Use the KMS GenerateDataKey API to get a data key. Encrypt the data with the data key. Store the encrypted data key and data."
    ]
  },
  {
    "question_text": "A company is planning to deploy an application on AWS behind an Elastic Load Balancer. The application uses an HTTP/HTTPS listener and must access the client IP addresses.\n\nWhich load-balancing solution meets these requirements?",
    "question_type": "single",
    "choices": [
      "Use an Application Load Balancer and the X-Forwarded-For headers.",
      "Use a Network Load Balancer (NLB). Enable proxy protocol support on the NLB and the target application.",
      "Use an Application Load Balancer. Register the targets by the instance ID.",
      "Use a Network Load Balancer and the X-Forwarded-For headers."
    ],
    "site_answers": [
      "Use an Application Load Balancer and the X-Forwarded-For headers."
    ]
  },
  {
    "question_text": "A developer wants to debug an application by searching and filtering log data. The application logs are stored in Amazon CloudWatch Logs. The developer creates a new metric filter to count exceptions in the application logs. However, no results are returned from the logs.\n\nWhat is the reason that no filtered results are being returned?",
    "question_type": "single",
    "choices": [
      "A setup of the Amazon CloudWatch interface VPC endpoint is required for filtering the CloudWatch Logs in the VPC.",
      "CloudWatch Logs only publishes metric data for events that happen after the filter is created.",
      "The log group for CloudWatch Logs should be first streamed to Amazon OpenSearch Service before metric filtering returns the results.",
      "Metric data points for logs groups can be filtered only after they are exported to an Amazon S3 bucket."
    ],
    "site_answers": [
      "CloudWatch Logs only publishes metric data for events that happen after the filter is created."
    ]
  },
  {
    "question_text": "A company is planning to use AWS CodeDeploy to deploy an application to Amazon Elastic Container Service (Amazon ECS). During the deployment of a new version of the application, the company initially must expose only 10% of live traffic to the new version of the deployed application. Then, after 15 minutes elapse, the company must route all the remaining live traffic to the new version of the deployed application.\n\nWhich CodeDeploy predefined configuration will meet these requirements?",
    "question_type": "single",
    "choices": [
      "CodeDeployDefault.ECSCanary10Percent15Minutes",
      "CodeDeployDefault.LambdaCanary10Percent5Minutes",
      "CodeDeployDefault.LambdaCanary10Percentl15Minutes",
      "CodeDeployDefault.ECSLinear10PercentEvery1Minutes"
    ],
    "site_answers": [
      "CodeDeployDefault.ECSCanary10Percent15Minutes"
    ]
  },
  {
    "question_text": "A company hosts a batch processing application on AWS Elastic Beanstalk with instances that run the most recent version of Amazon Linux. The application sorts and processes large datasets.\n\nIn recent weeks, the application's performance has decreased significantly during a peak period for traffic. A developer suspects that the application issues are related to the memory usage. The developer checks the Elastic Beanstalk console and notices that memory usage is not being tracked.\n\nHow should the developer gather more information about the application performance issues?",
    "question_type": "single",
    "choices": [
      "Configure the Amazon CloudWatch agent to push logs to Amazon CloudWatch Logs by using port 443.",
      "Configure the Elastic Beanstalk .ebextensions directory to track the memory usage of the instances.",
      "Configure the Amazon CloudWatch agent to track the memory usage of the instances.",
      "Configure an Amazon CloudWatch dashboard to track the memory usage of the instances."
    ],
    "site_answers": [
      "Configure the Amazon CloudWatch agent to track the memory usage of the instances."
    ]
  },
  {
    "question_text": "A developer is building a highly secure healthcare application using serverless components. This application requires writing temporary data to /tmp storage on an AWS Lambda function.\n\nHow should the developer encrypt this data?",
    "question_type": "single",
    "choices": [
      "Enable Amazon EBS volume encryption with an AWS KMS key in the Lambda function configuration so that all storage attached to the Lambda function is encrypted.",
      "Set up the Lambda function with a role and key policy to access an AWS KMS key. Use the key to generate a data key used to encrypt all data prior to writing to /tmp storage.",
      "Use OpenSSL to generate a symmetric encryption key on Lambda startup. Use this key to encrypt the data prior to writing to /tmp.",
      "Use an on-premises hardware security module (HSM) to generate keys, where the Lambda function requests a data key from the HSM and uses that to encrypt data on all requests to the function."
    ],
    "site_answers": [
      "Set up the Lambda function with a role and key policy to access an AWS KMS key. Use the key to generate a data key used to encrypt all data prior to writing to /tmp storage."
    ]
  },
  {
    "question_text": "A developer has created an AWS Lambda function to provide notification through Amazon Simple Notification Service (Amazon SNS) whenever a file is uploaded to Amazon S3 that is larger than 50 MB. The developer has deployed and tested the Lambda function by using the CLI. However, when the event notification is added to the S3 bucket and a 3,000 MB file is uploaded, the Lambda function does not launch.\n\nWhich of the following is a possible reason for the Lambda function's inability to launch?",
    "question_type": "single",
    "choices": [
      "The S3 event notification does not activate for files that are larger than 1,000 MB.",
      "The resource-based policy for the Lambda function does not have the required permissions to be invoked by Amazon S3.",
      "Lambda functions cannot be invoked directly from an S3 event.",
      "The S3 bucket needs to be made public."
    ],
    "site_answers": [
      "The resource-based policy for the Lambda function does not have the required permissions to be invoked by Amazon S3."
    ]
  },
  {
    "question_text": "A developer is creating a Ruby application and needs to automate the deployment, scaling, and management of an environment without requiring knowledge of the underlying infrastructure.\n\nWhich service would best accomplish this task?",
    "question_type": "single",
    "choices": [
      "AWS CodeDeploy",
      "AWS CloudFormation",
      "AWS OpsWorks",
      "AWS Elastic Beanstalk"
    ],
    "site_answers": [
      "AWS Elastic Beanstalk"
    ]
  },
  {
    "question_text": "A company has a web application that is deployed on AWS. The application uses an Amazon API Gateway API and an AWS Lambda function as its backend.\n\nThe application recently demonstrated unexpected behavior. A developer examines the Lambda function code, finds an error, and modifies the code to resolve the problem. Before deploying the change to production, the developer needs to run tests to validate that the application operates properly.\n\nThe application has only a production environment available. The developer must create a new development environment to test the code changes. The developer must also prevent other developers from overwriting these changes during the test cycle.\n\nWhich combination of steps will meet these requirements with the LEAST development effort? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Create a new resource in the current stage. Create a new method with Lambda proxy integration. Select the Lambda function. Add the hotfix alias. Redeploy the current stage. Test the backend.",
      "Update the Lambda function in the API Gateway API integration request to use the hotfix alias. Deploy the API Gateway API to a new stage named hotfix. Test the backend.",
      "Modify the Lambda function by fixing the code. Test the Lambda function. Create the alias hotfix. Point the alias to the $LATEST version.",
      "Modify the Lambda function by fixing the code. Test the Lambda function. When the Lambda function is working as expected, publish the Lambda function as a new version. Create the alias hotfix. Point the alias to the new version.",
      "Create a new API Gateway API for the development environment. Add a resource and method with Lambda integration. Choose the Lambda function and the hotfix alias. Deploy to a new stage. Test the backend."
    ],
    "site_answers": [
      "Update the Lambda function in the API Gateway API integration request to use the hotfix alias. Deploy the API Gateway API to a new stage named hotfix. Test the backend.",
      "Modify the Lambda function by fixing the code. Test the Lambda function. When the Lambda function is working as expected, publish the Lambda function as a new version. Create the alias hotfix. Point the alias to the new version."
    ]
  },
  {
    "question_text": "A developer is implementing an AWS Cloud Development Kit (AWS CDK) serverless application. The developer will provision several AWS Lambda functions and Amazon API Gateway APIs during AWS CloudFormation stack creation. The developer's workstation has the AWS Serverless Application Model (AWS SAM) and the AWS CDK installed locally.\n\nHow can the developer test a specific Lambda function locally?",
    "question_type": "single",
    "choices": [
      "Run the sam package and sam deploy commands. Create a Lambda test event from the AWS Management Console. Test the Lambda function.",
      "Run the cdk synth and cdk deploy commands. Create a Lambda test event from the AWS Management Console. Test the Lambda function.",
      "Run the cdk synth and sam local invoke commands with the function construct identifier and the path to the synthesized CloudFormation template.",
      "Run the cdk synth and sam local start-lambda commands with the function construct identifier and the path to the synthesized CloudFormation template."
    ],
    "site_answers": [
      "Run the cdk synth and sam local invoke commands with the function construct identifier and the path to the synthesized CloudFormation template."
    ]
  },
  {
    "question_text": "A company's new mobile app uses Amazon API Gateway. As the development team completes a new release of its APIs, a developer must safely and transparently roll out the API change.\n\nWhat is the SIMPLEST solution for the developer to use for rolling out the new API version to a limited number of users through API Gateway?",
    "question_type": "single",
    "choices": [
      "Create a new API in API Gateway. Direct a portion of the traffic to the new API using an Amazon Route 53 weighted routing policy.",
      "Validate the new API version and promote it to production during the window of lowest expected utilization.",
      "Implement an Amazon CloudWatch alarm to trigger a rollback if the observed HTTP 500 status code rate exceeds a predetermined threshold.",
      "Use the canary release deployment option in API Gateway. Direct a percentage of the API traffic using the canarySettings setting."
    ],
    "site_answers": [
      "Use the canary release deployment option in API Gateway. Direct a percentage of the API traffic using the canarySettings setting."
    ]
  },
  {
    "question_text": "A company caches session information for a web application in an Amazon DynamoDB table. The company wants an automated way to delete old items from the table.\n\nWhat is the simplest way to do this?",
    "question_type": "single",
    "choices": [
      "Write a script that deletes old records; schedule the script as a cron job on an Amazon EC2 instance.",
      "Add an attribute with the expiration time; enable the Time To Live feature based on that attribute.",
      "Each day, create a new table to hold session data; delete the previous day's table.",
      "Add an attribute with the expiration time; name the attribute ItemExpiration."
    ],
    "site_answers": [
      "Add an attribute with the expiration time; enable the Time To Live feature based on that attribute."
    ]
  },
  {
    "question_text": "A company is using an Amazon API Gateway REST API endpoint as a webhook to publish events from an on-premises source control management (SCM) system to Amazon EventBridge. The company has configured an EventBridge rule to listen for the events and to control application deployment in a central AWS account. The company needs to receive the same events across multiple receiver AWS accounts.\n\nHow can a developer meet these requirements without changing the configuration of the SCM system?",
    "question_type": "single",
    "choices": [
      "Deploy the API Gateway REST API to all the required AWS accounts. Use the same custom domain name for all the gateway endpoints so that a single SCM webhook can be used for all events from all accounts.",
      "Deploy the API Gateway REST API to all the receiver AWS accounts. Create as many SCM webhooks as the number of AWS accounts.",
      "Grant permission to the central AWS account for EventBridge to access the receiver AWS accounts. Add an EventBridge event bus on the receiver AWS accounts as the targets to the existing EventBridge rule.",
      "Convert the API Gateway type from REST API to HTTP API."
    ],
    "site_answers": [
      "Grant permission to the central AWS account for EventBridge to access the receiver AWS accounts. Add an EventBridge event bus on the receiver AWS accounts as the targets to the existing EventBridge rule."
    ]
  },
  {
    "question_text": "A company moved some of its secure files to a private Amazon S3 bucket that has no public access. The company wants to develop a serverless application that gives its employees the ability to log in and securely share the files with other users.\n\nWhich AWS feature should the company use to share and access the files securely?",
    "question_type": "single",
    "choices": [
      "Amazon Cognito user pool",
      "S3 presigned URLs",
      "S3 bucket policy",
      "Amazon Cognito identity pool"
    ],
    "site_answers": [
      "S3 presigned URLs"
    ]
  },
  {
    "question_text": "A company needs to develop a proof of concept for a web service application. The application will show the weather forecast for one of the company's office locations. The application will provide a REST endpoint that clients can call. Where possible, the application should use caching features provided by AWS to limit the number of requests to the backend service. The application backend will receive a small amount of traffic only during testing.\n\nWhich approach should the developer take to provide the REST endpoint MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Create a container image. Deploy the container image by using Amazon Elastic Kubernetes Service (Amazon EKS). Expose the functionality by using Amazon API Gateway.",
      "Create an AWS Lambda function by using the AWS Serverless Application Model (AWS SAM). Expose the Lambda functionality by using Amazon API Gateway.",
      "Create a container image. Deploy the container image by using Amazon Elastic Container Service (Amazon ECS). Expose the functionality by using Amazon API Gateway.",
      "Create a microservices application. Deploy the application to AWS Elastic Beanstalk. Expose the AWS Lambda functionality by using an Application Load Balancer."
    ],
    "site_answers": [
      "Create an AWS Lambda function by using the AWS Serverless Application Model (AWS SAM). Expose the Lambda functionality by using Amazon API Gateway."
    ]
  },
  {
    "question_text": "An e-commerce web application that shares session state on-premises is being migrated to AWS. The application must be fault tolerant, natively highly scalable, and any service interruption should not affect the user experience.\n\nWhat is the best option to store the session state?",
    "question_type": "single",
    "choices": [
      "Store the session state in Amazon ElastiCache.",
      "Store the session state in Amazon CloudFront.",
      "Store the session state in Amazon S3.",
      "Enable session stickiness using elastic load balancers."
    ],
    "site_answers": [
      "Store the session state in Amazon ElastiCache."
    ]
  },
  {
    "question_text": "A developer is building an application that uses Amazon DynamoDB. The developer wants to retrieve multiple specific items from the database with a single API call.\n\nWhich DynamoDB API call will meet these requirements with the MINIMUM impact on the database?",
    "question_type": "single",
    "choices": [
      "BatchGetItem",
      "GetItem",
      "Scan",
      "Query"
    ],
    "site_answers": [
      "BatchGetItem"
    ]
  },
  {
    "question_text": "A developer has written an application that runs on Amazon EC2 instances. The developer is adding functionality for the application to write objects to an Amazon S3 bucket.\n\nWhich policy must the developer modify to allow the instances to write these objects?",
    "question_type": "single",
    "choices": [
      "The IAM policy that is attached to the EC2 instance profile role",
      "The session policy that is applied to the EC2 instance role session",
      "The AWS Key Management Service (AWS KMS) key policy that is attached to the EC2 instance profile role",
      "The Amazon VPC endpoint policy"
    ],
    "site_answers": [
      "The IAM policy that is attached to the EC2 instance profile role"
    ]
  },
  {
    "question_text": "A developer is leveraging a Border Gateway Protocol (BGP)-based AWS VPN connection to connect from on-premises to Amazon EC2 instances in the developer's account. The developer is able to access an EC2 instance in subnet A, but is unable to access an EC2 instance in subnet B in the same VPC.\n\nWhich logs can the developer use to verify whether the traffic is reaching subnet B?",
    "question_type": "single",
    "choices": [
      "VPN logs",
      "BGP logs",
      "VPC Flow Logs",
      "AWS CloudTrail logs"
    ],
    "site_answers": [
      "VPC Flow Logs"
    ]
  },
  {
    "question_text": "A developer is creating a service that uses an Amazon S3 bucket for image uploads. The service will use an AWS Lambda function to create a thumbnail of each image. Each time an image is uploaded, the service needs to send an email notification and create the thumbnail. The developer needs to configure the image processing and email notifications setup.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Configure S3 event notifications with a destination of the SNS topic. Subscribe the Lambda function to the SNS topic. Create an email notification subscription to the SNS topic.",
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Configure S3 event notifications with a destination of the SNS topic. Subscribe the Lambda function to the SNS topic. Create an Amazon Simple Queue Service (Amazon SQS) queue. Subscribe the SQS queue to the SNS topic. Create an email notification subscription to the SQS queue.",
      "Create an Amazon Simple Queue Service (Amazon SQS) queue. Configure S3 event notifications with a destination of the SQS queue. Subscribe the Lambda function to the SQS queue. Create an email notification subscription to the SQS queue.",
      "Create an Amazon Simple Queue Service (Amazon SQS) queue. Send S3 event notifications to Amazon EventBridge. Create an EventBridge rule that runs the Lambda function when images are uploaded to the S3 bucket. Create an EventBridge rule that sends notifications to the SQS queue. Create an email notification subscription to the SQS queue."
    ],
    "site_answers": [
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Configure S3 event notifications with a destination of the SNS topic. Subscribe the Lambda function to the SNS topic. Create an email notification subscription to the SNS topic."
    ]
  },
  {
    "question_text": "A developer has designed an application to store incoming data as JSON files in Amazon S3 objects. Custom business logic in an AWS Lambda function then transforms the objects, and the Lambda function loads the data into an Amazon DynamoDB table. Recently, the workload has experienced sudden and significant changes in traffic. The flow of data to the DynamoDB table is becoming throttled.\n\nThe developer needs to implement a solution to eliminate the throttling and load the data into the DynamoDB table more consistently.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Refactor the Lambda function into two functions. Configure one function to transform the data and one function to load the data into the DynamoDB table. Create an Amazon Simple Queue Service (Amazon SQS) queue in between the functions to hold the items as messages and to invoke the second function.",
      "Turn on auto scaling for the DynamoDB table. Use Amazon CloudWatch to monitor the table's read and write capacity metrics and to track consumed capacity.",
      "Create an alias for the Lambda function. Configure provisioned concurrency for the application to use.",
      "Refactor the Lambda function into two functions. Configure one function to store the data in the DynamoDB table. Configure the second function to process the data and update the items after the data is stored in DynamoDB. Create a DynamoDB stream to invoke the second function after the data is stored."
    ],
    "site_answers": [
      "Refactor the Lambda function into two functions. Configure one function to transform the data and one function to load the data into the DynamoDB table. Create an Amazon Simple Queue Service (Amazon SQS) queue in between the functions to hold the items as messages and to invoke the second function."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function in VPC mode. An Amazon S3 event will invoke the Lambda function when an object is uploaded into an S3 bucket. The Lambda function will process the object and produce some analytic results that will be recorded into a file. Each processed object will also generate a log entry that will be recorded into a file.\n\nOther Lambda functions, AWS services, and on-premises resources must have access to the result files and log file. Each log entry must also be appended to the same shared log file. The developer needs a solution that can share files and append results into an existing file.\n\nWhich solution should the developer use to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon Elastic File System (Amazon EFS) file system. Mount the EFS file system in Lambda. Store the result files and log file in the mount point. Append the log entries to the log file.",
      "Create an Amazon Elastic Block Store (Amazon EBS) Multi-Attach enabled volume. Attach the EBS volume to all Lambda functions. Update the Lambda function code to download the log file, append the log entries, and upload the modified log file to Amazon EBS.",
      "Create a reference to the /tmp local directory. Store the result files and log file by using the directory reference. Append the log entry to the log file.",
      "Create a reference to the /opt storage directory. Store the result files and log file by using the directory reference. Append the log entry to the log file."
    ],
    "site_answers": [
      "Create an Amazon Elastic File System (Amazon EFS) file system. Mount the EFS file system in Lambda. Store the result files and log file in the mount point. Append the log entries to the log file."
    ]
  },
  {
    "question_text": "A company has an AWS Lambda function that processes incoming requests from an Amazon API Gateway API. The API calls the Lambda function by using a Lambda alias. A developer updated the Lambda function code to handle more details related to the incoming requests. The developer wants to deploy the new Lambda function for more testing by other developers with no impact to customers that use the API.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Create a new version of the Lambda function. Create a new stage on API Gateway with integration to the new Lambda version. Use the new API Gateway stage to test the Lambda function.",
      "Update the existing Lambda alias used by API Gateway to a weighted alias. Add the new Lambda version as an additional Lambda function with a weight of 10%. Use the existing API Gateway stage for testing.",
      "Create a new version of the Lambda function. Create and deploy a second Lambda function to filter incoming requests from API Gateway. If the filtering Lambda function detects a test request, the filtering Lambda function will invoke the new Lambda version of the code. For other requests, the filtering Lambda function will invoke the old Lambda version. Update the API Gateway API to use the filtering Lambda function.",
      "Create a new version of the Lambda function. Create a new API Gateway API for testing purposes. Update the integration of the new API with the new Lambda version. Use the new API for testing."
    ],
    "site_answers": [
      "Create a new version of the Lambda function. Create a new stage on API Gateway with integration to the new Lambda version. Use the new API Gateway stage to test the Lambda function."
    ]
  },
  {
    "question_text": "A company uses AWS Lambda functions and an Amazon S3 trigger to process images into an S3 bucket. A development team set up multiple environments in a single AWS account.\n\nAfter a recent production deployment, the development team observed that the development S3 buckets invoked the production environment Lambda functions. These invocations caused unwanted execution of development S3 files by using production Lambda functions. The development team must prevent these invocations. The team must follow security best practices.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Update the Lambda execution role for the production Lambda function to add a policy that allows the execution role to read from only the production environment S3 bucket.",
      "Move the development and production environments into separate AWS accounts. Add a resource policy to each Lambda function to allow only S3 buckets that are within the same account to invoke the function.",
      "Add a resource policy to the production Lambda function to allow only the production environment S3 bucket to invoke the function.",
      "Move the development and production environments into separate AWS accounts. Update the Lambda execution role for each function to add a policy that allows the execution role to read from the S3 bucket that is within the same account."
    ],
    "site_answers": [
      "Move the development and production environments into separate AWS accounts. Add a resource policy to each Lambda function to allow only S3 buckets that are within the same account to invoke the function."
    ]
  },
  {
    "question_text": "A developer is creating an application. New users of the application must be able to create an account and register by using their own social media accounts.\n\nWhich AWS service or resource should the developer use to meet these requirements?",
    "question_type": "single",
    "choices": [
      "IAM role",
      "Amazon Cognito identity pools",
      "Amazon Cognito user pools",
      "AWS Directory Service"
    ],
    "site_answers": [
      "Amazon Cognito user pools"
    ]
  },
  {
    "question_text": "A social media application uses the AWS SDK for JavaScript on the frontend to get user credentials from AWS Security Token Service (AWS STS). The application stores its assets in an Amazon S3 bucket. The application serves its content by using an Amazon CloudFront distribution with the origin set to the S3 bucket.\n\nThe credentials for the role that the application assumes to make the SDK calls are stored in plaintext in a JSON file within the application code. The developer needs to implement a solution that will allow the application to get user credentials without having any credentials hardcoded in the application code.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add a Lambda@Edge function to the distribution. Invoke the function on viewer request. Add permissions to the function's execution role to allow the function to access AWS STS. Move all SDK calls from the frontend into the function.",
      "Add a CloudFront function to the distribution. Invoke the function on viewer request. Add permissions to the function's execution role to allow the function to access AWS STS. Move all SDK calls from the frontend into the function.",
      "Add a Lambda@Edge function to the distribution. Invoke the function on viewer request. Move the credentials from the JSON file into the function. Move all SDK calls from the frontend into the function.",
      "Add a CloudFront function to the distribution. Invoke the function on viewer request. Move the credentials from the JSON file into the function. Move all SDK calls from the frontend into the function."
    ],
    "site_answers": [
      "Add a Lambda@Edge function to the distribution. Invoke the function on viewer request. Add permissions to the function's execution role to allow the function to access AWS STS. Move all SDK calls from the frontend into the function."
    ]
  },
  {
    "question_text": "An ecommerce website uses an AWS Lambda function and an Amazon RDS for MySQL database for an order fulfillment service. The service needs to return order confirmation immediately.\n\nDuring a marketing campaign that caused an increase in the number of orders, the website's operations team noticed errors for \"too many connections\" from Amazon RDS. However, the RDS DB cluster metrics are healthy. CPU and memory capacity are still available.\n\nWhat should a developer do to resolve the errors?",
    "question_type": "single",
    "choices": [
      "Initialize the database connection outside the handler function. Increase the max_user_connections value on the parameter group of the DB cluster. Restart the DB cluster.",
      "Initialize the database connection outside the handler function. Use RDS Proxy instead of connecting directly to the DB cluster.",
      "Use Amazon Simple Queue Service (Amazon SQS) FIFO queues to queue the orders. Ingest the orders into the database. Set the Lambda function's concurrency to a value that equals the number of available database connections.",
      "Use Amazon Simple Queue Service (Amazon SQS) FIFO queues to queue the orders. Ingest the orders into the database. Set the Lambda function's concurrency to a value that is less than the number of available database connections."
    ],
    "site_answers": [
      "Initialize the database connection outside the handler function. Use RDS Proxy instead of connecting directly to the DB cluster."
    ]
  },
  {
    "question_text": "A company stores its data in data tables in a series of Amazon S3 buckets. The company received an alert that customer credit card information might have been exposed in a data table on one of the company's public applications. A developer needs to identify all potential exposures within the application environment.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use Amazon Athena to run a job on the S3 buckets that contain the affected data. Filter the findings by using the SensitiveData:S3Object/Personal finding type.",
      "Use Amazon Macie to run a job on the S3 buckets that contain the affected data. Filter the findings by using the SensitiveData:S3Object/Financial finding type.",
      "Use Amazon Macie to run a job on the S3 buckets that contain the affected data. Filter the findings by using the SensitiveData:S3Object/Personal finding type.",
      "Use Amazon Athena to run a job on the S3 buckets that contain the affected data. Filter the findings by using the SensitiveData:S3Object/Financial finding type."
    ],
    "site_answers": [
      "Use Amazon Macie to run a job on the S3 buckets that contain the affected data. Filter the findings by using the SensitiveData:S3Object/Financial finding type."
    ]
  },
  {
    "question_text": "A software company is launching a multimedia application. The application will allow guest users to access sample content before the users decide if they want to create an account to gain full access. The company wants to implement an authentication process that can identify users who have already created an account. The company also needs to keep track of the number of guest users who eventually create an account.\n\nWhich combination of steps will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Create an Amazon Cognito user pool. Configure the user pool to allow unauthenticated users. Exchange user tokens for temporary credentials that allow authenticated users to assume a role.",
      "Create an Amazon Cognito identity pool. Configure the identity pool to allow unauthenticated users. Exchange unique identity for temporary credentials that allow all users to assume a role.",
      "Create an Amazon CloudFront distribution. Configure the distribution to allow unauthenticated users. Exchange user tokens for temporary credentials that allow all users to assume a role.",
      "Create a role for authenticated users that allows access to all content. Create a role for unauthenticated users that allows access to only the sample content.",
      "Allow all users to access the sample content by default. Create a role for authenticated users that allows access to the other content."
    ],
    "site_answers": [
      "Create an Amazon Cognito identity pool. Configure the identity pool to allow unauthenticated users. Exchange unique identity for temporary credentials that allow all users to assume a role.",
      "Create a role for authenticated users that allows access to all content. Create a role for unauthenticated users that allows access to only the sample content."
    ]
  },
  {
    "question_text": "A company is updating an application to move the backend of the application from Amazon EC2 instances to a serverless model. The application uses an Amazon RDS for MySQL DB instance and runs in a single VPC on AWS. The application and the DB instance are deployed in a private subnet in the VPC.\n\nThe company needs to connect AWS Lambda functions to the DB instance.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create Lambda functions inside the VPC with the AWSLambdaBasicExecutionRole policy attached to the Lambda execution role. Modify the RDS security group to allow inbound access from the Lambda security group.",
      "Create Lambda functions inside the VPC with the AWSLambdaVPCAccessExecutionRole policy attached to the Lambda execution role. Modify the RDS security group to allow inbound access from the Lambda security group.",
      "Create Lambda functions with the AWSLambdaBasicExecutionRole policy attached to the Lambda execution role. Create an interface VPC endpoint for the Lambda functions. Configure the interface endpoint policy to allow the lambda:InvokeFunclion action for each Lambda function's Amazon Resource Name (ARN).",
      "Create Lambda functions with the AWSLambdaVPCAccessExecutionRole policy attached to the Lambda execution role. Create an interface VPC endpoint for the Lambda functions. Configure the interface endpoint policy to allow the lambda:InvokeFunction action for each Lambda function's Amazon Resource Name (ARN)."
    ],
    "site_answers": [
      "Create Lambda functions inside the VPC with the AWSLambdaVPCAccessExecutionRole policy attached to the Lambda execution role. Modify the RDS security group to allow inbound access from the Lambda security group."
    ]
  },
  {
    "question_text": "A company has a web application that runs on Amazon EC2 instances with a custom Amazon Machine Image (AMI). The company uses AWS CloudFormation to provision the application. The application runs in the us-east-1 Region, and the company needs to deploy the application to the us-west-1 Region.\n\nAn attempt to create the AWS CloudFormation stack in us-west-1 fails. An error message states that the AMI ID does not exist. A developer must resolve this error with a solution that uses the least amount of operational overhead.\n\nWhich solution meets these requirements?",
    "question_type": "single",
    "choices": [
      "Change the AWS CloudFormation templates for us-east-1 and us-west-1 to use an AWS AMI. Relaunch the stack for both Regions.",
      "Copy the custom AMI from us-east-1 to us-west-1. Update the AWS CloudFormation template for us-west-1 to refer to AMI ID for the copied AMI. Relaunch the stack.",
      "Build the custom AMI in us-west-1. Create a new AWS CloudFormation template to launch the stack in us-west-1 with the new AMI ID.",
      "Manually deploy the application outside AWS CloudFormation in us-west-1."
    ],
    "site_answers": [
      "Copy the custom AMI from us-east-1 to us-west-1. Update the AWS CloudFormation template for us-west-1 to refer to AMI ID for the copied AMI. Relaunch the stack."
    ]
  },
  {
    "question_text": "A developer is updating several AWS Lambda functions and notices that all the Lambda functions share the same custom libraries. The developer wants to centralize all the libraries, update the libraries in a convenient way, and keep the libraries versioned.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Create an AWS CodeArtifact repository that contains all the custom libraries.",
      "Create a custom container image for the Lambda functions to save all the custom libraries.",
      "Create a Lambda layer that contains all the custom libraries.",
      "Create an Amazon Elastic File System (Amazon EFS) file system to store all the custom libraries."
    ],
    "site_answers": [
      "Create a Lambda layer that contains all the custom libraries."
    ]
  },
  {
    "question_text": "A developer wants to use AWS Elastic Beanstalk to test a new version of an application in a test environment.\n\nWhich deployment method offers the FASTEST deployment?",
    "question_type": "single",
    "choices": [
      "Immutable",
      "Rolling",
      "Rolling with additional batch",
      "All at once"
    ],
    "site_answers": [
      "All at once"
    ]
  },
  {
    "question_text": "A company is providing read access to objects in an Amazon S3 bucket for different customers. The company uses IAM permissions to restrict access to the S3 bucket. The customers can access only their own files.\n\nDue to a regulation requirement, the company needs to enforce encryption in transit for interactions with Amazon S3.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add a bucket policy to the S3 bucket to deny S3 actions when the aws:SecureTransport condition is equal to false.",
      "Add a bucket policy to the S3 bucket to deny S3 actions when the s3:x-amz-acl condition is equal to public-read.",
      "Add an IAM policy to the IAM users to enforce the usage of the AWS SDK.",
      "Add an IAM policy to the IAM users that allows S3 actions when the s3:x-amz-acl condition is equal to bucket-owner-read."
    ],
    "site_answers": [
      "Add a bucket policy to the S3 bucket to deny S3 actions when the aws:SecureTransport condition is equal to false."
    ]
  },
  {
    "question_text": "A company has an image storage web application that runs on AWS. The company hosts the application on Amazon EC2 instances in an Auto Scaling group. The Auto Scaling group acts as the target group for an Application Load Balancer (ALB) and uses an Amazon S3 bucket to store the images for sale.\n\nThe company wants to develop a feature to test system requests. The feature will direct requests to a separate target group that hosts a new beta version of the application.\n\nWhich solution will meet this requirement with the LEAST effort?",
    "question_type": "single",
    "choices": [
      "Create a new Auto Scaling group and target group for the beta version of the application. Update the ALB routing rule with a condition that looks for a cookie named version that has a value of beta. Update the test system code to use this cookie to test the beta version of the application.",
      "Create a new ALB, Auto Scaling group, and target group for the beta version of the application. Configure an alternate Amazon Route 53 record for the new ALB endpoint. Use the alternate Route 53 endpoint in the test system requests to test the beta version of the application.",
      "Create a new ALB, Auto Scaling group, and target group for the beta version of the application. Use Amazon CloudFront with Lambda@Edge to determine which specific request will go to the new ALB. Use the CloudFront endpoint to send the test system requests to test the beta version of the application.",
      "Create a new Auto Scaling group and target group for the beta version of the application. Update the ALB routing rule with a condition that looks for a cookie named version that has a value of beta. Use Amazon CloudFront with Lambda@Edge to update the test system requests to add the required cookie when the requests go to the ALB."
    ],
    "site_answers": [
      "Create a new Auto Scaling group and target group for the beta version of the application. Update the ALB routing rule with a condition that looks for a cookie named version that has a value of beta. Update the test system code to use this cookie to test the beta version of the application."
    ]
  },
  {
    "question_text": "A team is developing an application that is deployed on Amazon EC2 instances. During testing, the team receives an error. The EC2 instances are unable to access an Amazon S3 bucket.\n\nWhich steps should the team take to troubleshoot this issue? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Check whether the policy that is assigned to the IAM role that is attached to the EC2 instances grants access to Amazon S3.",
      "Check the S3 bucket policy to validate the access permissions for the S3 bucket.",
      "Check whether the policy that is assigned to the IAM user that is attached to the EC2 instances grants access to Amazon S3.",
      "Check the S3 Lifecycle policy to validate the permissions that are assigned to the S3 bucket.",
      "Check the security groups that are assigned to the EC2 instances. Make sure that a rule is not blocking the access to Amazon S3."
    ],
    "site_answers": [
      "Check whether the policy that is assigned to the IAM role that is attached to the EC2 instances grants access to Amazon S3.",
      "Check the S3 bucket policy to validate the access permissions for the S3 bucket."
    ]
  },
  {
    "question_text": "A developer is working on an ecommerce website. The developer wants to review server logs without logging in to each of the application servers individually. The website runs on multiple Amazon EC2 instances, is written in Python, and needs to be highly available.\n\nHow can the developer update the application to meet these requirements with MINIMUM changes?",
    "question_type": "single",
    "choices": [
      "Rewrite the application to be cloud native and to run on AWS Lambda, where the logs can be reviewed in Amazon CloudWatch.",
      "Set up centralized logging by using Amazon OpenSearch Service, Logstash, and OpenSearch Dashboards.",
      "Scale down the application to one larger EC2 instance where only one instance is recording logs.",
      "Install the unified Amazon CloudWatch agent on the EC2 instances. Configure the agent to push the application logs to CloudWatch."
    ],
    "site_answers": [
      "Install the unified Amazon CloudWatch agent on the EC2 instances. Configure the agent to push the application logs to CloudWatch."
    ]
  },
  {
    "question_text": "A company is creating an application that processes .csv files from Amazon S3. A developer has created an S3 bucket. The developer has also created an AWS Lambda function to process the .csv files from the S3 bucket.\n\nWhich combination of steps will invoke the Lambda function when a .csv file is uploaded to Amazon S3? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Create an Amazon EventBridge rule. Configure the rule with a pattern to match the S3 object created event.",
      "Schedule an Amazon EventBridge rule to run a new Lambda function to scan the S3 bucket.",
      "Add a trigger to the existing Lambda function. Set the trigger type to EventBridge. Select the Amazon EventBridge rule.",
      "Create a new Lambda function to scan the S3 bucket for recently added S3 objects.",
      "Add S3 Lifecycle rules to invoke the existing Lambda function."
    ],
    "site_answers": [
      "Create an Amazon EventBridge rule. Configure the rule with a pattern to match the S3 object created event.",
      "Add a trigger to the existing Lambda function. Set the trigger type to EventBridge. Select the Amazon EventBridge rule."
    ]
  },
  {
    "question_text": "A developer needs to build an AWS CloudFormation template that self-populates the AWS Region variable that deploys the CloudFormation template.\n\nWhat is the MOST operationally efficient way to determine the Region in which the template is being deployed?",
    "question_type": "single",
    "choices": [
      "Use the AWS::Region pseudo parameter.",
      "Require the Region as a CloudFormation parameter.",
      "Find the Region from the AWS::StackId pseudo parameter by using the Fn::Split intrinsic function.",
      "Dynamically import the Region by referencing the relevant parameter in AWS Systems Manager Parameter Store."
    ],
    "site_answers": [
      "Use the AWS::Region pseudo parameter."
    ]
  },
  {
    "question_text": "A company has hundreds of AWS Lambda functions that the company's QA team needs to test by using the Lambda function URLs. A developer needs to configure the authentication of the Lambda functions to allow access so that the QA IAM group can invoke the Lambda functions by using the public URLs.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a CLI script that loops on the Lambda functions to add a Lambda function URL with the AWS_IAM auth type. Run another script to create an IAM identity-based policy that allows the lambda:InvokeFunctionUrl action to all the Lambda function Amazon Resource Names (ARNs). Attach the policy to the QA IAM group.",
      "Create a CLI script that loops on the Lambda functions to add a Lambda function URL with the NONE auth type. Run another script to create an IAM resource-based policy that allows the lambda:InvokeFunctionUrl action to all the Lambda function Amazon Resource Names (ARNs). Attach the policy to the QA IAM group.",
      "Create a CLI script that loops on the Lambda functions to add a Lambda function URL with the AWS_IAM auth type. Run another script to loop on the Lambda functions to create an IAM identity-based policy that allows the lambda:InvokeFunctionUrl action from the QA IAM group's Amazon Resource Name (ARN).",
      "Create a CLI script that loops on the Lambda functions to add a Lambda function URL with the NONE auth type. Run another script to loop on the Lambda functions to create an IAM resource-based policy that allows the lambda:InvokeFunctionUrl action from the QA IAM group's Amazon Resource Name (ARN)."
    ],
    "site_answers": [
      "Create a CLI script that loops on the Lambda functions to add a Lambda function URL with the AWS_IAM auth type. Run another script to create an IAM identity-based policy that allows the lambda:InvokeFunctionUrl action to all the Lambda function Amazon Resource Names (ARNs). Attach the policy to the QA IAM group."
    ]
  },
  {
    "question_text": "A developer maintains a critical business application that uses Amazon DynamoDB as the primary data store. The DynamoDB table contains millions of documents and receives 30-60 requests each minute. The developer needs to perform processing in near-real time on the documents when they are added or updated in the DynamoDB table.\n\nHow can the developer implement this feature with the LEAST amount of change to the existing application code?",
    "question_type": "single",
    "choices": [
      "Set up a cron job on an Amazon EC2 instance. Run a script every hour to query the table for changes and process the documents.",
      "Enable a DynamoDB stream on the table. Invoke an AWS Lambda function to process the documents.",
      "Update the application to send a PutEvents request to Amazon EventBridge. Create an EventBridge rule to invoke an AWS Lambda function to process the documents.",
      "Update the application to synchronously process the documents directly after the DynamoDB write."
    ],
    "site_answers": [
      "Enable a DynamoDB stream on the table. Invoke an AWS Lambda function to process the documents."
    ]
  },
  {
    "question_text": "A developer is writing an application for a company. The application will be deployed on Amazon EC2 and will use an Amazon RDS for Microsoft SQL Server database. The company's security team requires that database credentials are rotated at least weekly.\n\nHow should the developer configure the database credentials for this application?",
    "question_type": "single",
    "choices": [
      "Create a database user. Store the user name and password in an AWS Systems Manager Parameter Store secure string parameter. Enable rotation of the AWS Key Management Service (AWS KMS) key that is used to encrypt the parameter.",
      "Enable IAM authentication for the database. Create a database user for use with IAM authentication. Enable password rotation.",
      "Create a database user. Store the user name and password in an AWS Secrets Manager secret that has daily rotation enabled.",
      "Use the EC2 user data to create a database user. Provide the user name and password in environment variables to the application."
    ],
    "site_answers": [
      "Create a database user. Store the user name and password in an AWS Secrets Manager secret that has daily rotation enabled."
    ]
  },
  {
    "question_text": "A real-time messaging application uses Amazon API Gateway WebSocket APIs with backend HTTP service. A developer needs to build a feature in the application to identify a client that keeps connecting to and disconnecting from the WebSocket connection. The developer also needs the ability to remove the client.\n\nWhich combination of changes should the developer make to the application to meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Switch to HTTP APIs in the backend service.",
      "Switch to REST APIs in the backend service.",
      "Use the callback URL to disconnect the client from the backend service.",
      "Add code to track the client status in Amazon ElastiCache in the backend service.",
      "Implement $connect and $disconnect routes in the backend service."
    ],
    "site_answers": [
      "Add code to track the client status in Amazon ElastiCache in the backend service.",
      "Implement $connect and $disconnect routes in the backend service."
    ]
  },
  {
    "question_text": "A developer has written code for an application and wants to share it with other developers on the team to receive feedback. The shared application code needs to be stored long-term with multiple versions and batch change tracking.\n\nWhich AWS service should the developer use?",
    "question_type": "single",
    "choices": [
      "AWS CodeBuild",
      "Amazon S3",
      "AWS CodeCommit",
      "AWS Cloud9"
    ],
    "site_answers": [
      "AWS CodeCommit"
    ]
  },
  {
    "question_text": "A company's developer is building a static website to be deployed in Amazon S3 for a production environment. The website integrates with an Amazon Aurora PostgreSQL database by using an AWS Lambda function. The website that is deployed to production will use a Lambda alias that points to a specific version of the Lambda function.\n\nThe company must rotate the database credentials every 2 weeks. Lambda functions that the company deployed previously must be able to use the most recent credentials.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Store the database credentials in AWS Secrets Manager. Turn on rotation. Write code in the Lambda function to retrieve the credentials from Secrets Manager.",
      "Include the database credentials as part of the Lambda function code. Update the credentials periodically and deploy the new Lambda function.",
      "Use Lambda environment variables. Update the environment variables when new credentials are available.",
      "Store the database credentials in AWS Systems Manager Parameter Store. Turn on rotation. Write code in the Lambda function to retrieve the credentials from Systems Manager Parameter Store."
    ],
    "site_answers": [
      "Store the database credentials in AWS Secrets Manager. Turn on rotation. Write code in the Lambda function to retrieve the credentials from Secrets Manager."
    ]
  },
  {
    "question_text": "A developer is developing an application that uses signed requests (Signature Version 4) to call other AWS services. The developer has created a canonical request, has created the string to sign, and has calculated signing information.\n\nWhich methods could the developer use to complete a signed request? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Add the signature to an HTTP header that is named Authorization.",
      "Add the signature to a session cookie.",
      "Add the signature to an HTTP header that is named Authentication.",
      "Add the signature to a query string parameter that is named X-Amz-Signature.",
      "Add the signature to an HTTP header that is named WWW-Authenticate."
    ],
    "site_answers": [
      "Add the signature to an HTTP header that is named Authorization.",
      "Add the signature to a query string parameter that is named X-Amz-Signature."
    ]
  },
  {
    "question_text": "A company must deploy all its Amazon RDS DB instances by using AWS CloudFormation templates as part of AWS CodePipeline continuous integration and continuous delivery (CI/CD) automation. The primary password for the DB instance must be automatically generated as part of the deployment process.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Create an AWS Lambda-backed CloudFormation custom resource. Write Lambda code that generates a secure string. Return the value of the secure string as a data field of the custom resource response object. Use the CloudFormation Fn::GetAtt intrinsic function to get the value of the secure string. Use the value to create the DB instance.",
      "Use the AWS CodeBuild action of CodePipeline to generate a secure string by using the following AWS CLI command: aws secretsmanager get-random-password. Pass the generated secure string as a CloudFormation parameter with the NoEcho attribute set to true. Use the parameter reference to create the DB instance.",
      "Create an AWS Lambda-backed CloudFormation custom resource. Write Lambda code that generates a secure string. Return the value of the secure string as a data field of the custom resource response object. Use the CloudFormation Fn::GetAtt intrinsic function to get a value of the secure string. Create secrets in AWS Secrets Manager. Use the secretsmanager dynamic reference to use the value stored in the secret to create the DB instance.",
      "Use the AWS::SecretsManager::Secret resource to generate a secure string. Store the secure string as a secret in AWS Secrets Manager. Use the secretsmanager dynamic reference to use the value stored in the secret to create the DB instance."
    ],
    "site_answers": [
      "Use the AWS::SecretsManager::Secret resource to generate a secure string. Store the secure string as a secret in AWS Secrets Manager. Use the secretsmanager dynamic reference to use the value stored in the secret to create the DB instance."
    ]
  },
  {
    "question_text": "An organization is storing large files in Amazon S3, and is writing a web application to display meta-data about the files to end-users. Based on the metadata a user selects an object to download. The organization needs a mechanism to index the files and provide single-digit millisecond latency retrieval for the metadata.\n\nWhat AWS service should be used to accomplish this?",
    "question_type": "single",
    "choices": [
      "Amazon DynamoDB",
      "Amazon EC2",
      "AWS Lambda",
      "Amazon RDS"
    ],
    "site_answers": [
      "Amazon DynamoDB"
    ]
  },
  {
    "question_text": "A developer is creating an AWS Serverless Application Model (AWS SAM) template. The AWS SAM template contains the definition of multiple AWS Lambda functions, an Amazon S3 bucket, and an Amazon CloudFront distribution. One of the Lambda functions runs on Lambda@Edge in the CloudFront distribution. The S3 bucket is configured as an origin for the CloudFront distribution.\n\nWhen the developer deploys the AWS SAM template in the eu-west-1 Region, the creation of the stack fails.\n\nWhich of the following could be the reason for this issue?",
    "question_type": "single",
    "choices": [
      "CloudFront distributions can be created only in the us-east-1 Region.",
      "Lambda@Edge functions can be created only in the us-east-1 Region.",
      "A single AWS SAM template cannot contain multiple Lambda functions.",
      "The CloudFront distribution and the S3 bucket cannot be created in the same Region."
    ],
    "site_answers": [
      "Lambda@Edge functions can be created only in the us-east-1 Region."
    ]
  },
  {
    "question_text": "A developer is integrating Amazon ElastiCache in an application. The cache will store data from a database. The cached data must populate real-time dashboards.\n\nWhich caching strategy will meet these requirements?",
    "question_type": "single",
    "choices": [
      "A read-through cache",
      "A write-behind cache",
      "A lazy-loading cache",
      "A write-through cache"
    ],
    "site_answers": [
      "A write-through cache"
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function. The Lambda function needs an external library to connect to a third-party solution. The external library is a collection of files with a total size of 100 MB. The developer needs to make the external library available to the Lambda execution environment and reduce the Lambda package space.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Create a Lambda layer to store the external library. Configure the Lambda function to use the layer.",
      "Create an Amazon S3 bucket. Upload the external library into the S3 bucket. Mount the S3 bucket folder in the Lambda function. Import the library by using the proper folder in the mount point.",
      "Load the external library to the Lambda function's /tmp directory during deployment of the Lambda package. Import the library from the /tmp directory.",
      "Create an Amazon Elastic File System (Amazon EFS) volume. Upload the external library to the EFS volume. Mount the EFS volume in the Lambda function. Import the library by using the proper folder in the mount point."
    ],
    "site_answers": [
      "Create a Lambda layer to store the external library. Configure the Lambda function to use the layer."
    ]
  },
  {
    "question_text": "A company has a front-end application that runs on four Amazon EC2 instances behind an Elastic Load Balancer (ELB) in a production environment that is provisioned by AWS Elastic Beanstalk. A developer needs to deploy and test new application code while updating the Elastic Beanstalk platform from the current version to a newer version of Node.js. The solution must result in zero downtime for the application.\n\nWhich solution meets these requirements?",
    "question_type": "single",
    "choices": [
      "Clone the production environment to a different platform version. Deploy the new application code, and test it. Swap the environment URLs upon verification.",
      "Deploy the new application code in an all-at-once deployment to the existing EC2 instances. Test the code. Redeploy the previous code if verification fails.",
      "Perform an immutable update to deploy the new application code to new EC2 instances. Serve traffic to the new instances after they pass health checks.",
      "Use a rolling deployment for the new application code. Apply the code to a subset of EC2 instances until the tests pass. Redeploy the previous code if the tests fail."
    ],
    "site_answers": [
      "Perform an immutable update to deploy the new application code to new EC2 instances. Serve traffic to the new instances after they pass health checks."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function. The Lambda function will consume messages from an Amazon Simple Queue Service (Amazon SQS) queue. The developer wants to integrate unit testing as part of the function's continuous integration and continuous delivery (CI/CD) process.\n\nHow can the developer unit test the function?",
    "question_type": "single",
    "choices": [
      "Create an AWS CloudFormation template that creates an SQS queue and deploys the Lambda function. Create a stack from the template during the CI/CD process. Invoke the deployed function. Verify the output.",
      "Create an SQS event for tests. Use a test that consumes messages from the SQS queue during the function's Cl/CD process.",
      "Create an SQS queue for tests. Use this SQS queue in the application's unit test. Run the unit tests during the CI/CD process.",
      "Use the aws lambda invoke command with a test event during the CIICD process."
    ],
    "site_answers": [
      "Use the aws lambda invoke command with a test event during the CIICD process."
    ]
  },
  {
    "question_text": "A developer is working on a web application that uses Amazon DynamoDB as its data store. The application has two DynamoDB tables: one table that is named artists and one table that is named songs. The artists table has artistName as the partition key. The songs table has songName as the partition key and artistName as the sort key.\n\nThe table usage patterns include the retrieval of multiple songs and artists in a single database operation from the webpage. The developer needs a way to retrieve this information with minimal network traffic and optimal application performance.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Perform a BatchGetltem operation that returns items from the two tables. Use the list of songName/artistName keys for the songs table and the list of artistName key for the artists table.",
      "Create a local secondary index (LSI) on the songs table that uses artistName as the partition key. Perform a query operation for each artistName on the songs table that filters by the list of songName. Perform a query operation for each artistName on the artists table.",
      "Perform a BatchGetitem operation on the songs table that uses the songName/artistName keys. Perform a BatchGetltem operation on the artists table that uses artistName as the key.",
      "Perform a Scan operation on each table that filters by the list of songName/artistName for the songs table and the list of artistName in the artists table."
    ],
    "site_answers": [
      "Perform a BatchGetltem operation that returns items from the two tables. Use the list of songName/artistName keys for the songs table and the list of artistName key for the artists table."
    ]
  },
  {
    "question_text": "A company is developing an ecommerce application that uses Amazon API Gateway APIs. The application uses AWS Lambda as a backend. The company needs to test the code in a dedicated, monitored test environment before the company releases the code to the production environment.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use a single stage in API Gateway. Create a Lambda function for each environment. Configure API clients to send a query parameter that indicates the environment and the specific Lambda function.",
      "Use multiple stages in API Gateway. Create a single Lambda function for all environments. Add different code blocks for different environments in the Lambda function based on Lambda environment variables.",
      "Use multiple stages in API Gateway. Create a Lambda function for each environment. Configure API Gateway stage variables to route traffic to the Lambda function in different environments.",
      "Use a single stage in API Gateway. Configure API clients to send a query parameter that indicates the environment. Add different code blocks for different environments in the Lambda function to match the value of the query parameter."
    ],
    "site_answers": [
      "Use multiple stages in API Gateway. Create a Lambda function for each environment. Configure API Gateway stage variables to route traffic to the Lambda function in different environments."
    ]
  },
  {
    "question_text": "A developer creates an AWS Lambda function that retrieves and groups data from several public API endpoints. The Lambda function has been updated and configured to connect to the private subnet of a VPC. An internet gateway is attached to the VPC. The VPC uses the default network ACL and security group configurations.\n\nThe developer finds that the Lambda function can no longer access the public API. The developer has ensured that the public API is accessible, but the Lambda function cannot connect to the APIHow should the developer fix the connection issue?",
    "question_type": "single",
    "choices": [
      "Ensure that the network ACL allows outbound traffic to the public internet.",
      "Ensure that the security group allows outbound traffic to the public internet.",
      "Ensure that outbound traffic from the private subnet is routed to a public NAT gateway.",
      "Ensure that outbound traffic from the private subnet is routed to a new internet gateway."
    ],
    "site_answers": [
      "Ensure that outbound traffic from the private subnet is routed to a public NAT gateway."
    ]
  },
  {
    "question_text": "A developer needs to store configuration variables for an application. The developer needs to set an expiration date and time for the configuration. The developer wants to receive notifications before the configuration expires.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Create a standard parameter in AWS Systems Manager Parameter Store. Set Expiration and ExpirationNotification policy types.",
      "Create a standard parameter in AWS Systems Manager Parameter Store. Create an AWS Lambda function to expire the configuration and to send Amazon Simple Notification Service (Amazon SNS) notifications.",
      "Create an advanced parameter in AWS Systems Manager Parameter Store. Set Expiration and ExpirationNotification policy types.",
      "Create an advanced parameter in AWS Systems Manager Parameter Store. Create an Amazon EC2 instance with a cron job to expire the configuration and to send notifications."
    ],
    "site_answers": [
      "Create an advanced parameter in AWS Systems Manager Parameter Store. Set Expiration and ExpirationNotification policy types."
    ]
  },
  {
    "question_text": "A company is developing a serverless application that consists of various AWS Lambda functions behind Amazon API Gateway APIs. A developer needs to automate the deployment of Lambda function code. The developer will deploy updated Lambda functions with AWS CodeDeploy. The deployment must minimize the exposure of potential errors to end users. When the application is in production, the application cannot experience downtime outside the specified maintenance window.\n\nWhich deployment configuration will meet these requirements with the LEAST deployment time?",
    "question_type": "single",
    "choices": [
      "Use the AWS CodeDeploy in-place deployment configuration for the Lambda functions. Shift all traffic immediately after deployment.",
      "Use the AWS CodeDeploy linear deployment configuration to shift 10% of the traffic every minute.",
      "Use the AWS CodeDeploy all-at-once deployment configuration to shift all traffic to the updated versions immediately.",
      "Use the AWS CodeDeploy predefined canary deployment configuration to shift 10% of the traffic immediately and shift the remaining traffic after 5 minutes."
    ],
    "site_answers": [
      "Use the AWS CodeDeploy predefined canary deployment configuration to shift 10% of the traffic immediately and shift the remaining traffic after 5 minutes."
    ]
  },
  {
    "question_text": "A company created four AWS Lambda functions that connect to a relational database server that runs on an Amazon RDS instance. A security team requires the company to automatically change the database password every 30 days.\n\nWhich solution will meet these requirements MOST securely?",
    "question_type": "single",
    "choices": [
      "Store the database credentials in the environment variables of the Lambda function. Deploy the Lambda function with the new credentials every 30 days.",
      "Store the database credentials in AWS Secrets Manager. Configure a 30-day rotation schedule for the credentials.",
      "Store the database credentials in AWS Systems Manager Parameter Store secure strings. Configure a 30-day schedule for the secure strings.",
      "Store the database credentials in an Amazon S3 bucket that uses server-side encryption with customer-provided encryption keys (SSE-C). Configure a 30-day key rotation schedule for the customer key."
    ],
    "site_answers": [
      "Store the database credentials in AWS Secrets Manager. Configure a 30-day rotation schedule for the credentials."
    ]
  },
  {
    "question_text": "A developer is setting up a deployment pipeline. The pipeline includes an AWS CodeBuild build stage that requires access to a database to run integration tests. The developer is using a buildspec.yml file to configure the database connection. Company policy requires automatic rotation of all database credentials.\n\nWhich solution will handle the database credentials MOST securely?",
    "question_type": "single",
    "choices": [
      "Retrieve the credentials from variables that are hardcoded in the buildspec.yml file. Configure an AWS Lambda function to rotate the credentials.",
      "Retrieve the credentials from an environment variable that is linked to a SecureString parameter in AWS Systems Manager Parameter Store. Configure Parameter Store for automatic rotation.",
      "Retrieve the credentials from an environment variable that is linked to an AWS Secrets Manager secret. Configure Secrets Manager for automatic rotation.",
      "Retrieve the credentials from an environment variable that contains the connection string in plaintext. Configure an Amazon EventBridge event to rotate the credentials."
    ],
    "site_answers": [
      "Retrieve the credentials from an environment variable that is linked to an AWS Secrets Manager secret. Configure Secrets Manager for automatic rotation."
    ]
  },
  {
    "question_text": "A company is developing a serverless multi-tier application on AWS. The company will build the serverless logic tier by using Amazon API Gateway and AWS Lambda.\n\nWhile the company builds the logic tier, a developer who works on the frontend of the application must develop integration tests. The tests must cover both positive and negative scenarios, depending on success and error HTTP status codes.\n\nWhich solution will meet these requirements with the LEAST effort?",
    "question_type": "single",
    "choices": [
      "Set up a mock integration for API methods in API Gateway. In the integration request from Method Execution, add simple logic to return either a success or error based on HTTP status code. In the integration response, add messages that correspond to the HTTP status codes.",
      "Create two mock integration resources for API methods in API Gateway. In the integration request, return a success HTTP status code for one resource and an error HTTP status code for the other resource. In the integration response, add messages that correspond to the HTTP status codes.",
      "Create Lambda functions to perform tests. Add simple logic to return either success or error, based on the HTTP status codes. Build an API Gateway Lambda integration. Select appropriate Lambda functions that correspond to the HTTP status codes.",
      "Create a Lambda function to perform tests. Add simple logic to return either success or error-based HTTP status codes. Create a mock integration in API Gateway. Select the Lambda function that corresponds to the HTTP status codes."
    ],
    "site_answers": [
      "Set up a mock integration for API methods in API Gateway. In the integration request from Method Execution, add simple logic to return either a success or error based on HTTP status code. In the integration response, add messages that correspond to the HTTP status codes."
    ]
  },
  {
    "question_text": "Users are reporting errors in an application. The application consists of several microservices that are deployed on Amazon Elastic Container Service (Amazon ECS) with AWS Fargate.\n\nWhich combination of steps should a developer take to fix the errors? (Choose two.)",
    "question_type": "single",
    "choices": [
      "Deploy AWS X-Ray as a sidecar container to the microservices. Update the task role policy to allow access to the X-Ray API.",
      "Deploy AWS X-Ray as a daemonset to the Fargate cluster. Update the service role policy to allow access to the X-Ray API.",
      "Instrument the application by using the AWS X-Ray SDK. Update the application to use the PutXrayTrace API call to communicate with the X-Ray API.",
      "Instrument the application by using the AWS X-Ray SDK. Update the application to communicate with the X-Ray daemon.",
      "Instrument the ECS task to send the stdout and stderr output to Amazon CloudWatch Logs. Update the task role policy to allow the cloudwatch:PullLogs action."
    ],
    "site_answers": [
      "Deploy AWS X-Ray as a sidecar container to the microservices. Update the task role policy to allow access to the X-Ray API."
    ]
  },
  {
    "question_text": "A developer is creating an application for a company. The application needs to read the file doc.txt that is placed in the root folder of an Amazon S3 bucket that is named DOC-EXAMPLE-BUCKET. The company's security team requires the principle of least privilege to be applied to the application's IAM policy.\n\nWhich IAM policy statement will meet these security requirements?",
    "question_type": "single",
    "choices": [
      "s3:GetObject & Allow & DOC-EXAMPLE-BUCKET/doc.txt",
      "s3:* & Allow & *",
      "s3:GetObject & Allow & DOC-EXAMPLE-BUCKET/*",
      "s3:* & Allow & DOC-EXAMPLE-BUCKET/doc.txt"
    ],
    "site_answers": [
      "s3:GetObject & Allow & DOC-EXAMPLE-BUCKET/doc.txt"
    ]
  },
  {
    "question_text": "A company has an application that uses AWS CodePipeline to automate its continuous integration and continuous delivery (CI/CD) workflow. The application uses AWS CodeCommit for version control. A developer who was working on one of the tasks did not pull the most recent changes from the main branch. A week later, the developer noticed merge conflicts.\n\nHow can the developer resolve the merge conflicts in the developer's branch with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Clone the repository. Create a new branch. Update the branch with the changes.",
      "Create a new branch. Apply the changes from the previous branch.",
      "Use the Commit Visualizer view to compare the commits when a feature was added. Fix the merge conflicts.",
      "Stop the pull from the main branch to the feature branch. Rebase the feature branch from the main branch."
    ],
    "site_answers": [
      "Stop the pull from the main branch to the feature branch. Rebase the feature branch from the main branch."
    ]
  },
  {
    "question_text": "A developer wants to add request validation to a production environment Amazon API Gateway API. The developer needs to test the changes before the API is deployed to the production environment. For the test, the developer will send test requests to the API through a testing tool.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Export the existing API to an OpenAPI file. Create a new API. Import the OpenAPI file. Modify the new API to add request validation. Perform the tests. Modify the existing API to add request validation. Deploy the existing API to production.",
      "Modify the existing API to add request validation. Deploy the updated API to a new API Gateway stage. Perform the tests. Deploy the updated API to the API Gateway production stage.",
      "Create a new API. Add the necessary resources and methods, including new request validation. Perform the tests. Modify the existing API to add request validation. Deploy the existing API to production",
      "Clone the existing API. Modify the new API to add request validation. Perform the tests. Modify the existing API to add request validation. Deploy the existing API to production."
    ],
    "site_answers": [
      "Modify the existing API to add request validation. Deploy the updated API to a new API Gateway stage. Perform the tests. Deploy the updated API to the API Gateway production stage."
    ]
  },
  {
    "question_text": "An online food company provides an Amazon API Gateway HTTP API to receive orders for partners. The API is integrated with an AWS Lambda function. The Lambda function stores the orders in an Amazon DynamoDB table.\n\nThe company expects to onboard additional partners. Some of the partners require additional Lambda functions to receive orders. The company has created an Amazon S3 bucket. The company needs to store all orders and updates in the S3 bucket for future analysis.\n\nHow can the developer ensure that all orders and updates are stored to Amazon S3 with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Create a new Lambda function and a new API Gateway API endpoint. Configure the new Lambda function to write to the S3 bucket. Modify the original Lambda function to post updates to the new API endpoint.",
      "Use Amazon Kinesis Data Streams to create a new data stream. Modify the Lambda function to publish orders to the data stream. Configure the data stream to write to the S3 bucket.",
      "Enable DynamoDB Streams on the DynamoDB table. Create a new Lambda function. Associate the stream's Amazon Resource Name (ARN) with the Lambda function. Configure the Lambda function to write to the S3 bucket as records appear in the table's stream.",
      "Modify the Lambda function to publish to a new Amazon Simple Notification Service (Amazon SNS) topic as the Lambda function receives orders. Subscribe a new Lambda function to the topic. Configure the new Lambda function to write to the S3 bucket as updates come through the topic."
    ],
    "site_answers": [
      "Enable DynamoDB Streams on the DynamoDB table. Create a new Lambda function. Associate the stream's Amazon Resource Name (ARN) with the Lambda function. Configure the Lambda function to write to the S3 bucket as records appear in the table's stream."
    ]
  },
  {
    "question_text": "A company's website runs on an Amazon EC2 instance and uses Auto Scaling to scale the environment during peak times. Website users across the world are experiencing high latency due to static content on the EC2 instance, even during non-peak hours.\n\nWhich combination of steps will resolve the latency issue? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Double the Auto Scaling group's maximum number of servers.",
      "Host the application code on AWS Lambda.",
      "Scale vertically by resizing the EC2 instances.",
      "Create an Amazon CloudFront distribution to cache the static content.",
      "Store the application's static content in Amazon S3."
    ],
    "site_answers": [
      "Create an Amazon CloudFront distribution to cache the static content.",
      "Store the application's static content in Amazon S3."
    ]
  },
  {
    "question_text": "A company has an Amazon S3 bucket containing premier content that it intends to make available to only paid subscribers of its website. The S3 bucket currently has default permissions of all objects being private to prevent inadvertent exposure of the premier content to non-paying website visitors.\n\nHow can the company limit the ability to download a premier content file in the S3 bucket to paid subscribers only?",
    "question_type": "single",
    "choices": [
      "Apply a bucket policy that allows anonymous users to download the content from the S3 bucket.",
      "Generate a pre-signed object URL for the premier content file when a paid subscriber requests a download.",
      "Add a bucket policy that requires multi-factor authentication for requests to access the S3 bucket objects.",
      "Enable server-side encryption on the S3 bucket for data protection against the non-paying website visitors."
    ],
    "site_answers": [
      "Generate a pre-signed object URL for the premier content file when a paid subscriber requests a download."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function that searches for items from an Amazon DynamoDB table that contains customer contact information. The DynamoDB table items have the customer's email_address as the partition key and additional properties such as customer_type, name and job_title.\n\nThe Lambda function runs whenever a user types a new character into the customer_type text input. The developer wants the search to return partial matches of all the email_address property of a particular customer_type. The developer does not want to recreate the DynamoDB table.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add a global secondary index (GSI) to the DynamoDB table with customer_type as the partition key and email_address as the sort key. Perform a query operation on the GSI by using the begins_with key condition expression with the email_address property.",
      "Add a global secondary index (GSI) to the DynamoDB table with email_address as the partition key and customer_type as the sort key. Perform a query operation on the GSI by using the begins_with key condition expression with the email_address property.",
      "Add a local secondary index (LSI) to the DynamoDB table with customer_type as the partition key and email_address as the sort key. Perform a query operation on the LSI by using the begins_with key condition expression with the email_address property.",
      "Add a local secondary index (LSI) to the DynamoDB table with job_title as the partition key and email_address as the sort key. Perform a query operation on the LSI by using the begins_with key condition expression with the email_address property."
    ],
    "site_answers": [
      "Add a global secondary index (GSI) to the DynamoDB table with customer_type as the partition key and email_address as the sort key. Perform a query operation on the GSI by using the begins_with key condition expression with the email_address property."
    ]
  },
  {
    "question_text": "A developer is building an application that uses AWS API Gateway APIs, AWS Lambda functions, and AWS DynamoDB tables. The developer uses the AWS Serverless Application Model (AWS SAM) to build and run serverless applications on AWS. Each time the developer pushes changes for only to the Lambda functions, all the artifacts in the application are rebuilt.\n\nThe developer wants to implement AWS SAM Accelerate by running a command to only redeploy the Lambda functions that have changed.\n\nWhich command will meet these requirements?",
    "question_type": "single",
    "choices": [
      "sam deploy --force-upload",
      "sam deploy --no-execute-changeset",
      "sam package",
      "sam sync --watch"
    ],
    "site_answers": [
      "sam sync --watch"
    ]
  },
  {
    "question_text": "A developer is building an application that gives users the ability to view bank accounts from multiple sources in a single dashboard. The developer has automated the process to retrieve API credentials for these sources. The process invokes an AWS Lambda function that is associated with an AWS CloudFormation custom resource.\n\nThe developer wants a solution that will store the API credentials with minimal operational overhead.\n\nWhich solution will meet these requirements in the MOST secure way?",
    "question_type": "single",
    "choices": [
      "Add an AWS Secrets Manager GenerateSecretString resource to the CloudFormation template. Set the value to reference new credentials for the CloudFormation resource.",
      "Use the AWS SDK ssm:PutParameter operation in the Lambda function from the existing custom resource to store the credentials as a parameter. Set the parameter value to reference the new credentials. Set the parameter type to SecureString.",
      "Add an AWS Systems Manager Parameter Store resource to the CloudFormation template. Set the CloudFormation resource value to reference the new credentials. Set the resource NoEcho attribute to true.",
      "Use the AWS SDK ssm:PutParameter operation in the Lambda function from the existing custom resource to store the credentials as a parameter. Set the parameter value to reference the new credentials. Set the parameter NoEcho attribute to true."
    ],
    "site_answers": [
      "Use the AWS SDK ssm:PutParameter operation in the Lambda function from the existing custom resource to store the credentials as a parameter. Set the parameter value to reference the new credentials. Set the parameter type to SecureString."
    ]
  },
  {
    "question_text": "A developer is trying to get data from an Amazon DynamoDB table called demoman-table. The developer configured the AWS CLI to use a specific IAM user's credentials and ran the following command:aws dynamodb get-item --table-name demoman-table --key '{\"id\": {\"N\":\"1993\"}}'The command returned errors and no rows were returned.\n\nWhat is the MOST likely cause of these issues?",
    "question_type": "single",
    "choices": [
      "The command is incorrect; it should be rewritten to use put-item with a string argument.",
      "The developer needs to log a ticket with AWS Support to enable access to the demoman-table.",
      "Amazon DynamoDB cannot be accessed from the AWS CLI and needs to be called via the REST API.",
      "The IAM user needs an associated policy with read access to demoman-table."
    ],
    "site_answers": [
      "The IAM user needs an associated policy with read access to demoman-table."
    ]
  },
  {
    "question_text": "An organization is using Amazon CloudFront to ensure that its users experience low-latency access to its web application. The organization has identified a need to encrypt all traffic between users and CloudFront, and all traffic between CloudFront and the web application.\n\nHow can these requirements be met? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Use AWS KMS to encrypt traffic between CloudFront and the web application.",
      "Set the Origin Protocol Policy to \"HTTPS Only\".",
      "Set the Origin's HTTP Port to 443.",
      "Set the Viewer Protocol Policy to \"HTTPS Only\" or \"Redirect HTTP to HTTPS\".",
      "Enable the CloudFront option Restrict Viewer Access."
    ],
    "site_answers": [
      "Set the Origin Protocol Policy to \"HTTPS Only\".",
      "Set the Viewer Protocol Policy to \"HTTPS Only\" or \"Redirect HTTP to HTTPS\"."
    ]
  },
  {
    "question_text": "A developer is planning to migrate on-premises company data to Amazon S3. The data must be encrypted, and the encryption keys must support automatic annual rotation. The company must use AWS Key Management Service (AWS KMS) to encrypt the data.\n\nWhich type of keys should the developer use to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Amazon S3 managed keys",
      "Symmetric customer managed keys with key material that is generated by AWS",
      "Asymmetric customer managed keys with key material that is generated by AWS",
      "Symmetric customer managed keys with imported key material"
    ],
    "site_answers": [
      "Symmetric customer managed keys with key material that is generated by AWS"
    ]
  },
  {
    "question_text": "A team of developers is using an AWS CodePipeline pipeline as a continuous integration and continuous delivery (CI/CD) mechanism for a web application. A developer has written unit tests to programmatically test the functionality of the application code. The unit tests produce a test report that shows the results of each individual check. The developer now wants to run these tests automatically during the CI/CD process.\n\nWhich solution will meet this requirement with the LEAST operational effort?",
    "question_type": "single",
    "choices": [
      "Write a Git pre-commit hook that runs the tests before every commit. Ensure that each developer who is working on the project has the pre-commit hook installed locally. Review the test report and resolve any issues before pushing changes to AWS CodeCommit.",
      "Add a new stage to the pipeline. Use AWS CodeBuild as the provider. Add the new stage after the stage that deploys code revisions to the test environment. Write a buildspec that fails the CodeBuild stage if any test does not pass. Use the test reports feature of CodeBuild to integrate the report with the CodeBuild console. View the test results in CodeBuild. Resolve any issues.",
      "Add a new stage to the pipeline. Use AWS CodeBuild as the provider. Add the new stage before the stage that deploys code revisions to the test environment. Write a buildspec that fails the CodeBuild stage if any test does not pass. Use the test reports feature of CodeBuild to integrate the report with the CodeBuild console. View the test results in CodeBuild. Resolve any issues.",
      "Add a new stage to the pipeline. Use Jenkins as the provider. Configure CodePipeline to use Jenkins to run the unit tests. Write a Jenkinsfile that fails the stage if any test does not pass. Use the test report plugin for Jenkins to integrate the report with the Jenkins dashboard. View the test results in Jenkins. Resolve any issues."
    ],
    "site_answers": [
      "Add a new stage to the pipeline. Use AWS CodeBuild as the provider. Add the new stage before the stage that deploys code revisions to the test environment. Write a buildspec that fails the CodeBuild stage if any test does not pass. Use the test reports feature of CodeBuild to integrate the report with the CodeBuild console. View the test results in CodeBuild. Resolve any issues."
    ]
  },
  {
    "question_text": "A company has multiple Amazon VPC endpoints in the same VPC. A developer needs to configure an Amazon S3 bucket policy so users can access an S3 bucket only by using these VPC endpoints.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create multiple S3 bucket polices by using each VPC endpoint ID that have the aws:SourceVpce value in the StringNotEquals condition.",
      "Create a single S3 bucket policy that has the aws:SourceVpc value and in the StringNotEquals condition to use VPC ID.",
      "Create a single S3 bucket policy that has the aws:SourceVpce value and in the StringNotEquals condition to use vpce*.",
      "Create a single S3 bucket policy that has multiple aws:sourceVpce value in the StringNotEquals condition. Repeat for all the VPC endpoint IDs."
    ],
    "site_answers": [
      "Create a single S3 bucket policy that has multiple aws:sourceVpce value in the StringNotEquals condition. Repeat for all the VPC endpoint IDs."
    ]
  },
  {
    "question_text": "A company uses a custom root certificate authority certificate chain (Root CA Cert) that is 10 KB in size to generate SSL certificates for its on-premises HTTPS endpoints. One of the company's cloud-based applications has hundreds of AWS Lambda functions that pull data from these endpoints. A developer updated the trust store of the Lambda execution environment to use the Root CA Cert when the Lambda execution environment is initialized. The developer bundled the Root CA Cert as a text file in the Lambda deployment bundle.\n\nAfter 3 months of development, the Root CA Cert is no longer valid and must be updated. The developer needs a more efficient solution to update the Root CA Cert for all deployed Lambda functions. The solution must not include rebuilding or updating all Lambda functions that use the Root CA Cert. The solution must also work for all development, testing, and production environments. Each environment is managed in a separate AWS account.\n\nWhich combination of steps should the developer take to meet these requirements MOST cost-effectively? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Store the Root CA Cert as a secret in AWS Secrets Manager. Create a resource-based policy. Add IAM users to allow access to the secret.",
      "Store the Root CA Cert as a SecureString parameter in AWS Systems Manager Parameter Store. Create a resource-based policy. Add IAM users to allow access to the policy.",
      "Store the Root CA Cert in an Amazon S3 bucket. Create a resource-based policy to allow access to the bucket.",
      "Refactor the Lambda code to load the Root CA Cert from the Root CA Cert's location. Modify the runtime trust store inside the Lambda function handler.",
      "Refactor the Lambda code to load the Root CA Cert from the Root CA Cert's location. Modify the runtime trust store outside the Lambda function handler."
    ],
    "site_answers": [
      "Store the Root CA Cert as a secret in AWS Secrets Manager. Create a resource-based policy. Add IAM users to allow access to the secret.",
      "Refactor the Lambda code to load the Root CA Cert from the Root CA Cert's location. Modify the runtime trust store outside the Lambda function handler."
    ]
  },
  {
    "question_text": "A developer maintains applications that store several secrets in AWS Secrets Manager. The applications use secrets that have changed over time. The developer needs to identify required secrets that are still in use. The developer does not want to cause any application downtime.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure an AWS CloudTrail log file delivery to an Amazon S3 bucket. Create an Amazon CloudWatch alarm for the GetSecretValue Secrets Manager API operation requests.",
      "Create a secretsmanager-secret-unused AWS Config managed rule. Create an Amazon EventBridge rule to initiate notifications when the AWS Config managed rule is met.",
      "Deactivate the applications secrets and monitor the applications error logs temporarily.",
      "Configure AWS X-Ray for the applications. Create a sampling rule to match the GetSecretValue Secrets Manager API operation requests."
    ],
    "site_answers": [
      "Create a secretsmanager-secret-unused AWS Config managed rule. Create an Amazon EventBridge rule to initiate notifications when the AWS Config managed rule is met."
    ]
  },
  {
    "question_text": "A developer is writing a serverless application that requires an AWS Lambda function to be invoked every 10 minutes.\n\nWhat is an automated and serverless way to invoke the function?",
    "question_type": "single",
    "choices": [
      "Deploy an Amazon EC2 instance based on Linux, and edit its /etc/crontab file by adding a command to periodically invoke the Lambda function.",
      "Configure an environment variable named PERIOD for the Lambda function. Set the value to 600.",
      "Create an Amazon EventBridge rule that runs on a regular schedule to invoke the Lambda function.",
      "Create an Amazon Simple Notification Service (Amazon SNS) topic that has a subscription to the Lambda function with a 600-second timer."
    ],
    "site_answers": [
      "Create an Amazon EventBridge rule that runs on a regular schedule to invoke the Lambda function."
    ]
  },
  {
    "question_text": "A company is using Amazon OpenSearch Service to implement an audit monitoring system. A developer needs to create an AWS CloudFormation custom resource that is associated with an AWS Lambda function to configure the OpenSearch Service domain. The Lambda function must access the OpenSearch Service domain by using OpenSearch Service internal master user credentials.\n\nWhat is the MOST secure way to pass these credentials to the Lambda function?",
    "question_type": "single",
    "choices": [
      "Use a CloudFormation parameter to pass the master user credentials at deployment to the OpenSearch Service domain's MasterUserOptions and the Lambda function's environment variable. Set the NoEcho attribute to true.",
      "Use a CloudFormation parameter to pass the master user credentials at deployment to the OpenSearch Service domain's MasterUserOptions and to create a parameter in AWS Systems Manager Parameter Store. Set the NoEcho attribute to true. Create an IAM role that has the ssm:GetParameter permission. Assign the role to the Lambda function. Store the parameter name as the Lambda function's environment variable. Resolve the parameter's value at runtime.",
      "Use a CloudFormation parameter to pass the master user credentials at deployment to the OpenSearch Service domain's MasterUserOptions and the Lambda function's environment variable. Encrypt the parameter's value by using the AWS Key Management Service (AWS KMS) encrypt command.",
      "Use CloudFormation to create an AWS Secrets Manager secret. Use a CloudFormation dynamic reference to retrieve the secret's value for the OpenSearch Service domain's MasterUserOptions. Create an IAM role that has the secretsmanager:GetSecretValue permission. Assign the role to the Lambda function. Store the secret's name as the Lambda function's environment variable. Resolve the secret's value at runtime."
    ],
    "site_answers": [
      "Use CloudFormation to create an AWS Secrets Manager secret. Use a CloudFormation dynamic reference to retrieve the secret's value for the OpenSearch Service domain's MasterUserOptions. Create an IAM role that has the secretsmanager:GetSecretValue permission. Assign the role to the Lambda function. Store the secret's name as the Lambda function's environment variable. Resolve the secret's value at runtime."
    ]
  },
  {
    "question_text": "An application runs on multiple EC2 instances behind an ELB.\n\nWhere is the session data best written so that it can be served reliably across multiple requests?",
    "question_type": "single",
    "choices": [
      "Write data to Amazon ElastiCache.",
      "Write data to Amazon Elastic Block Store.",
      "Write data to Amazon EC2 Instance Store.",
      "Write data to the root filesystem."
    ],
    "site_answers": [
      "Write data to Amazon ElastiCache."
    ]
  },
  {
    "question_text": "An ecommerce application is running behind an Application Load Balancer. A developer observes some unexpected load on the application during non-peak hours. The developer wants to analyze patterns for the client IP addresses that use the application.\n\nWhich HTTP header should the developer use for this analysis?",
    "question_type": "single",
    "choices": [
      "The X-Forwarded-Proto header",
      "The X-Forwarded-Host header",
      "The X-Forwarded-For header",
      "The X-Forwarded-Port header"
    ],
    "site_answers": [
      "The X-Forwarded-For header"
    ]
  },
  {
    "question_text": "A developer migrated a legacy application to an AWS Lambda function. The function uses a third-party service to pull data with a series of API calls at the end of each month. The function then processes the data to generate the monthly reports. The function has been working with no issues so far.\n\nThe third-party service recently issued a restriction to allow a fixed number of API calls each minute and each day. If the API calls exceed the limit for each minute or each day, then the service will produce errors. The API also provides the minute limit and daily limit in the response header. This restriction might extend the overall process to multiple days because the process is consuming more API calls than the available limit.\n\nWhat is the MOST operationally efficient way to refactor the serverless application to accommodate this change?",
    "question_type": "single",
    "choices": [
      "Use an AWS Step Functions state machine to monitor API failures. Use the Wait state to delay calling the Lambda function.",
      "Use an Amazon Simple Queue Service (Amazon SQS) queue to hold the API calls. Configure the Lambda function to poll the queue within the API threshold limits.",
      "Use an Amazon CloudWatch Logs metric to count the number of API calls. Configure an Amazon CloudWatch alarm that stops the currently running instance of the Lambda function when the metric exceeds the API threshold limits.",
      "Use Amazon Kinesis Data Firehose to batch the API calls and deliver them to an Amazon S3 bucket with an event notification to invoke the Lambda function."
    ],
    "site_answers": [
      "Use an AWS Step Functions state machine to monitor API failures. Use the Wait state to delay calling the Lambda function."
    ]
  },
  {
    "question_text": "A developer must analyze performance issues with production-distributed applications written as AWS Lambda functions. These distributed Lambda applications invoke other components that make up the applications.\n\nHow should the developer identify and troubleshoot the root cause of the performance issues in production?",
    "question_type": "single",
    "choices": [
      "Add logging statements to the Lambda functions, then use Amazon CloudWatch to view the logs.",
      "Use AWS CloudTrail and then examine the logs.",
      "Use AWS X-Ray, then examine the segments and errors.",
      "Run Amazon Inspector agents and then analyze performance."
    ],
    "site_answers": [
      "Use AWS X-Ray, then examine the segments and errors."
    ]
  },
  {
    "question_text": "A developer wants to deploy a new version of an AWS Elastic Beanstalk application. During deployment, the application must maintain full capacity and avoid service interruption. Additionally, the developer must minimize the cost of additional resources that support the deployment.\n\nWhich deployment method should the developer use to meet these requirements?",
    "question_type": "single",
    "choices": [
      "All at once",
      "Rolling with additional batch",
      "Blue/green",
      "Immutable"
    ],
    "site_answers": [
      "Rolling with additional batch"
    ]
  },
  {
    "question_text": "A developer has observed an increase in bugs in the AWS Lambda functions that a development team has deployed in its Node.js application. To minimize these bugs, the developer wants to implement automated testing of Lambda functions in an environment that closely simulates the Lambda environment.\n\nThe developer needs to give other developers the ability to run the tests locally. The developer also needs to integrate the tests into the team's continuous integration and continuous delivery (CI/CD) pipeline before the AWS Cloud Development Kit (AWS CDK) deployment.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create sample events based on the Lambda documentation. Create automated test scripts that use the cdk local invoke command to invoke the Lambda functions. Check the response. Document the test scripts for the other developers on the team. Update the CI/CD pipeline to run the test scripts.",
      "Install a unit testing framework that reproduces the Lambda execution environment. Create sample events based on the Lambda documentation. Invoke the handler function by using a unit testing framework. Check the response. Document how to run the unit testing framework for the other developers on the team. Update the CI/CD pipeline to run the unit testing framework.",
      "Install the AWS Serverless Application Model (AWS SAM) CLI tool. Use the sam local generate-event command to generate sample events for the automated tests. Create automated test scripts that use the sam local invoke command to invoke the Lambda functions. Check the response. Document the test scripts for the other developers on the team. Update the CI/CD pipeline to run the test scripts.",
      "Create sample events based on the Lambda documentation. Create a Docker container from the Node.js base image to invoke the Lambda functions. Check the response. Document how to run the Docker container for the other developers on the team. Update the CI/CD pipeline to run the Docker container."
    ],
    "site_answers": [
      "Install the AWS Serverless Application Model (AWS SAM) CLI tool. Use the sam local generate-event command to generate sample events for the automated tests. Create automated test scripts that use the sam local invoke command to invoke the Lambda functions. Check the response. Document the test scripts for the other developers on the team. Update the CI/CD pipeline to run the test scripts."
    ]
  },
  {
    "question_text": "A developer is troubleshooting an application that uses Amazon DynamoDB in the us-west-2 Region. The application is deployed to an Amazon EC2 instance. The application requires read-only permissions to a table that is named Cars. The EC2 instance has an attached IAM role that contains the following IAM policy:When the application tries to read from the Cars table, an Access Denied error occurs.\n\nHow can the developer resolve this error?",
    "question_type": "single",
    "choices": [
      "Modify the IAM policy resource to be \"arn:aws:dynamodb:us-west-2:account-id:table/*\".",
      "Modify the IAM policy to include the dynamodb:* action.",
      "Create a trust policy that specifies the EC2 service principal. Associate the role with the policy.",
      "Create a trust relationship between the role and dynamodb.amazonaws.com."
    ],
    "site_answers": [
      "Create a trust policy that specifies the EC2 service principal. Associate the role with the policy."
    ]
  },
  {
    "question_text": "When using the AWS Encryption SDK, how does the developer keep track of the data encryption keys used to encrypt data?",
    "question_type": "single",
    "choices": [
      "The developer must manually keep track of the data encryption keys used for each data object.",
      "The SDK encrypts the data encryption key and stores it (encrypted) as part of the returned ciphertext.",
      "The SDK stores the data encryption keys automatically in Amazon S3.",
      "The data encryption key is stored in the Userdata for the EC2 instance."
    ],
    "site_answers": [
      "The SDK encrypts the data encryption key and stores it (encrypted) as part of the returned ciphertext."
    ]
  },
  {
    "question_text": "An application that runs on AWS Lambda requires access to specific highly confidential objects in an Amazon S3 bucket. In accordance with the principle of least privilege, a company grants access to the S3 bucket by using only temporary credentials.\n\nHow can a developer configure access to the S3 bucket in the MOST secure way?",
    "question_type": "single",
    "choices": [
      "Hardcode the credentials that are required to access the S3 objects in the application code. Use the credentials to access the required S3 objects.",
      "Create a secret access key and access key ID with permission to access the S3 bucket. Store the key and key ID in AWS Secrets Manager. Configure the application to retrieve the Secrets Manager secret and use the credentials to access the S3 objects.",
      "Create a Lambda function execution role. Attach a policy to the role that grants access to specific objects in the S3 bucket.",
      "Create a secret access key and access key ID with permission to access the S3 bucket. Store the key and key ID as environment variables in Lambda. Use the environment variables to access the required S3 objects."
    ],
    "site_answers": [
      "Create a Lambda function execution role. Attach a policy to the role that grants access to specific objects in the S3 bucket."
    ]
  },
  {
    "question_text": "A developer has code that is stored in an Amazon S3 bucket. The code must be deployed as an AWS Lambda function across multiple accounts in the same AWS Region as the S3 bucket. An AWS CloudFormation template that runs for each account will deploy the Lambda function.\n\nWhat is the MOST secure way to allow CloudFormation to access the Lambda code in the S3 bucket?",
    "question_type": "single",
    "choices": [
      "Grant the CloudFormation service role the S3 ListBucket and GetObject permissions. Add a bucket policy to Amazon S3 with the principal of \"AWS\": [account numbers].",
      "Grant the CloudFormation service role the S3 GetObject permission. Add a bucket policy to Amazon S3 with the principal of \"*\".",
      "Use a service-based link to grant the Lambda function the S3 ListBucket and GetObject permissions by explicitly adding the S3 bucket's account number in the resource.",
      "Use a service-based link to grant the Lambda function the S3 GetObject permission. Add a resource of \"*\" to allow access to the S3 bucket."
    ],
    "site_answers": [
      "Grant the CloudFormation service role the S3 ListBucket and GetObject permissions. Add a bucket policy to Amazon S3 with the principal of \"AWS\": [account numbers]."
    ]
  },
  {
    "question_text": "A developer at a company needs to create a small application that makes the same API call once each day at a designated time. The company does not have infrastructure in the AWS Cloud yet, but the company wants to implement this functionality on AWS.\n\nWhich solution meets these requirements in the MOST operationally efficient manner?",
    "question_type": "single",
    "choices": [
      "Use a Kubernetes cron job that runs on Amazon Elastic Kubernetes Service (Amazon EKS).",
      "Use an Amazon Linux crontab scheduled job that runs on Amazon EC2.",
      "Use an AWS Lambda function that is invoked by an Amazon EventBridge scheduled event.",
      "Use an AWS Batch job that is submitted to an AWS Batch job queue."
    ],
    "site_answers": [
      "Use an AWS Lambda function that is invoked by an Amazon EventBridge scheduled event."
    ]
  },
  {
    "question_text": "A developer is building a serverless application that is based on AWS Lambda. The developer initializes the AWS software development kit (SDK) outside of the Lambda handler function.\n\nWhat is the PRIMARY benefit of this action?",
    "question_type": "single",
    "choices": [
      "Improves legibility and stylistic convention",
      "Takes advantage of runtime environment reuse",
      "Provides better error handling",
      "Creates a new SDK instance for each invocation"
    ],
    "site_answers": [
      "Takes advantage of runtime environment reuse"
    ]
  },
  {
    "question_text": "A company is using Amazon RDS as the backend database for its application. After a recent marketing campaign, a surge of read requests to the database increased the latency of data retrieval from the database. The company has decided to implement a caching layer in front of the database. The cached content must be encrypted and must be highly available.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Amazon CloudFront",
      "Amazon ElastiCache for Memcached",
      "Amazon ElastiCache for Redis in cluster mode",
      "Amazon DynamoDB Accelerator (DAX)"
    ],
    "site_answers": [
      "Amazon ElastiCache for Redis in cluster mode"
    ]
  },
  {
    "question_text": "A developer at a company recently created a serverless application to process and show data from business reports. The application's user interface (UI) allows users to select and start processing the files. The UI displays a message when the result is available to view. The application uses AWS Step Functions with AWS Lambda functions to process the files. The developer used Amazon API Gateway and Lambda functions to create an API to support the UI.\n\nThe company's UI team reports that the request to process a file is often returning timeout errors because of the size or complexity of the files. The UI team wants the API to provide an immediate response so that the UI can display a message while the files are being processed. The backend process that is invoked by the API needs to send an email message when the report processing is complete.\n\nWhat should the developer do to configure the API to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Change the API Gateway route to add an X-Amz-Invocation-Type header with a static value of \u2018Event' in the integration request. Deploy the API Gateway stage to apply the changes.",
      "Change the configuration of the Lambda function that implements the request to process a file. Configure the maximum age of the event so that the Lambda function will run asynchronously.",
      "Change the API Gateway timeout value to match the Lambda function timeout value. Deploy the API Gateway stage to apply the changes.",
      "Change the API Gateway route to add an X-Amz-Target header with a static value of \u2018Async' in the integration request. Deploy the API Gateway stage to apply the changes."
    ],
    "site_answers": [
      "Change the API Gateway route to add an X-Amz-Invocation-Type header with a static value of \u2018Event' in the integration request. Deploy the API Gateway stage to apply the changes."
    ]
  },
  {
    "question_text": "A developer has an application that is composed of many different AWS Lambda functions. The Lambda functions all use some of the same dependencies. To avoid security issues, the developer is constantly updating the dependencies of all of the Lambda functions. The result is duplicated effort for each function.\n\nHow can the developer keep the dependencies of the Lambda functions up to date with the LEAST additional complexity?",
    "question_type": "single",
    "choices": [
      "Define a maintenance window for the Lambda functions to ensure that the functions get updated copies of the dependencies.",
      "Upgrade the Lambda functions to the most recent runtime version.",
      "Define a Lambda layer that contains all of the shared dependencies.",
      "Use an AWS CodeCommit repository to host the dependencies in a centralized location."
    ],
    "site_answers": [
      "Define a Lambda layer that contains all of the shared dependencies."
    ]
  },
  {
    "question_text": "A mobile app stores blog posts in an Amazon DynamoDB table. Millions of posts are added every day, and each post represents a single item in the table. The mobile app requires only recent posts. Any post that is older than 48 hours can be removed.\n\nWhat is the MOST cost-effective way to delete posts that are older than 48 hours?",
    "question_type": "single",
    "choices": [
      "For each item, add a new attribute of type String that has a timestamp that is set to the blog post creation time. Create a script to find old posts with a table scan and remove posts that are older than 48 hours by using the BatchWriteItem API operation. Schedule a cron job on an Amazon EC2 instance once an hour to start the script.",
      "For each item, add a new attribute of type String that has a timestamp that is set to the blog post creation time. Create a script to find old posts with a table scan and remove posts that are older than 48 hours by using the BatchWriteItem API operation. Place the script in a container image. Schedule an Amazon Elastic Container Service (Amazon ECS) task on AWS Fargate that invokes the container every 5 minutes.",
      "For each item, add a new attribute of type Date that has a timestamp that is set to 48 hours after the blog post creation time. Create a global secondary index (GSI) that uses the new attribute as a sort key. Create an AWS Lambda function that references the GSI and removes expired items by using the BatchWriteItem API operation. Schedule the function with an Amazon CloudWatch event every minute.",
      "For each item, add a new attribute of type Number that has a timestamp that is set to 48 hours after the blog post creation time. Configure the DynamoDB table with a TTL that references the new attribute."
    ],
    "site_answers": [
      "For each item, add a new attribute of type Number that has a timestamp that is set to 48 hours after the blog post creation time. Configure the DynamoDB table with a TTL that references the new attribute."
    ]
  },
  {
    "question_text": "A developer is modifying an existing AWS Lambda function. While checking the code, the developer notices hardcoded parameter values for an Amazon RDS for SQL Server user name, password, database, host, and port. There are also hardcoded parameter values for an Amazon DynamoDB table, an Amazon S3 bucket, and an Amazon Simple Notification Service (Amazon SNS) topic.\n\nThe developer wants to securely store the parameter values outside the code in an encrypted format and wants to turn on rotation for the credentials. The developer also wants to be able to reuse the parameter values from other applications and to update the parameter values without modifying code.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Create an RDS database secret in AWS Secrets Manager. Set the user name, password, database, host, and port. Turn on secret rotation. Create encrypted Lambda environment variables for the DynamoDB table, S3 bucket, and SNS topic.",
      "Create an RDS database secret in AWS Secrets Manager. Set the user name, password, database, host, and port. Turn on secret rotation. Create SecureString parameters in AWS Systems Manager Parameter Store for the DynamoDB table, S3 bucket, and SNS topic.",
      "Create RDS database parameters in AWS Systems Manager Parameter Store for the user name, password, database, host, and port. Create encrypted Lambda environment variables for the DynamoDB table, S3 bucket, and SNS topic. Create a Lambda function and set the logic for the credentials rotation task. Schedule the credentials rotation task in Amazon EventBridge.",
      "Create RDS database parameters in AWS Systems Manager Parameter Store for the user name, password, database, host, and port. Store the DynamoDB table, S3 bucket, and SNS topic in Amazon S3. Create a Lambda function and set the logic for the credentials rotation. Invoke the Lambda function on a schedule."
    ],
    "site_answers": [
      "Create an RDS database secret in AWS Secrets Manager. Set the user name, password, database, host, and port. Turn on secret rotation. Create SecureString parameters in AWS Systems Manager Parameter Store for the DynamoDB table, S3 bucket, and SNS topic."
    ]
  },
  {
    "question_text": "A developer accesses AWS CodeCommit over SSH. The SSH keys configured to access AWS CodeCommit are tied to a user with the following permissions:The developer needs to create/delete branches.\n\nWhich specific IAM permissions need to be added, based on the principle of least privilege?",
    "question_type": "single",
    "choices": [
      "\"codecommit:CreateBranch\" \"codecommit:DeleteBranch\"",
      "\"codecommit:Put*\"",
      "\"codecommit:Update*\"",
      "\"codecommit:*\""
    ],
    "site_answers": [
      "\"codecommit:CreateBranch\" \"codecommit:DeleteBranch\""
    ]
  },
  {
    "question_text": "An application that is deployed to Amazon EC2 is using Amazon DynamoDB. The application calls the DynamoDB REST API. Periodically, the application receives a ProvisionedThroughputExceededException error when the application writes to a DynamoDB table.\n\nWhich solutions will mitigate this error MOST cost-effectively? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Modify the application code to perform exponential backoff when the error is received.",
      "Modify the application to use the AWS SDKs for DynamoDB.",
      "Increase the read and write throughput of the DynamoDB table.",
      "Create a DynamoDB Accelerator (DAX) cluster for the DynamoDB table.",
      "Create a second DynamoDB table. Distribute the reads and writes between the two tables."
    ],
    "site_answers": [
      "Modify the application code to perform exponential backoff when the error is received.",
      "Modify the application to use the AWS SDKs for DynamoDB."
    ]
  },
  {
    "question_text": "When a developer tries to run an AWS CodeBuild project, it raises an error because the length of all environment variables exceeds the limit for the combined maximum of characters.\n\nWhat is the recommended solution?",
    "question_type": "single",
    "choices": [
      "Add the export LC_ALL=\"en_US.utf8\" command to the pre_build section to ensure POSIX localization.",
      "Use Amazon Cognito to store key-value pairs for large numbers of environment variables.",
      "Update the settings for the build project to use an Amazon S3 bucket for large numbers of environment variables.",
      "Use AWS Systems Manager Parameter Store to store large numbers of environment variables."
    ],
    "site_answers": [
      "Use AWS Systems Manager Parameter Store to store large numbers of environment variables."
    ]
  },
  {
    "question_text": "A company is expanding the compatibility of its photo-sharing mobile app to hundreds of additional devices with unique screen dimensions and resolutions. Photos are stored in Amazon S3 in their original format and resolution. The company uses an Amazon CloudFront distribution to serve the photos. The app includes the dimension and resolution of the display as GET parameters with every request.\n\nA developer needs to implement a solution that optimizes the photos that are served to each device to reduce load time and increase photo quality.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Use S3 Batch Operations to invoke an AWS Lambda function to create new variants of the photos with the required dimensions and resolutions. Create a dynamic CloudFront origin that automatically maps the request of each device to the corresponding photo variant.",
      "Use S3 Batch Operations to invoke an AWS Lambda function to create new variants of the photos with the required dimensions and resolutions. Create a Lambda@Edge function to route requests to the corresponding photo variant by using request headers.",
      "Create a Lambda@Edge function that optimizes the photos upon request and returns the photos as a response. Change the CloudFront TTL cache policy to the maximum value possible.",
      "Create a Lambda@Edge function that optimizes the photos upon request and returns the photos as a response. In the same function, store a copy of the processed photos on Amazon S3 for subsequent requests."
    ],
    "site_answers": [
      "Create a Lambda@Edge function that optimizes the photos upon request and returns the photos as a response. In the same function, store a copy of the processed photos on Amazon S3 for subsequent requests."
    ]
  },
  {
    "question_text": "A company is building an application for stock trading. The application needs sub-millisecond latency for processing trade requests. The company uses Amazon DynamoDB to store all the trading data that is used to process each trading request.\n\nA development team performs load testing on the application and finds that the data retrieval time is higher than expected. The development team needs a solution that reduces the data retrieval time with the least possible effort.\n\nWhich solution meets these requirements?",
    "question_type": "single",
    "choices": [
      "Add local secondary indexes (LSIs) for the trading data.",
      "Store the trading data in Amazon S3, and use S3 Transfer Acceleration.",
      "Add retries with exponential backoff for DynamoDB queries.",
      "Use DynamoDB Accelerator (DAX) to cache the trading data."
    ],
    "site_answers": [
      "Use DynamoDB Accelerator (DAX) to cache the trading data."
    ]
  },
  {
    "question_text": "A developer is working on a Python application that runs on Amazon EC2 instances. The developer wants to enable tracing of application requests to debug performance issues in the code.\n\nWhich combination of actions should the developer take to achieve this goal? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Install the Amazon CloudWatch agent on the EC2 instances.",
      "Install the AWS X-Ray daemon on the EC2 instances.",
      "Configure the application to write JSON-formatted logs to /var/log/cloudwatch.",
      "Configure the application to write trace data to /var/log/xray.",
      "Install and configure the AWS X-Ray SDK for Python in the application."
    ],
    "site_answers": [
      "Install the AWS X-Ray daemon on the EC2 instances.",
      "Install and configure the AWS X-Ray SDK for Python in the application."
    ]
  },
  {
    "question_text": "A company has an application that runs as a series of AWS Lambda functions. Each Lambda function receives data from an Amazon Simple Notification Service (Amazon SNS) topic and writes the data to an Amazon Aurora DB instance.\n\nTo comply with an information security policy, the company must ensure that the Lambda functions all use a single securely encrypted database connection string to access Aurora.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use IAM database authentication for Aurora to enable secure database connections for all the Lambda functions.",
      "Store the credentials and read the credentials from an encrypted Amazon RDS DB instance.",
      "Store the credentials in AWS Systems Manager Parameter Store as a secure string parameter.",
      "Use Lambda environment variables with a shared AWS Key Management Service (AWS KMS) key for encryption."
    ],
    "site_answers": [
      "Store the credentials in AWS Systems Manager Parameter Store as a secure string parameter."
    ]
  },
  {
    "question_text": "A developer is troubleshooting an Amazon API Gateway API. Clients are receiving HTTP 400 response errors when the clients try to access an endpoint of the API.\n\nHow can the developer determine the cause of these errors?",
    "question_type": "single",
    "choices": [
      "Create an Amazon Kinesis Data Firehose delivery stream to receive API call logs from API Gateway. Configure Amazon CloudWatch Logs as the delivery stream's destination.",
      "Turn on AWS CloudTrail Insights and create a trail. Specify the Amazon Resource Name (ARN) of the trail for the stage of the API.",
      "Turn on AWS X-Ray for the API stage. Create an Amazon CloudWatch Logs log group. Specify the Amazon Resource Name (ARN) of the log group for the API stage.",
      "Turn on execution logging and access logging in Amazon CloudWatch Logs for the API stage. Create a CloudWatch Logs log group. Specify the Amazon Resource Name (ARN) of the log group for the API stage."
    ],
    "site_answers": [
      "Turn on execution logging and access logging in Amazon CloudWatch Logs for the API stage. Create a CloudWatch Logs log group. Specify the Amazon Resource Name (ARN) of the log group for the API stage."
    ]
  },
  {
    "question_text": "A company developed an API application on AWS by using Amazon CloudFront, Amazon API Gateway, and AWS Lambda. The API has a minimum of four requests every second. A developer notices that many API users run the same query by using the POST method. The developer wants to cache the POST request to optimize the API resources.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure the CloudFront cache. Update the application to return cached content based upon the default request headers.",
      "Override the cache method in the selected stage of API Gateway. Select the POST method.",
      "Save the latest request response in Lambda /tmp directory. Update the Lambda function to check the /tmp directory.",
      "Save the latest request in AWS Systems Manager Parameter Store. Modify the Lambda function to take the latest request response from Parameter Store."
    ],
    "site_answers": [
      "Override the cache method in the selected stage of API Gateway. Select the POST method."
    ]
  },
  {
    "question_text": "A company is building a microservices application that consists of many AWS Lambda functions. The development team wants to use AWS Serverless Application Model (AWS SAM) templates to automatically test the Lambda functions. The development team plans to test a small percentage of traffic that is directed to new updates before the team commits to a full deployment of the application.\n\nWhich combination of steps will meet these requirements in the MOST operationally efficient way? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Use AWS SAM CLI commands in AWS CodeDeploy to invoke the Lambda functions to test the deployment.",
      "Declare the EventInvokeConfig on the Lambda functions in the AWS SAM templates with OnSuccess and OnFailure configurations.",
      "Enable gradual deployments through AWS SAM templates.",
      "Set the deployment preference type to Canary10Percent30Minutes. Use hooks to test the deployment.",
      "Set the deployment preference type to Linear10PercentEvery10Minutes. Use hooks to test the deployment."
    ],
    "site_answers": [
      "Enable gradual deployments through AWS SAM templates.",
      "Set the deployment preference type to Canary10Percent30Minutes. Use hooks to test the deployment."
    ]
  },
  {
    "question_text": "A company is using AWS CloudFormation to deploy a two-tier application. The application will use Amazon RDS as its backend database. The company wants a solution that will randomly generate the database password during deployment. The solution also must automatically rotate the database password without requiring changes to the application.\n\nWhat is the MOST operationally efficient solution that meets these requirements?",
    "question_type": "single",
    "choices": [
      "Use an AWS Lambda function as a CloudFormation custom resource to generate and rotate the password.",
      "Use an AWS Systems Manager Parameter Store resource with the SecureString data type to generate and rotate the password.",
      "Use a cron daemon on the application's host to generate and rotate the password.",
      "Use an AWS Secrets Manager resource to generate and rotate the password."
    ],
    "site_answers": [
      "Use an AWS Secrets Manager resource to generate and rotate the password."
    ]
  },
  {
    "question_text": "A developer has been asked to create an AWS Lambda function that is invoked any time updates are made to items in an Amazon DynamoDB table. The function has been created, and appropriate permissions have been added to the Lambda execution role. Amazon DynamoDB streams have been enabled for the table, but the function is still not being invoked.\n\nWhich option would enable DynamoDB table updates to invoke the Lambda function?",
    "question_type": "single",
    "choices": [
      "Change the StreamViewType parameter value to NEW_AND_OLD_IMAGES for the DynamoDB table.",
      "Configure event source mapping for the Lambda function.",
      "Map an Amazon Simple Notification Service (Amazon SNS) topic to the DynamoDB streams.",
      "Increase the maximum runtime (timeout) setting of the Lambda function."
    ],
    "site_answers": [
      "Configure event source mapping for the Lambda function."
    ]
  },
  {
    "question_text": "A developer needs to deploy an application running on AWS Fargate using Amazon ECS. The application has environment variables that must be passed to a container for the application to initialize.\n\nHow should the environment variables be passed to the container?",
    "question_type": "single",
    "choices": [
      "Define an array that includes the environment variables under the environment parameter within the service definition.",
      "Define an array that includes the environment variables under the environment parameter within the task definition.",
      "Define an array that includes the environment variables under the entryPoint parameter within the task definition.",
      "Define an array that includes the environment variables under the entryPoint parameter within the service definition."
    ],
    "site_answers": [
      "Define an array that includes the environment variables under the environment parameter within the task definition."
    ]
  },
  {
    "question_text": "A development team maintains a web application by using a single AWS RDS, template. The template defines web servers and an Amazon RDS database. The team uses the CloudFormation template to deploy the CloudFormation stack to different environments.\n\nDuring a recent application deployment, a developer caused the primary development database to be dropped and recreated. The result of this incident was a loss of data. The team needs to avoid accidental database deletion in the future.\n\nWhich solutions will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Add a CloudFormation DeletionPolicy attribute with the Retain value to the database resource.",
      "Update the CloudFormation stack policy to prevent updates to the database.",
      "Modify the database to use a Multi-AZ deployment.",
      "Create a CloudFormation stack set for the web application and database deployments.",
      "Add a CloudFormation DeletionPolicy attribute with the Retain value to the stack."
    ],
    "site_answers": [
      "Add a CloudFormation DeletionPolicy attribute with the Retain value to the database resource.",
      "Update the CloudFormation stack policy to prevent updates to the database."
    ]
  },
  {
    "question_text": "A developer is storing sensitive data generated by an application in Amazon S3. The developer wants to encrypt the data at rest. A company policy requires an audit trail of when the AWS Key Management Service (AWS KMS) key was used and by whom.\n\nWhich encryption option will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Server-side encryption with Amazon S3 managed keys (SSE-S3)",
      "Server-side encryption with AWS KMS managed keys (SSE-KMS)",
      "Server-side encryption with customer-provided keys (SSE-C)",
      "Server-side encryption with self-managed keys"
    ],
    "site_answers": [
      "Server-side encryption with AWS KMS managed keys (SSE-KMS)"
    ]
  },
  {
    "question_text": "A company has an ecommerce application. To track product reviews, the company's development team uses an Amazon DynamoDB table.\n\nEvery record includes the following:\u2022\tA Review ID, a 16-digit universally unique identifier (UUID)\u2022\tA Product ID and User ID, 16-digit UUIDs that reference other tables\u2022\tA Product Rating on a scale of 1-5\u2022\tAn optional comment from the userThe table partition key is the Review ID. The most performed query against the table is to find the 10 reviews with the highest rating for a given product.\n\nWhich index will provide the FASTEST response for this query?",
    "question_type": "single",
    "choices": [
      "A global secondary index (GSI) with Product ID as the partition key and Product Rating as the sort key",
      "A global secondary index (GSI) with Product ID as the partition key and Review ID as the sort key",
      "A local secondary index (LSI) with Product ID as the partition key and Product Rating as the sort key",
      "A local secondary index (LSI) with Review ID as the partition key and Product ID as the sort key"
    ],
    "site_answers": [
      "A global secondary index (GSI) with Product ID as the partition key and Product Rating as the sort key"
    ]
  },
  {
    "question_text": "A company needs to distribute firmware updates to its customers around the world.\n\nWhich service will allow easy and secure control of the access to the downloads at the lowest cost?",
    "question_type": "single",
    "choices": [
      "Use Amazon CloudFront with signed URLs for Amazon S3.",
      "Create a dedicated Amazon CloudFront Distribution for each customer.",
      "Use Amazon CloudFront with AWS Lambda@Edge.",
      "Use Amazon API Gateway and AWS Lambda to control access to an S3 bucket."
    ],
    "site_answers": [
      "Use Amazon CloudFront with signed URLs for Amazon S3."
    ]
  },
  {
    "question_text": "A developer is testing an application that invokes an AWS Lambda function asynchronously. During the testing phase, the Lambda function fails to process after two retries.\n\nHow can the developer troubleshoot the failure?",
    "question_type": "single",
    "choices": [
      "Configure AWS CloudTrail logging to investigate the invocation failures.",
      "Configure Dead Letter Queues by sending events to Amazon SQS for investigation.",
      "Configure Amazon Simple Workflow Service to process any direct unprocessed events.",
      "Configure AWS Config to process any direct unprocessed events."
    ],
    "site_answers": [
      "Configure Dead Letter Queues by sending events to Amazon SQS for investigation."
    ]
  },
  {
    "question_text": "A company is migrating its PostgreSQL database into the AWS Cloud. The company wants to use a database that will secure and regularly rotate database credentials. The company wants a solution that does not require additional programming overhead.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use Amazon Aurora PostgreSQL for the database. Store the database credentials in AWS Systems Manager Parameter Store. Turn on rotation.",
      "Use Amazon Aurora PostgreSQL for the database. Store the database credentials in AWS Secrets Manager. Turn on rotation.",
      "Use Amazon DynamoDB for the database. Store the database credentials in AWS Systems Manager Parameter Store. Turn on rotation.",
      "Use Amazon DynamoDB for the database. Store the database credentials in AWS Secrets Manager. Turn on rotation."
    ],
    "site_answers": [
      "Use Amazon Aurora PostgreSQL for the database. Store the database credentials in AWS Secrets Manager. Turn on rotation."
    ]
  },
  {
    "question_text": "A developer is creating a mobile application that will not require users to log in.\n\nWhat is the MOST efficient method to grant users access to AWS resources?",
    "question_type": "single",
    "choices": [
      "Use an identity provider to securely authenticate with the application.",
      "Create an AWS Lambda function to create an IAM user when a user accesses the application.",
      "Create credentials using AWS KMS and apply these credentials to users when using the application.",
      "Use Amazon Cognito to associate unauthenticated users with an IAM role that has limited access to resources."
    ],
    "site_answers": [
      "Use Amazon Cognito to associate unauthenticated users with an IAM role that has limited access to resources."
    ]
  },
  {
    "question_text": "A company has developed a new serverless application using AWS Lambda functions that will be deployed using the AWS Serverless Application Model (AWS SAM) CLI.\n\nWhich step should the developer complete prior to deploying the application?",
    "question_type": "single",
    "choices": [
      "Compress the application to a .zip file and upload it into AWS Lambda.",
      "Test the new AWS Lambda function by first tracing it in AWS X-Ray.",
      "Bundle the serverless application using a SAM package.",
      "Create the application environment using the eb create my-env command."
    ],
    "site_answers": [
      "Bundle the serverless application using a SAM package."
    ]
  },
  {
    "question_text": "A company wants to automate part of its deployment process. A developer needs to automate the process of checking for and deleting unused resources that supported previously deployed stacks but that are no longer used.\n\nThe company has a central application that uses the AWS Cloud Development Kit (AWS CDK) to manage all deployment stacks. The stacks are spread out across multiple accounts. The developer's solution must integrate as seamlessly as possible within the current deployment process.\n\nWhich solution will meet these requirements with the LEAST amount of configuration?",
    "question_type": "single",
    "choices": [
      "In the central AWS CDK application, write a handler function in the code that uses AWS SDK calls to check for and delete unused resources. Create an AWS CloudFormation template from a JSON file. Use the template to attach the function code to an AWS Lambda function and to invoke the Lambda function when the deployment stack runs.",
      "In the central AWS CDK application, write a handler function in the code that uses AWS SDK calls to check for and delete unused resources. Create an AWS CDK custom resource. Use the custom resource to attach the function code to an AWS Lambda function and to invoke the Lambda function when the deployment stack runs.",
      "In the central AWS CDK, write a handler function in the code that uses AWS SDK calls to check for and delete unused resources. Create an API in AWS Amplify. Use the API to attach the function code to an AWS Lambda function and to invoke the Lambda function when the deployment stack runs.",
      "In the AWS Lambda console, write a handler function in the code that uses AWS SDK calls to check for and delete unused resources. Create an AWS CDK custom resource. Use the custom resource to import the Lambda function into the stack and to invoke the Lambda function when the deployment stack runs."
    ],
    "site_answers": [
      "In the central AWS CDK application, write a handler function in the code that uses AWS SDK calls to check for and delete unused resources. Create an AWS CDK custom resource. Use the custom resource to attach the function code to an AWS Lambda function and to invoke the Lambda function when the deployment stack runs."
    ]
  },
  {
    "question_text": "A company built a new application in the AWS Cloud. The company automated the bootstrapping of new resources with an Auto Scaling group by using AWS CloudFormation templates. The bootstrap scripts contain sensitive data.\n\nThe company needs a solution that is integrated with CloudFormation to manage the sensitive data in the bootstrap scripts.\n\nWhich solution will meet these requirements in the MOST secure way?",
    "question_type": "single",
    "choices": [
      "Put the sensitive data into a CloudFormation parameter. Encrypt the CloudFormation templates by using an AWS Key Management Service (AWS KMS) key.",
      "Put the sensitive data into an Amazon S3 bucket. Update the CloudFormation templates to download the object from Amazon S3 during bootstrap.",
      "Put the sensitive data into AWS Systems Manager Parameter Store as a secure string parameter. Update the CloudFormation templates to use dynamic references to specify template values.",
      "Put the sensitive data into Amazon Elastic File System (Amazon EFS). Enforce EFS encryption after file system creation. Update the CloudFormation templates to retrieve data from Amazon EFS."
    ],
    "site_answers": [
      "Put the sensitive data into AWS Systems Manager Parameter Store as a secure string parameter. Update the CloudFormation templates to use dynamic references to specify template values."
    ]
  },
  {
    "question_text": "A company needs to set up secure database credentials for all its AWS Cloud resources. The company's resources include Amazon RDS DB instances, Amazon DocumentDB clusters, and Amazon Aurora DB instances. The company's security policy mandates that database credentials be encrypted at rest and rotated at a regular interval.\n\nWhich solution will meet these requirements MOST securely?",
    "question_type": "single",
    "choices": [
      "Set up IAM database authentication for token-based access. Generate user tokens to provide centralized access to RDS DB instances, Amazon DocumentDB clusters, and Aurora DB instances.",
      "Create parameters for the database credentials in AWS Systems Manager Parameter Store. Set the Type parameter to SecureString. Set up automatic rotation on the parameters.",
      "Store the database access credentials as an encrypted Amazon S3 object in an S3 bucket. Block all public access on the S3 bucket. Use S3 server-side encryption to set up automatic rotation on the encryption key.",
      "Create an AWS Lambda function by using the SecretsManagerRotationTemplate template in the AWS Secrets Manager console. Create secrets for the database credentials in Secrets Manager. Set up secrets rotation on a schedule."
    ],
    "site_answers": [
      "Create an AWS Lambda function by using the SecretsManagerRotationTemplate template in the AWS Secrets Manager console. Create secrets for the database credentials in Secrets Manager. Set up secrets rotation on a schedule."
    ]
  },
  {
    "question_text": "A developer has created an AWS Lambda function that makes queries to an Amazon Aurora MySQL DB instance. When the developer performs a test, the DB instance shows an error for too many connections.\n\nWhich solution will meet these requirements with the LEAST operational effort?",
    "question_type": "single",
    "choices": [
      "Create a read replica for the DB instance. Query the replica DB instance instead of the primary DB instance.",
      "Migrate the data to an Amazon DynamoDB database.",
      "Configure the Amazon Aurora MySQL DB instance for Multi-AZ deployment.",
      "Create a proxy in Amazon RDS Proxy. Query the proxy instead of the DB instance."
    ],
    "site_answers": [
      "Create a proxy in Amazon RDS Proxy. Query the proxy instead of the DB instance."
    ]
  },
  {
    "question_text": "A developer is creating a new REST API by using Amazon API Gateway and AWS Lambda. The development team tests the API and validates responses for the known use cases before deploying the API to the production environment.\n\nThe developer wants to make the REST API available for testing by using API Gateway locally.\n\nWhich AWS Serverless Application Model Command Line Interface (AWS SAM CLI) subcommand will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Sam local invoke",
      "Sam local generate-event",
      "Sam local start-lambda",
      "Sam local start-api"
    ],
    "site_answers": [
      "Sam local start-api"
    ]
  },
  {
    "question_text": "A company has a serverless application on AWS that uses a fleet of AWS Lambda functions that have aliases. The company regularly publishes new Lambda function by using an in-house deployment solution. The company wants to improve the release process and to use traffic shifting. A newly published function version should initially make available only to a fixed percentage of production users.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure routing on the alias of the new function by using a weighted alias.",
      "Configure a canary deployment type for Lambda.",
      "Configure routing on the new versions by using environment variables.",
      "Configure a linear deployment type for Lambda."
    ],
    "site_answers": [
      "Configure routing on the alias of the new function by using a weighted alias."
    ]
  },
  {
    "question_text": "A company has an application that stores data in Amazon RDS instances. The application periodically experiences surges of high traffic that cause performance problems. During periods of peak traffic, a developer notices a reduction in query speed in all database queries.\n\nThe team's technical lead determines that a multi-threaded and scalable caching solution should be used to offload the heavy read traffic. The solution needs to improve performance.\n\nWhich solution will meet these requirements with the LEAST complexity?",
    "question_type": "single",
    "choices": [
      "Use Amazon ElastiCache for Memcached to offload read requests from the main database.",
      "Replicate the data to Amazon DynamoDSet up a DynamoDB Accelerator (DAX) cluster.",
      "Configure the Amazon RDS instances to use Multi-AZ deployment with one standby instance. Offload read requests from the main database to the standby instance.",
      "Use Amazon ElastiCache for Redis to offload read requests from the main database."
    ],
    "site_answers": [
      "Use Amazon ElastiCache for Memcached to offload read requests from the main database."
    ]
  },
  {
    "question_text": "A developer must provide an API key to an AWS Lambda function to authenticate with a third-party system. The Lambda function will run on a schedule. The developer needs to ensure that the API key remains encrypted at rest.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Store the API key as a Lambda environment variable by using an AWS Key Management Service (AWS KMS) customer managed key.",
      "Configure the application to prompt the user to provide the password to the Lambda function on the first run.",
      "Store the API key as a value in the application code.",
      "Use Lambda@Edge and only communicate over the HTTPS protocol."
    ],
    "site_answers": [
      "Store the API key as a Lambda environment variable by using an AWS Key Management Service (AWS KMS) customer managed key."
    ]
  },
  {
    "question_text": "An IT department uses Amazon S3 to store sensitive images. After more than 1 year, the company moves the images into archival storage. The company rarely accesses the images, but the company wants a storage solution that maximizes resiliency. The IT department needs access to the images that have been moved to archival storage within 24 hours.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Use S3 Standard-Infrequent Access (S3 Standard-IA) to store the images. Use S3 Glacier Deep Archive with standard retrieval to store and retrieve archived images.",
      "Use S3 Standard-Infrequent Access (S3 Standard-IA) to store the images. Use S3 Glacier Deep Archive with bulk retrieval to store and retrieve archived images.",
      "Use S3 Intelligent-Tiering to store the images. Use S3 Glacier Deep Archive with standard retrieval to store and retrieve archived images.",
      "Use S3 One Zone-Infrequent Access (S3 One Zone-IA) to store the images. Use S3 Glacier Deep Archive with bulk retrieval to store and retrieve archived images."
    ],
    "site_answers": [
      "Use S3 Standard-Infrequent Access (S3 Standard-IA) to store the images. Use S3 Glacier Deep Archive with standard retrieval to store and retrieve archived images."
    ]
  },
  {
    "question_text": "A developer is building a serverless application by using the AWS Serverless Application Model (AWS SAM). The developer is currently testing the application in a development environment. When the application is nearly finished, the developer will need to set up additional testing and staging environments for a quality assurance team.\n\nThe developer wants to use a feature of the AWS SAM to set up deployments to multiple environments.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Add a configuration file in TOML format to group configuration entries to every environment. Add a table for each testing and staging environment. Deploy updates to the environments by using the sam deploy command and the --config-env flag that corresponds to each environment.",
      "Create additional AWS SAM templates for each testing and staging environment. Write a custom shell script that uses the sam deploy command and the --template-file flag to deploy updates to the environments.",
      "Create one AWS SAM configuration file that has default parameters. Perform updates to the testing and staging environments by using the --parameter-overrides flag in the AWS SAM CLI and the parameters that the updates will override.",
      "Use the existing AWS SAM template. Add additional parameters to configure specific attributes for the serverless function and database table resources that are in each environment. Deploy updates to the testing and staging environments by using the sam deploy command."
    ],
    "site_answers": [
      "Add a configuration file in TOML format to group configuration entries to every environment. Add a table for each testing and staging environment. Deploy updates to the environments by using the sam deploy command and the --config-env flag that corresponds to each environment."
    ]
  },
  {
    "question_text": "A developer is working on an application that processes operating data from IoT devices. Each IoT device uploads a data file once every hour to an Amazon S3 bucket. The developer wants to immediately process each data file when the data file is uploaded to Amazon S3.\n\nThe developer will use an AWS Lambda function to process the data files from Amazon S3. The Lambda function is configured with the S3 bucket information where the files are uploaded. The developer wants to configure the Lambda function to immediately invoke after each data file is uploaded.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add an asynchronous invocation to the Lambda function. Select the S3 bucket as the source.",
      "Add an Amazon EventBridge event to the Lambda function. Select the S3 bucket as the source.",
      "Add a trigger to the Lambda function. Select the S3 bucket as the source.",
      "Add a layer to the Lambda function. Select the S3 bucket as the source."
    ],
    "site_answers": [
      "Add a trigger to the Lambda function. Select the S3 bucket as the source."
    ]
  },
  {
    "question_text": "A developer is setting up infrastructure by using AWS CloudFormation. If an error occurs when the resources described in the Cloud Formation template are provisioned, successfully provisioned resources must be preserved. The developer must provision and update the CloudFormation stack by using the AWS CLI.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add an --enable-termination-protection command line option to the create-stack command and the update-stack command.",
      "Add a --disable-rollback command line option to the create-stack command and the update-stack command.",
      "Add a --parameters ParameterKey=PreserveResources,ParameterValue=True command line option to the create-stack command and the update-stack command.",
      "Add a --tags Key=PreserveResources,Value=True command line option to the create-stack command and the update-stack command."
    ],
    "site_answers": [
      "Add a --disable-rollback command line option to the create-stack command and the update-stack command."
    ]
  },
  {
    "question_text": "A developer is building a serverless application that connects to an Amazon Aurora PostgreSQL database. The serverless application consists of hundreds of AWS Lambda functions. During every Lambda function scale out, a new database connection is made that increases database resource consumption.\n\nThe developer needs to decrease the number of connections made to the database. The solution must not impact the scalability of the Lambda functions.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure provisioned concurrency for each Lambda function by setting the ProvisionedConcurrentExecutions parameter to 10.",
      "Enable cluster cache management for Aurora PostgreSQL. Change the connection string of each Lambda function to point to cluster cache management.",
      "Use Amazon RDS Proxy to create a connection pool to manage the database connections. Change the connection string of each Lambda function to reference the proxy.",
      "Configure reserved concurrency for each Lambda function by setting the ReservedConcurrentExecutions parameter to 10."
    ],
    "site_answers": [
      "Use Amazon RDS Proxy to create a connection pool to manage the database connections. Change the connection string of each Lambda function to reference the proxy."
    ]
  },
  {
    "question_text": "A developer is preparing to begin development of a new version of an application. The previous version of the application is deployed in a production environment. The developer needs to deploy fixes and updates to the current version during the development of the new version of the application. The code for the new version of the application is stored in AWS CodeCommit.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "From the main branch, create a feature branch for production bug fixes. Create a second feature branch from the main branch for development of the new version.",
      "Create a Git tag of the code that is currently deployed in production. Create a Git tag for the development of the new version. Push the two tags to the CodeCommit repository.",
      "From the main branch, create a branch of the code that is currently deployed in production. Apply an IAM policy that ensures no other users can push or merge to the branch.",
      "Create a new CodeCommit repository for development of the new version of the application. Create a Git tag for the development of the new version."
    ],
    "site_answers": [
      "From the main branch, create a feature branch for production bug fixes. Create a second feature branch from the main branch for development of the new version."
    ]
  },
  {
    "question_text": "A developer is creating an AWS CloudFormation stack. The stack contains IAM resources with custom names. When the developer tries to deploy the stack, they receive an InsufficientCapabilities error.\n\nWhat should the developer do to resolve this issue?",
    "question_type": "single",
    "choices": [
      "Specify the CAPABILITY_AUTO_EXPAND capability in the CloudFormation stack.",
      "Use an administrators role to deploy IAM resources with CloudFormation.",
      "Specify the CAPABILITY_IAM capability in the CloudFormation stack.",
      "Specify the CAPABILITY_NAMED_IAM capability in the CloudFormation stack."
    ],
    "site_answers": [
      "Specify the CAPABILITY_NAMED_IAM capability in the CloudFormation stack."
    ]
  },
  {
    "question_text": "A company uses Amazon API Gateway to expose a set of APIs to customers. The APIs have caching enabled in API Gateway. Customers need a way to invalidate the cache for each API when they test the API.\n\nWhat should a developer do to give customers the ability to invalidate the API cache?",
    "question_type": "single",
    "choices": [
      "Ask the customers to use AWS credentials to call the InvalidateCache API operation.",
      "Attach an InvalidateCache policy to the IAM execution role that the customers use to invoke the API. Ask the customers to send a request that contains the Cache-Control:max-age=0 HTTP header when they make an API call.",
      "Ask the customers to use the AWS SDK API Gateway class to invoke the InvalidateCache API operation.",
      "Attach an InvalidateCache policy to the IAM execution role that the customers use to invoke the API. Ask the customers to add the INVALIDATE_CACHE query string parameter when they make an API call."
    ],
    "site_answers": [
      "Attach an InvalidateCache policy to the IAM execution role that the customers use to invoke the API. Ask the customers to send a request that contains the Cache-Control:max-age=0 HTTP header when they make an API call."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function that will generate and export a file. The function requires 100 MB of temporary storage for temporary files while running. These files will not be needed after the function is complete.\n\nHow can the developer MOST efficiently handle the temporary files?",
    "question_type": "single",
    "choices": [
      "Store the files in Amazon Elastic Block Store (Amazon EBS) and delete the files at the end of the Lambda function.",
      "Copy the files to Amazon Elastic File System (Amazon EFS) and delete the files at the end of the Lambda function.",
      "Store the files in the /tmp directory and delete the files at the end of the Lambda function.",
      "Copy the files to an Amazon S3 bucket with a lifecycle policy to delete the files."
    ],
    "site_answers": [
      "Store the files in the /tmp directory and delete the files at the end of the Lambda function."
    ]
  },
  {
    "question_text": "A company uses Amazon DynamoDB as a data store for its order management system. The company frontend application stores orders in a DynamoDB table. The DynamoDB table is configured to send change events to a DynamoDB stream. The company uses an AWS Lambda function to log and process the incoming orders based on data from the DynamoDB stream.\n\nAn operational review reveals that the order quantity of incoming orders is sometimes set to 0. A developer needs to create a dashboard that will show how many unique customers this problem affects each day.\n\nWhat should the developer do to implement the dashboard?",
    "question_type": "single",
    "choices": [
      "Grant the Lambda function's execution role permissions to upload logs to Amazon CloudWatch Logs. Implement a CloudWatch Logs Insights query that selects the number of unique customers for orders with order quantity equal to 0 and groups the results in 1-day periods. Add the CloudWatch Logs Insights query to a CloudWatch dashboard.",
      "Use Amazon Athena to query AWS CloudTrail API logs for API calls. Implement an Athena query that selects the number of unique customers for orders with order quantity equal to 0 and groups the results in 1-day periods. Add the Athena query to an Amazon CloudWatch dashboard.",
      "Configure the Lambda function to send events to Amazon EventBridge. Create an EventBridge rule that groups the number of unique customers for orders with order quantity equal to 0 in 1-day periods. Add a CloudWatch dashboard as the target of the rule.",
      "Turn on custom Amazon CloudWatch metrics for the DynamoDB stream of the DynamoDB table. Create a CloudWatch alarm that groups the number of unique customers for orders with order quantity equal to 0 in 1-day periods. Add the CloudWatch alarm to a CloudWatch dashboard."
    ],
    "site_answers": [
      "Grant the Lambda function's execution role permissions to upload logs to Amazon CloudWatch Logs. Implement a CloudWatch Logs Insights query that selects the number of unique customers for orders with order quantity equal to 0 and groups the results in 1-day periods. Add the CloudWatch Logs Insights query to a CloudWatch dashboard."
    ]
  },
  {
    "question_text": "A developer needs to troubleshoot an AWS Lambda function in a development environment. The Lambda function is configured in VPC mode and needs to connect to an existing Amazon RDS for SQL Server DB instance. The DB instance is deployed in a private subnet and accepts connections by using port 1433.\n\nWhen the developer tests the function, the function reports an error when it tries to connect to the database.\n\nWhich combination of steps should the developer take to diagnose this issue? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Check that the function's security group has outbound access on port 1433 to the DB instance's security group. Check that the DB instance's security group has inbound access on port 1433 from the function's security group.",
      "Check that the function's security group has inbound access on port 1433 from the DB instance's security group. Check that the DB instance's security group has outbound access on port 1433 to the function's security group.",
      "Check that the VPC is set up for a NAT gateway. Check that the DB instance has the public access option turned on.",
      "Check that the function's execution role permissions include rds:DescribeDBInstances, rds:ModifyDBInstance. and rds:DescribeDBSecurityGroups for the DB instance.",
      "Check that the function's execution role permissions include ec2:CreateNetworkInterface, ec2:DescribeNetworkInterfaces, and ec2:DeleteNetworkInterface."
    ],
    "site_answers": [
      "Check that the function's security group has outbound access on port 1433 to the DB instance's security group. Check that the DB instance's security group has inbound access on port 1433 from the function's security group.",
      "Check that the function's execution role permissions include ec2:CreateNetworkInterface, ec2:DescribeNetworkInterfaces, and ec2:DeleteNetworkInterface."
    ]
  },
  {
    "question_text": "A developer needs to launch a new Amazon EC2 instance by using the AWS CLI.\n\nWhich AWS CLI command should the developer use to meet this requirement?",
    "question_type": "single",
    "choices": [
      "aws ec2 bundle-instance",
      "aws ec2 start-instances",
      "aws ec2 confirm-product-instance",
      "aws ec2 run-instances"
    ],
    "site_answers": [
      "aws ec2 run-instances"
    ]
  },
  {
    "question_text": "A developer needs to manage AWS infrastructure as code and must be able to deploy multiple identical copies of the infrastructure, stage changes, and revert to previous versions.\n\nWhich approach addresses these requirements?",
    "question_type": "single",
    "choices": [
      "Use cost allocation reports and AWS OpsWorks to deploy and manage the infrastructure.",
      "Use Amazon CloudWatch metrics and alerts along with resource tagging to deploy and manage the infrastructure.",
      "Use AWS Elastic Beanstalk and AWS CodeCommit to deploy and manage the infrastructure.",
      "Use AWS CloudFormation and AWS CodeCommit to deploy and manage the infrastructure."
    ],
    "site_answers": [
      "Use AWS CloudFormation and AWS CodeCommit to deploy and manage the infrastructure."
    ]
  },
  {
    "question_text": "A developer is working on an AWS Lambda function that accesses Amazon DynamoDB. The Lambda function must retrieve an item and update some of its attributes, or create the item if it does not exist. The Lambda function has access to the primary key.\n\nWhich IAM permissions should the developer request for the Lambda function to achieve this functionality?",
    "question_type": "single",
    "choices": [
      "dynamodb:DeleleItemdynamodb:GetItemdynamodb:PutItem",
      "dynamodb:UpdateItemdynamodb:GetItemdynamodb:DescribeTable",
      "dynamodb:GetRecordsdynamodb:PutItemdynamodb:UpdateTable",
      "dynamodb:UpdateItemdynamodb:GetItemdynamodb:PutItem"
    ],
    "site_answers": [
      "dynamodb:UpdateItemdynamodb:GetItemdynamodb:PutItem"
    ]
  },
  {
    "question_text": "A developer has built a market application that stores pricing data in Amazon DynamoDB with Amazon ElastiCache in front. The prices of items in the market change frequently. Sellers have begun complaining that, after they update the price of an item, the price does not actually change in the product listing.\n\nWhat could be causing this issue?",
    "question_type": "single",
    "choices": [
      "The cache is not being invalidated when the price of the item is changed.",
      "The price of the item is being retrieved using a write-through ElastiCache cluster.",
      "The DynamoDB table was provisioned with insufficient read capacity.",
      "The DynamoDB table was provisioned with insufficient write capacity."
    ],
    "site_answers": [
      "The cache is not being invalidated when the price of the item is changed."
    ]
  },
  {
    "question_text": "A company requires that all applications running on Amazon EC2 use IAM roles to gain access to AWS services. A developer is modifying an application that currently relies on IAM user access keys stored in environment variables to access Amazon DynamoDB tables using boto, the AWS SDK for Python.\n\nThe developer associated a role with the same permissions as the IAM user to the EC2 instance, then deleted the IAM user. When the application was restarted, the AWS AccessDeniedException messages started appearing in the application logs. The developer was able to use their personal account on the server to run DynamoDB API commands using the AWS CLI.\n\nWhat is the MOST likely cause of the exception?",
    "question_type": "single",
    "choices": [
      "IAM policies might take a few minutes to propagate to resources.",
      "Disabled environment variable credentials are still being used by the application.",
      "The AWS SDK does not support credentials obtained using an instance role.",
      "The instance's security group does not allow access to http://169.254.169.254."
    ],
    "site_answers": [
      "Disabled environment variable credentials are still being used by the application."
    ]
  },
  {
    "question_text": "A company has an existing application that has hardcoded database credentials. A developer needs to modify the existing application. The application is deployed in two AWS Regions with an active-passive failover configuration to meet company's disaster recovery strategy.\n\nThe developer needs a solution to store the credentials outside the code. The solution must comply with the company's disaster recovery strategy.\n\nWhich solution will meet these requirements in the MOST secure way?",
    "question_type": "single",
    "choices": [
      "Store the credentials in AWS Secrets Manager in the primary Region. Enable secret replication to the secondary Region. Update the application to use the Amazon Resource Name (ARN) based on the Region.",
      "Store credentials in AWS Systems Manager Parameter Store in the primary Region. Enable parameter replication to the secondary Region. Update the application to use the Amazon Resource Name (ARN) based on the Region.",
      "Store credentials in a config file. Upload the config file to an S3 bucket in the primary Region. Enable Cross-Region Replication (CRR) to an S3 bucket in the secondary region. Update the application to access the config file from the S3 bucket, based on the Region.",
      "Store credentials in a config file. Upload the config file to an Amazon Elastic File System (Amazon EFS) file system. Update the application to use the Amazon EFS file system Regional endpoints to access the config file in the primary and secondary Regions."
    ],
    "site_answers": [
      "Store the credentials in AWS Secrets Manager in the primary Region. Enable secret replication to the secondary Region. Update the application to use the Amazon Resource Name (ARN) based on the Region."
    ]
  },
  {
    "question_text": "A developer is receiving HTTP 400: ThrottlingException errors intermittently when calling the Amazon CloudWatch API. When a call fails, no data is retrieved.\n\nWhat best practice should first be applied to address this issue?",
    "question_type": "single",
    "choices": [
      "Contact AWS Support for a limit increase.",
      "Use the AWS CLI to get the metrics.",
      "Analyze the applications and remove the API call.",
      "Retry the call with exponential backoff."
    ],
    "site_answers": [
      "Retry the call with exponential backoff."
    ]
  },
  {
    "question_text": "An application needs to use the IP address of the client in its processing. The application has been moved into AWS and has been placed behind an Application Load Balancer (ALB). However, all the client IP addresses now appear to be the same. The application must maintain the ability to scale horizontally.\n\nBased on this scenario, what is the MOST cost-effective solution to this problem?",
    "question_type": "single",
    "choices": [
      "Remove the application from the ALB. Delete the ALB and change Amazon Route 53 to direct traffic to the instance running the application.",
      "Remove the application from the ALCreate a Classic Load Balancer in its place. Direct traffic to the application using the HTTP protocol.",
      "Alter the application code to inspect the X-Forwarded-For header. Ensure that the code can work properly if a list of IP addresses is passed in the header.",
      "Alter the application code to inspect a custom header. Alter the client code to pass the IP address in the custom header."
    ],
    "site_answers": [
      "Alter the application code to inspect the X-Forwarded-For header. Ensure that the code can work properly if a list of IP addresses is passed in the header."
    ]
  },
  {
    "question_text": "A developer is designing a serverless application that customers use to select seats for a concert venue. Customers send the ticket requests to an Amazon API Gateway API with an AWS Lambda function that acknowledges the order and generates an order ID. The application includes two additional Lambda functions: one for inventory management and one for payment processing. These two Lambda functions run in parallel and write the order to an Amazon Dynamo DB table.\n\nThe application must provide seats to customers according to the following requirements. If a seat is accidently sold more than once, the first order that the application received must get the seat. In these cases, the application must process the payment for only the first order. However, if the first order is rejected during payment processing, the second order must get the seat. In these cases, the application must process the payment for the second order.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Send the order ID to an Amazon Simple Notification Service (Amazon SNS) FIFO topic that fans out to one Amazon Simple Queue Service (Amazon SQS) FIFO queue for inventory management and another SQS FIFO queue for payment processing.",
      "Change the Lambda function that generates the order ID to initiate the Lambda function for inventory management. Then initiate the Lambda function for payment processing.",
      "Send the order ID to an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe the Lambda functions for inventory management and payment processing to the topic.",
      "Deliver the order ID to an Amazon Simple Queue Service (Amazon SQS) queue. Configure the Lambda functions for inventory management and payment processing to poll the queue."
    ],
    "site_answers": [
      "Send the order ID to an Amazon Simple Notification Service (Amazon SNS) FIFO topic that fans out to one Amazon Simple Queue Service (Amazon SQS) FIFO queue for inventory management and another SQS FIFO queue for payment processing."
    ]
  },
  {
    "question_text": "An application uses AWS X-Ray to generate a large amount of trace data on an hourly basis. A developer wants to use filter expressions to limit the returned results through user-specified custom attributes.\n\nHow should the developer use filter expressions to filter the results in X-Ray?",
    "question_type": "single",
    "choices": [
      "Add custom attributes as annotations in the segment document.",
      "Add custom attributes as metadata in the segment document.",
      "Add custom attributes as new segment fields in the segment document.",
      "Create new sampling rules that are based on custom attributes."
    ],
    "site_answers": [
      "Add custom attributes as annotations in the segment document."
    ]
  },
  {
    "question_text": "A web application is using Amazon Kinesis Data Streams for clickstream data that may not be consumed for up to 12 hours.\n\nHow can the developer implement encryption at rest for data within the Kinesis Data Streams?",
    "question_type": "single",
    "choices": [
      "Enable SSL connections to Kinesis.",
      "Use Amazon Kinesis Consumer Library.",
      "Encrypt the data once it is at rest with a Lambda function.",
      "Enable server-side encryption in Kinesis Data Streams."
    ],
    "site_answers": [
      "Enable server-side encryption in Kinesis Data Streams."
    ]
  },
  {
    "question_text": "An application is real-time processing millions of events that are received through an API.\n\nWhat service could be used to allow multiple consumers to process the data concurrently and MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Amazon SNS with fanout to an SQS queue for each application",
      "Amazon SNS with fanout to an SQS FIFO (first-in, first-out) queue for each application",
      "Amazon Kinesis Firehose",
      "Amazon Kinesis Data Streams"
    ],
    "site_answers": [
      "Amazon Kinesis Data Streams"
    ]
  },
  {
    "question_text": "Given the following AWS CloudFormation template:What is the MOST efficient way to reference the new Amazon S3 bucket from another AWS CloudFormation template?",
    "question_type": "single",
    "choices": [
      "Add an Export declaration to the Outputs section of the original template and use ImportValue in other templates.",
      "Add Exported: true to the Content.Bucket in the original template and use ImportResource in other templates.",
      "Create a custom AWS CloudFormation resource that gets the bucket name from the ContentBucket resource of the first stack.",
      "Use Fn::Include to include the existing template in other templates and use the ContentBucket resource directly."
    ],
    "site_answers": [
      "Add an Export declaration to the Outputs section of the original template and use ImportValue in other templates."
    ]
  },
  {
    "question_text": "A developer has built an application that inserts data into an Amazon DynamoDB table. The table is configured to use provisioned capacity. The application is deployed on a burstable nano Amazon EC2 instance. The application logs show that the application has been failing because of a ProvisionedThroughputExceededException error.\n\nWhich actions should the developer take to resolve this issue? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Move the application to a larger EC2 instance.",
      "Increase the number of read capacity units (RCUs) that are provisioned for the DynamoDB table.",
      "Reduce the frequency of requests to DynamoDB by implementing exponential backoff.",
      "Increase the frequency of requests to DynamoDB by decreasing the retry delay.",
      "Change the capacity mode of the DynamoDB table from provisioned to on-demand."
    ],
    "site_answers": [
      "Reduce the frequency of requests to DynamoDB by implementing exponential backoff.",
      "Change the capacity mode of the DynamoDB table from provisioned to on-demand."
    ]
  },
  {
    "question_text": "A company is hosting a workshop for external users and wants to share the reference documents with the external users for 7 days. The company stores the reference documents in an Amazon S3 bucket that the company owns.\n\nWhat is the MOST secure way to share the documents with the external users?",
    "question_type": "single",
    "choices": [
      "Use S3 presigned URLs to share the documents with the external users. Set an expiration time of 7 days.",
      "Move the documents to an Amazon WorkDocs folder. Share the links of the WorkDocs folder with the external users.",
      "Create temporary IAM users that have read-only access to the S3 bucket. Share the access keys with the external users. Expire the credentials after 7 days.",
      "Create a role that has read-only access to the S3 bucket. Share the Amazon Resource Name (ARN) of this role with the external users."
    ],
    "site_answers": [
      "Use S3 presigned URLs to share the documents with the external users. Set an expiration time of 7 days."
    ]
  },
  {
    "question_text": "A developer is planning to use an Amazon API Gateway and AWS Lambda to provide a REST API. The developer will have three distinct environments to manage: development, test, and production.\n\nHow should the application be deployed while minimizing the number of resources to manage?",
    "question_type": "single",
    "choices": [
      "Create a separate API Gateway and separate Lambda function for each environment in the same Region.",
      "Assign a Region for each environment and deploy API Gateway and Lambda to each Region.",
      "Create one API Gateway with multiple stages with one Lambda function with multiple aliases.",
      "Create one API Gateway and one Lambda function, and use a REST parameter to identify the environment."
    ],
    "site_answers": [
      "Create one API Gateway with multiple stages with one Lambda function with multiple aliases."
    ]
  },
  {
    "question_text": "A developer registered an AWS Lambda function as a target for an Application Load Balancer (ALB) using a CLI command. However, the Lambda function is not being invoked when the client sends requests through the ALB.\n\nWhy is the Lambda function not being invoked?",
    "question_type": "single",
    "choices": [
      "A Lambda function cannot be registered as a target for an ALB.",
      "A Lambda function can be registered with an ALB using AWS Management Console only.",
      "The permissions to invoke the Lambda function are missing.",
      "Cross-zone is not enabled on the ALB."
    ],
    "site_answers": [
      "The permissions to invoke the Lambda function are missing."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function that will connect to an Amazon RDS for MySQL instance. The developer wants to store the database credentials. The database credentials need to be encrypted and the database password needs to be automatically rotated.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Store the database credentials as environment variables for the Lambda function. Set the environment variables to rotate automatically.",
      "Store the database credentials in AWS Secrets Manager. Set up managed rotation on the database credentials.",
      "Store the database credentials in AWS Systems Manager Parameter Store as secure string parameters. Set up managed rotation on the parameters.",
      "Store the database credentials in the X-Amz-Security-Token parameter. Set up managed rotation on the parameter."
    ],
    "site_answers": [
      "Store the database credentials in AWS Secrets Manager. Set up managed rotation on the database credentials."
    ]
  },
  {
    "question_text": "A developer wants to reduce risk when deploying a new version of an existing AWS Lambda function. To test the Lambda function, the developer needs to split the traffic between the existing version and the new version of the Lambda function.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure a weighted routing policy in Amazon Route 53. Associate the versions of the Lambda function with the weighted routing policy.",
      "Create a function alias. Configure the alias to split the traffic between the two versions of the Lambda function.",
      "Create an Application Load Balancer (ALB) that uses the Lambda function as a target. Configure the ALB to split the traffic between the two versions of the Lambda function.",
      "Create the new version of the Lambda function as a Lambda layer on the existing version. Configure the function to split the traffic between the two layers."
    ],
    "site_answers": [
      "Create a function alias. Configure the alias to split the traffic between the two versions of the Lambda function."
    ]
  },
  {
    "question_text": "A developer has created a large AWS Lambda function. Deployment of the function is failing because of an InvalidParameterValueException error. The error message indicates that the unzipped size of the function exceeds the maximum supported value.\n\nWhich actions can the developer take to resolve this error? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Submit a quota increase request to AWS Support to increase the function to the required size.",
      "Use a compression algorithm that is more efficient than ZIP.",
      "Break up the function into multiple smaller functions.",
      "Zip the .zip file twice to compress the file more.",
      "Move common libraries, function dependencies, and custom runtimes into Lambda layers."
    ],
    "site_answers": [
      "Break up the function into multiple smaller functions.",
      "Move common libraries, function dependencies, and custom runtimes into Lambda layers."
    ]
  },
  {
    "question_text": "A developer is troubleshooting an application in an integration environment. In the application, an Amazon Simple Queue Service (Amazon SQS) queue consumes messages and then an AWS Lambda function processes the messages. The Lambda function transforms the messages and makes an API call to a third-party service.\n\nThere has been an increase in application usage. The third-party API frequently returns an HTTP 429 Too Many Requests error message. The error message prevents a significant number of messages from being processed successfully.\n\nHow can the developer resolve this issue?",
    "question_type": "single",
    "choices": [
      "Increase the SQS event source's batch size setting.",
      "Configure provisioned concurrency for the Lambda function based on the third-party API's documented rate limits.",
      "Increase the retry attempts and maximum event age in the Lambda function's asynchronous configuration.",
      "Configure maximum concurrency on the SQS event source based on the third-party service's documented rate limits."
    ],
    "site_answers": [
      "Configure maximum concurrency on the SQS event source based on the third-party service's documented rate limits."
    ]
  },
  {
    "question_text": "A company has a three-tier application that is deployed in Amazon Elastic Container Service (Amazon ECS). The application is using an Amazon RDS for MySQL DB instance. The application performs more database reads than writes.\n\nDuring times of peak usage, the application's performance degrades. When this performance degradation occurs, the DB instance's ReadLatency metric in Amazon CloudWatch increases suddenly.\n\nHow should a developer modify the application to improve performance?",
    "question_type": "single",
    "choices": [
      "Use Amazon ElastiCache to cache query results.",
      "Scale the ECS cluster to contain more ECS instances.",
      "Add read capacity units (RCUs) to the DB instance.",
      "Modify the ECS task definition to increase the task memory."
    ],
    "site_answers": [
      "Use Amazon ElastiCache to cache query results."
    ]
  },
  {
    "question_text": "A company has an online web application that includes a product catalog. The catalog is stored in an Amazon S3 bucket that is named DOC-EXAMPLE-BUCKET. The application must be able to list the objects in the S3 bucket and must be able to download objects through an IAM policy.\n\nWhich policy allows MINIMUM access to meet these requirements?",
    "question_type": "single",
    "choices": [
      "",
      "",
      "",
      ""
    ],
    "site_answers": [
      ""
    ]
  },
  {
    "question_text": "A developer is writing an application to encrypt files outside of AWS before uploading the files to an Amazon S3 bucket. The encryption must be symmetric and must be performed inside the application.\n\nHow can the developer implement the encryption in the application to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a data key in AWS Key Management Service (AWS KMS). Use the AWS Encryption SDK to encrypt the files.",
      "Create a Hash-Based Message Authentication Code (HMAC) key in AWS Key Management Service (AWS KMS). Use the AWS Encryption SDK to encrypt the files.",
      "Create a data key pair in AWS Key Management Service (AWS KMS). Use the AWS CLI to encrypt the files.",
      "Create a data key in AWS Key Management Service (AWS KMS). Use the AWS CLI to encrypt the files."
    ],
    "site_answers": [
      "Create a data key in AWS Key Management Service (AWS KMS). Use the AWS Encryption SDK to encrypt the files."
    ]
  },
  {
    "question_text": "A developer is working on an application that is deployed on an Amazon EC2 instance. The developer needs a solution that will securely transfer files from the application to an Amazon S3 bucket.\n\nWhat should the developer do to meet these requirements in the MOST secure way?",
    "question_type": "single",
    "choices": [
      "Create an IAM user. Create an access key for the IAM user. Store the access key in the application's environment variables.",
      "Create an IAM role. Create an access key for the IAM role. Store the access key in the application's environment variables.",
      "Create an IAM role. Configure the IAM role to access the specific Amazon S3 API calls the application requires. Associate the IAM role with the EC2 instance.",
      "Configure an S3 bucket policy for the S3 bucket. Configure the S3 bucket policy to allow access for the EC2 instance ID."
    ],
    "site_answers": [
      "Create an IAM role. Configure the IAM role to access the specific Amazon S3 API calls the application requires. Associate the IAM role with the EC2 instance."
    ]
  },
  {
    "question_text": "A developer created a web API that receives requests by using an internet-facing Application Load Balancer (ALB) with an HTTPS listener. The developer configures an Amazon Cognito user pool and wants to ensure that every request to the API is authenticated through Amazon Cognito.\n\nWhat should the developer do to meet this requirement?",
    "question_type": "single",
    "choices": [
      "Add a listener rule to the listener to return a fixed response if the Authorization header is missing. Set the fixed response to 401 Unauthorized.",
      "Create an authentication action for the listener rules of the ALSet the rule action type to authenticate-cognito. Set the OnUnauthenticatedRequest field to \"deny.\"",
      "Create an Amazon API Gateway API. Configure all API methods to be forwarded to the ALB endpoint. Create an authorizer of the COGNITO_USER_POOLS type. Configure every API method to use that authorizer.",
      "Create a new target group that includes an AWS Lambda function target that validates the Authorization header by using Amazon Cognito. Associate the target group with the listener."
    ],
    "site_answers": [
      "Create an authentication action for the listener rules of the ALSet the rule action type to authenticate-cognito. Set the OnUnauthenticatedRequest field to \"deny.\""
    ]
  },
  {
    "question_text": "A company recently deployed an AWS Lambda function. A developer notices an increase in the function throttle metrics in Amazon CloudWatch.\n\nWhat are the MOST operationally efficient solutions to reduce the function throttling? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Migrate the function to Amazon Elastic Kubernetes Service (Amazon EKS).",
      "Increase the maximum age of events in Lambda.",
      "Increase the function's reserved concurrency.",
      "Add the lambda:GetFunctionConcurrency action to the execution role.",
      "Request a service quota change for increased concurrency."
    ],
    "site_answers": [
      "Increase the function's reserved concurrency.",
      "Request a service quota change for increased concurrency."
    ]
  },
  {
    "question_text": "A company is creating a REST service using an Amazon API Gateway with AWS Lambda integration. The service must run different versions for testing purposes.\n\nWhat would be the BEST way to accomplish this?",
    "question_type": "single",
    "choices": [
      "Use an X-Version header to denote which version is being called and pass that header to the Lambda function(s).",
      "Create an API Gateway Lambda authorizer to route API clients to the correct API version.",
      "Create an API Gateway resource policy to isolate versions and provide context to the Lambda function(s).",
      "Deploy the API versions as unique stages with unique endpoints and use stage variables to provide further context."
    ],
    "site_answers": [
      "Deploy the API versions as unique stages with unique endpoints and use stage variables to provide further context."
    ]
  },
  {
    "question_text": "A company is using AWS CodePipeline to deliver one of its applications. The delivery pipeline is triggered by changes to the main branch of an AWS CodeCommit repository and uses AWS CodeBuild to implement the test and build stages of the process and AWS CodeDeploy to deploy the application.\n\nThe pipeline has been operating successfully for several months and there have been no modifications. Following a recent change to the application's source code, AWS CodeDeploy has not deployed the updated application as expected.\n\nWhat are the possible causes? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "The change was not made in the main branch of the AWS CodeCommit repository.",
      "One of the earlier stages in the pipeline failed and the pipeline has terminated.",
      "One of the Amazon EC2 instances in the company's AWS CodePipeline cluster is inactive.",
      "The AWS CodePipeline is incorrectly configured and is not invoking AWS CodeDeploy.",
      "AWS CodePipeline does not have permissions to access AWS CodeCommit."
    ],
    "site_answers": [
      "The change was not made in the main branch of the AWS CodeCommit repository.",
      "One of the earlier stages in the pipeline failed and the pipeline has terminated."
    ]
  },
  {
    "question_text": "A developer is building a serverless application by using AWS Serverless Application Model (AWS SAM) on multiple AWS Lambda functions. When the application is deployed, the developer wants to shift 10% of the traffic to the new deployment of the application for the first 10 minutes after deployment. If there are no issues, all traffic must switch over to the new version.\n\nWhich change to the AWS SAM template will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Set the Deployment Preference Type to Canary10Percent10Minutes. Set the AutoPublishAlias property to the Lambda alias.",
      "Set the Deployment Preference Type to Linear10PercentEvery10Minutes. Set AutoPublishAlias property to the Lambda alias.",
      "Set the Deployment Preference Type to Canary10Percent10Minutes. Set the PreTraffic and PostTraffic properties to the Lambda alias.",
      "Set the Deployment Preference Type to Linear10PercentEvery10Minutes. Set PreTraffic and PostTraffic properties to the Lambda alias."
    ],
    "site_answers": [
      "Set the Deployment Preference Type to Canary10Percent10Minutes. Set the AutoPublishAlias property to the Lambda alias."
    ]
  },
  {
    "question_text": "An AWS Lambda function is running in a company's shared AWS account. The function needs to perform an additional ec2:DescribeInstances action that is directed at the company's development accounts. A developer must configure the required permissions across the accounts.\n\nHow should the developer configure the permissions to adhere to the principle of least privilege?",
    "question_type": "single",
    "choices": [
      "Create an IAM role in the shared account. Add the ec2:DescribeInstances permission to the role. Establish a trust relationship between the development accounts for this role. Update the Lambda function IAM role in the shared account by adding the ec2:DescribeInstances permission to the role.",
      "Create an IAM role in the development accounts. Add the ec2:DescribeInstances permission to the role. Establish a trust relationship with the shared account for this role. Update the Lambda function IAM role in the shared account by adding the iam:AssumeRole permissions.",
      "Create an IAM role in the shared account. Add the ec2:DescribeInstances permission to the role. Establish a trust relationship between the development accounts for this role. Update the Lambda function IAM role in the shared account by adding the iam:AssumeRole permissions.",
      "Create an IAM role in the development accounts. Add the ec2:DescribeInstances permission to the role. Establish a trust relationship with the shared account for this role. Update the Lambda function IAM role in the shared account by adding the ec2:DescribeInstances permission to the role."
    ],
    "site_answers": [
      "Create an IAM role in the development accounts. Add the ec2:DescribeInstances permission to the role. Establish a trust relationship with the shared account for this role. Update the Lambda function IAM role in the shared account by adding the iam:AssumeRole permissions."
    ]
  },
  {
    "question_text": "A developer is building a new application that will be deployed on AWS. The developer has created an AWS CodeCommit repository for the application. The developer has initialized a new project for the application by invoking the AWS Cloud Development Kit (AWS CDK) cdk init command.\n\nThe developer must write unit tests for the infrastructure as code (IaC) templates that the AWS CDK generates. The developer also must run a validation tool across all constructs in the CDK application to ensure that critical security configurations are activated.\n\nWhich combination of actions will meet these requirements with the LEAST development overhead? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Use a unit testing framework to write custom unit tests against the cdk.out file that the AWS CDK generates. Run the unit tests in a continuous integration and continuous delivery (CI/CD) pipeline that is invoked after any commit to the repository.",
      "Use the CDK assertions module to integrate unit tests with the application. Run the unit tests in a continuous integration and continuous delivery (CI/CD) pipeline that is invoked after any commit to the repository.",
      "Use the CDK runtime context to set key-value pairs that must be present in the cdk.out file that the AWS CDK generates. Fail the stack synthesis if any violations are present.",
      "Write a script that searches the application for specific key configuration strings. Configure the script to produce a report of any security violations.",
      "Use the CDK Aspects class to create custom rules to apply to the CDK application. Fall the stack synthesis if any violations are present."
    ],
    "site_answers": [
      "Use the CDK assertions module to integrate unit tests with the application. Run the unit tests in a continuous integration and continuous delivery (CI/CD) pipeline that is invoked after any commit to the repository.",
      "Use the CDK Aspects class to create custom rules to apply to the CDK application. Fall the stack synthesis if any violations are present."
    ]
  },
  {
    "question_text": "An online sales company is developing a serverless application that runs on AWS. The application uses an AWS Lambda function that calculates order success rates and stores the data in an Amazon DynamoDB table. A developer wants an efficient way to invoke the Lambda function every 15 minutes.\n\nWhich solution will meet this requirement with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Create an Amazon EventBridge rule that has a rate expression that will run the rule every 15 minutes. Add the Lambda function as the target of the EventBridge rule.",
      "Create an AWS Systems Manager document that has a script that will invoke the Lambda function on Amazon EC2. Use a Systems Manager Run Command task to run the shell script every 15 minutes.",
      "Create an AWS Step Functions state machine. Configure the state machine to invoke the Lambda function execution role at a specified interval by using a Wait state. Set the interval to 15 minutes.",
      "Provision a small Amazon EC2 instance. Set up a cron job that invokes the Lambda function every 15 minutes."
    ],
    "site_answers": [
      "Create an Amazon EventBridge rule that has a rate expression that will run the rule every 15 minutes. Add the Lambda function as the target of the EventBridge rule."
    ]
  },
  {
    "question_text": "A company deploys a photo-processing application to an Amazon EC2 instance. The application needs to process each photo in less than 5 seconds. If processing takes longer than 5 seconds, the company's development team must receive a notification.\n\nHow can a developer implement the required time measurement and notification with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Create an Amazon CloudWatch custom metric. Each time a photo is processed, publish the processing time as a metric value. Create a CloudWatch alarm that is based on a static threshold of 5 seconds. Notify the development team by using an Amazon Simple Notification Service (Amazon SNS) topic.",
      "Create an Amazon Simple Queue Service (Amazon SQS) queue. Each time a photo is processed, publish the processing time to the queue. Create an application to consume from the queue and to determine whether any values are more than 5 seconds. Notify the development team by using an Amazon Simple Notification Service (Amazon SNS) topic.",
      "Create an Amazon CloudWatch custom metric. Each time a photo is processed, publish the processing time as a metric value. Create a CloudWatch alarm that enters ALARM state if the average of values is greater than 5 seconds. Notify the development team by sending an Amazon Simple Email Service (Amazon SES) message.",
      "Create an Amazon Kinesis data stream. Each time a photo is processed, publish the processing time to the data stream. Create an Amazon CloudWatch alarm that enters ALARM state if any values are more than 5 seconds. Notify the development team by using an Amazon Simple Notification Service (Amazon SNS) topic."
    ],
    "site_answers": [
      "Create an Amazon CloudWatch custom metric. Each time a photo is processed, publish the processing time as a metric value. Create a CloudWatch alarm that is based on a static threshold of 5 seconds. Notify the development team by using an Amazon Simple Notification Service (Amazon SNS) topic."
    ]
  },
  {
    "question_text": "A company is using AWS Elastic Beanstalk to manage web applications that are running on Amazon EC2 instances. A developer needs to make configuration changes. The developer must deploy the changes to new instances only.\n\nWhich types of deployment can the developer use to meet this requirement? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "All at once",
      "Immutable",
      "Rolling",
      "Blue/green",
      "Rolling with additional batch"
    ],
    "site_answers": [
      "Immutable",
      "Blue/green"
    ]
  },
  {
    "question_text": "A developer needs to use Amazon DynamoDB to store customer orders. The developer's company requires all customer data to be encrypted at rest with a key that the company generates.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create the DynamoDB table with encryption set to None. Code the application to use the key to decrypt the data when the application reads from the table. Code the application to use the key to encrypt the data when the application writes to the table.",
      "Store the key by using AWS Key Management Service (AWS KMS). Choose an AWS KMS customer managed key during creation of the DynamoDB table. Provide the Amazon Resource Name (ARN) of the AWS KMS key.",
      "Store the key by using AWS Key Management Service (AWS KMS). Create the DynamoDB table with default encryption. Include the kms:Encrypt parameter with the Amazon Resource Name (ARN) of the AWS KMS key when using the DynamoDB software development kit (SDK).",
      "Store the key by using AWS Key Management Service (AWS KMS). Choose an AWS KMS AWS managed key during creation of the DynamoDB table. Provide the Amazon Resource Name (ARN) of the AWS KMS key."
    ],
    "site_answers": [
      "Store the key by using AWS Key Management Service (AWS KMS). Choose an AWS KMS customer managed key during creation of the DynamoDB table. Provide the Amazon Resource Name (ARN) of the AWS KMS key."
    ]
  },
  {
    "question_text": "A company uses AWS CloudFormation to deploy an application that uses an Amazon API Gateway REST API with AWS Lambda function integration. The application uses Amazon DynamoDB for data persistence. The application has three stages: development, testing, and production. Each stage uses its own DynamoDB table.\n\nThe company has encountered unexpected issues when promoting changes to the production stage. The changes were successful in the development and testing stages. A developer needs to route 20% of the traffic to the new production stage API with the next production release. The developer needs to route the remaining 80% of the traffic to the existing production stage. The solution must minimize the number of errors that any single customer experiences.\n\nWhich approach should the developer take to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Update 20% of the planned changes to the production stage. Deploy the new production stage. Monitor the results. Repeat this process five times to test all planned changes.",
      "Update the Amazon Route 53 DNS record entry for the production stage API to use a weighted routing policy. Set the weight to a value of 80. Add a second record for the production domain name. Change the second routing policy to a weighted routing policy. Set the weight of the second policy to a value of 20. Change the alias of the second policy to use the testing stage API.",
      "Deploy an Application Load Balancer (ALB) in front of the REST API. Change the production API Amazon Route 53 record to point traffic to the ALB. Register the production and testing stages as targets of the ALB with weights of 80% and 20%, respectively.",
      "Configure canary settings for the production stage API. Change the percentage of traffic directed to canary deployment to 20%. Make the planned updates to the production stage. Deploy the changes"
    ],
    "site_answers": [
      "Configure canary settings for the production stage API. Change the percentage of traffic directed to canary deployment to 20%. Make the planned updates to the production stage. Deploy the changes"
    ]
  },
  {
    "question_text": "A developer has created a data collection application that uses Amazon API Gateway, AWS Lambda, and Amazon S3. The application's users periodically upload data files and wait for the validation status to be reflected on a processing dashboard. The validation process is complex and time-consuming for large files.\n\nSome users are uploading dozens of large files and have to wait and refresh the processing dashboard to see if the files have been validated. The developer must refactor the application to immediately update the validation result on the user's dashboard without reloading the full dashboard.\n\nWhat is the MOST operationally efficient solution that meets these requirements?",
    "question_type": "single",
    "choices": [
      "Integrate the client with an API Gateway WebSocket API. Save the user-uploaded files with the WebSocket connection ID. Push the validation status to the connection ID when the processing is complete to initiate an update of the user interface.",
      "Launch an Amazon EC2 micro instance, and set up a WebSocket server. Send the user-uploaded file and user detail to the EC2 instance after the user uploads the file. Use the WebSocket server to send updates to the user interface when the uploaded file is processed.",
      "Save the user's email address along with the user-uploaded file. When the validation process is complete, send an email notification through Amazon Simple Notification Service (Amazon SNS) to the user who uploaded the file.",
      "Save the user-uploaded file and user detail to Amazon DynamoDB. Use Amazon DynamoDB Streams with Amazon Simple Notification Service (Amazon SNS) push notifications to send updates to the browser to update the user interface."
    ],
    "site_answers": [
      "Integrate the client with an API Gateway WebSocket API. Save the user-uploaded files with the WebSocket connection ID. Push the validation status to the connection ID when the processing is complete to initiate an update of the user interface."
    ]
  },
  {
    "question_text": "A company's developer is creating an application that uses Amazon API Gateway. The company wants to ensure that only users in the Sales department can use the application. The users authenticate to the application by using federated credentials from a third-party identity provider (IdP) through Amazon Cognito. The developer has set up an attribute mapping to map an attribute that is named Department and to pass the attribute to a custom AWS Lambda authorizer.\n\nTo test the access limitation, the developer sets their department to Engineering in the IdP and attempts to log in to the application. The developer is denied access. The developer then updates their department to Sales in the IdP and attempts to log in. Again, the developer is denied access. The developer checks the logs and discovers that access is being denied because the developer's access token has a department value of Engineering.\n\nWhich of the following is a possible reason that the developer's department is still being reported as Engineering instead of Sales?",
    "question_type": "single",
    "choices": [
      "Authorization caching is enabled in the custom Lambda authorizer.",
      "Authorization caching is enabled on the Amazon Cognito user pool.",
      "The IAM role for the custom Lambda authorizer does not have a Department tag.",
      "The IAM role for the Amazon Cognito user pool does not have a Department tag."
    ],
    "site_answers": [
      "Authorization caching is enabled in the custom Lambda authorizer."
    ]
  },
  {
    "question_text": "A company has migrated an application to Amazon EC2 instances. Automatic scaling is working well for the application user interface. However, the process to deliver shipping requests to the company's warehouse staff is encountering issues. Duplicate shipping requests are arriving, and some requests are lost or arrive out of order.\n\nThe company must avoid duplicate shipping requests and must process the requests in the order that the requests arrive. Requests are never more than 250 KB in size and take 5-10 minutes to process. A developer needs to rearchitect the application to improve the reliability of the delivery and processing of the requests.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon Kinesis Data Firehose delivery stream to process the requests. Create an Amazon Kinesis data stream. Modify the application to write the requests to the Kinesis data stream.",
      "Create an AWS Lambda function to process the requests. Create an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe the Lambda function to the SNS topic. Modify the application to write the requests to the SNS topic.",
      "Create an AWS Lambda function to process the requests. Create an Amazon Simple Queue Service (Amazon SQS) standard queue. Set the SQS queue as an event source for the Lambda function. Modify the application to write the requests to the SQS queue.",
      "Create an AWS Lambda function to process the requests. Create an Amazon Simple Queue Service (Amazon SQS) FIFO queue. Set the SQS queue as an event source for the Lambda function. Modify the application to write the requests to the SQS queue."
    ],
    "site_answers": [
      "Create an AWS Lambda function to process the requests. Create an Amazon Simple Queue Service (Amazon SQS) FIFO queue. Set the SQS queue as an event source for the Lambda function. Modify the application to write the requests to the SQS queue."
    ]
  },
  {
    "question_text": "A developer is creating a machine learning (ML) pipeline in AWS Step Functions that contains AWS Lambda functions. The developer has configured an Amazon Simple Queue Service (Amazon SQS) queue to deliver ML model parameters to the ML pipeline to train ML models. The developer uploads the trained models are uploaded to an Amazon S3 bucket.\n\nThe developer needs a solution that can locally test the ML pipeline without making service integration calls to Amazon SQS and Amazon S3.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use the Amazon CodeGuru Profiler to analyze the Lambda functions used in the AWS Step Functions pipeline.",
      "Use the AWS Step Functions Local Docker Image to run and locally test the Lambda functions.",
      "Use the AWS Serverless Application Model (AWS SAM) CLI to run and locally test the Lambda functions.",
      "Use AWS Step Functions Local with mocked service integrations."
    ],
    "site_answers": [
      "Use AWS Step Functions Local with mocked service integrations."
    ]
  },
  {
    "question_text": "A company runs a batch processing application by using AWS Lambda functions and Amazon API Gateway APIs with deployment stages for development, user acceptance testing, and production. A development team needs to configure the APIs in the deployment stages to connect to third-party service endpoints.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Store the third-party service endpoints in Lambda layers that correspond to the stage.",
      "Store the third-party service endpoints in API Gateway stage variables that correspond to the stage.",
      "Encode the third-party service endpoints as query parameters in the API Gateway request URL.",
      "Store the third-party service endpoint for each environment in AWS AppConfig."
    ],
    "site_answers": [
      "Store the third-party service endpoints in API Gateway stage variables that correspond to the stage."
    ]
  },
  {
    "question_text": "A developer is building a serverless application that runs on AWS. The developer wants to create an accelerated development workflow that deploys incremental changes to AWS for testing. The developer wants to deploy the incremental changes but does not want to fully deploy the entire application to AWS for every code commit.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use the AWS Serverless Application Model (AWS SAM) to build the application. Use the sam sync command to deploy the incremental changes.",
      "Use the AWS Serverless Application Model (AWS SAM) to build the application. Use the sam init command to deploy the incremental changes.",
      "Use the AWS Cloud Development Kit (AWS CDK) to build the application. Use the cdk synth command to deploy the incremental changes.",
      "Use the AWS Cloud Development Kit (AWS CDK) to build the application. Use the cdk bootstrap command to deploy the incremental changes."
    ],
    "site_answers": [
      "Use the AWS Serverless Application Model (AWS SAM) to build the application. Use the sam sync command to deploy the incremental changes."
    ]
  },
  {
    "question_text": "A developer is building an application that will use an Amazon API Gateway API with an AWS Lambda backend. The team that will develop the frontend requires immediate access to the API endpoints to build the UI. To prepare the backend application for integration, the developer needs to set up endpoints. The endpoints need to return predefined HTTP status codes and JSON responses for the frontend team. The developer creates a method for an API resource.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Set the integration type to AWS_PROXY. Provision Lambda functions to return hardcoded JSON data.",
      "Set the integration type to MOCK. Configure the method's integration request and integration response to associate a JSON responses with specific HTTP status codes.",
      "Set the integration type to HTTP_PROXY. Configure API Gateway to pass all requests to an external placeholder API. which the team will build.",
      "Set the integration type to MOCK. Use a method request to define HTTP status codes. Use an integration request to define JSON responses."
    ],
    "site_answers": [
      "Set the integration type to MOCK. Configure the method's integration request and integration response to associate a JSON responses with specific HTTP status codes."
    ]
  },
  {
    "question_text": "A developer is migrating an application to Amazon Elastic Kubernetes Service (Amazon EKS). The developer migrates the application to Amazon Elastic Container Registry (Amazon ECR) with an EKS cluster. As part of the application migration to a new backend, the developer creates a new AWS account. The developer makes configuration changes to the application to point the application to the new AWS account and to use new backend resources. The developer successfully tests the changes within the application by deploying the pipeline.\n\nThe Docker image build and the pipeline deployment are successful, but the application is still connecting to the old backend. The developer finds that the application's configuration is still referencing the original EKS cluster and not referencing the new backend resources.\n\nWhich reason can explain why the application is not connecting to the new resources?",
    "question_type": "single",
    "choices": [
      "The developer did not successfully create the new AWS account.",
      "The developer added a new tag to the Docker image.",
      "The developer did not update the Docker image tag to a new version.",
      "The developer pushed the changes to a new Docker image tag."
    ],
    "site_answers": [
      "The developer did not update the Docker image tag to a new version."
    ]
  },
  {
    "question_text": "A developer is creating an application that reads and writes to multiple Amazon S3 buckets. The application will be deployed to an Amazon EC2 instance. The developer wants to make secure API requests from the EC2 instances without the need to manage the security credentials for the application. The developer needs to apply the principle of least privilege.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an IAM user. Create access keys and secret keys for the user. Associate the user with an IAM policy that allows s3:* permissions.",
      "Associate the EC2 instance with an IAM role that has an IAM policy that allows s3:ListBucket and s3:*Object permissions for specific S3 buckets.",
      "Associate the EC2 instance with an IAM role that has an AmazonS3FullAccess AWS managed policy.",
      "Create a bucket policy on the S3 bucket that allows s3:ListBucket and s3:*Object permissions to the EC2 instance."
    ],
    "site_answers": [
      "Associate the EC2 instance with an IAM role that has an IAM policy that allows s3:ListBucket and s3:*Object permissions for specific S3 buckets."
    ]
  },
  {
    "question_text": "A developer is writing an application that will retrieve sensitive data from a third-party system. The application will format the data into a PDF file. The PDF file could be more than 1 MB. The application will encrypt the data to disk by using AWS Key Management Service (AWS KMS). The application will decrypt the file when a user requests to download it. The retrieval and formatting portions of the application are complete.\n\nThe developer needs to use the GenerateDataKey API to encrypt the PDF file so that the PDF file can be decrypted later. The developer needs to use an AWS KMS symmetric customer managed key for encryption.\n\nWhich solutions will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Write the encrypted key from the GenerateDataKey API to disk for later use. Use the plaintext key from the GenerateDataKey API and a symmetric encryption algorithm to encrypt the file.",
      "Write the plain text key from the GenerateDataKey API to disk for later use. Use the encrypted key from the GenerateDataKey API and a symmetric encryption algorithm to encrypt the file.",
      "Write the encrypted key from the GenerateDataKey API to disk for later use. Use the plaintext key from the GenerateDataKey API to encrypt the file by using the KMS Encrypt API.",
      "Write the plain text key from the GenerateDataKey API to disk for later use. Use the encrypted key from the GenerateDataKey API to encrypt the file by using the KMS Encrypt API."
    ],
    "site_answers": [
      "Write the encrypted key from the GenerateDataKey API to disk for later use. Use the plaintext key from the GenerateDataKey API and a symmetric encryption algorithm to encrypt the file."
    ]
  },
  {
    "question_text": "A company runs an application on Amazon EC2 instances. The EC2 instances open connections to an Amazon RDS for SQL Server database. A developer needs to store and access the credentials and wants to automatically rotate the credentials. The developer does not want to store the credentials for the database in the code.\n\nWhich solution will meet these requirements in the MOST secure way?",
    "question_type": "single",
    "choices": [
      "Create an IAM role that has permissions to access the database. Attach the IAM role to the EC2 instances.",
      "Store the credentials as secrets in AWS Secrets Manager. Create an AWS Lambda function to update the secrets and the database. Retrieve the credentials from Secrets Manager as needed.",
      "Store the credentials in an encrypted text file in an Amazon S3 bucket. Configure the EC2 instance launch template to download the credentials from Amazon S3 as the instance launches. Create an AWS Lambda function to update the secrets and the database.",
      "Store the credentials in an Amazon DynamoDB table. Configure an Amazon CloudWatch Events rule to invoke an AWS Lambda function to periodically update the secrets and database."
    ],
    "site_answers": [
      "Store the credentials as secrets in AWS Secrets Manager. Create an AWS Lambda function to update the secrets and the database. Retrieve the credentials from Secrets Manager as needed."
    ]
  },
  {
    "question_text": "A company wants to test its web application more frequently. The company deploys the application by using a separate AWS CloudFormation stack for each environment. The company deploys the same CloudFormation template to each stack as the application progresses through the development lifecycle.\n\nA developer needs to build in notifications for the quality assurance (QA) team. The developer wants the notifications to occur for new deployments in the final preproduction environment.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe the QA team to the Amazon SNS topic. Update the CloudFormation stack options to point to the SNS topic in the pre-production environment.",
      "Create an AWS Lambda function that notifies the QA team. Create an Amazon EventBridge rule to invoke the Lambda function on the default event bus. Filter the events on the CloudFormation service and on the CloudFormation stack Amazon Resource Name (ARN).",
      "Create an Amazon CloudWatch alarm that monitors the metrics from CloudFormation. Filter the metrics on the stack name and the stack status. Configure the CloudWatch alarm to notify the QA team.",
      "Create an AWS Lambda function that notifies the QA team. Configure the event source mapping to receive events from CloudFormation. Specify the filtering values to limit invocations to the desired CloudFormation stack."
    ],
    "site_answers": [
      "Create an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe the QA team to the Amazon SNS topic. Update the CloudFormation stack options to point to the SNS topic in the pre-production environment."
    ]
  },
  {
    "question_text": "A developer manages three AWS accounts. Each account contains an Amazon RDS DB instance in a private subnet. The developer needs to define users in each database in a consistent way. The developer must ensure that the same users are created and updated later in all three accounts.\n\nWhich solution will meet these requirements with the MOST operational efficiency?",
    "question_type": "single",
    "choices": [
      "Create an AWS CloudFormation template. Declare the users in the template. Attach the users to the database. Deploy the template in each account.",
      "Create an AWS CloudFormation template that contains a custom resource to create the users in the database. Deploy the template in each account.",
      "Write a script that creates the users. Deploy an Amazon EC2 instance in each account to run the script on the databases. Run the script in each account.",
      "Implement an AWS Lambda function that creates the users in the database. Provide the function with the details of all three accounts."
    ],
    "site_answers": [
      "Create an AWS CloudFormation template that contains a custom resource to create the users in the database. Deploy the template in each account."
    ]
  },
  {
    "question_text": "A company is building a new application that runs on AWS and uses Amazon API Gateway to expose APIs. Teams of developers are working on separate components of the application in parallel. The company wants to publish an API without an integrated backend so that teams that depend on the application backend can continue the development work before the API backend development is complete.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create API Gateway resources and set the integration type value to MOCK. Configure the method integration request and integration response to associate a response with an HTTP status code. Create an API Gateway stage and deploy the API.",
      "Create an AWS Lambda function that returns mocked responses and various HTTP status codes. Create API Gateway resources and set the integration type value to AWS_PROXY. Deploy the API.",
      "Create an EC2 application that returns mocked HTTP responses. Create API Gateway resources and set the integration type value to AWS. Create an API Gateway stage and deploy the API.",
      "Create API Gateway resources and set the integration type value set to HTTP_PROXY. Add mapping templates and deploy the API. Create an AWS Lambda layer that returns various HTTP status codes. Associate the Lambda layer with the API deployment."
    ],
    "site_answers": [
      "Create API Gateway resources and set the integration type value to MOCK. Configure the method integration request and integration response to associate a response with an HTTP status code. Create an API Gateway stage and deploy the API."
    ]
  },
  {
    "question_text": "An application that runs on AWS receives messages from an Amazon Simple Queue Service (Amazon SQS) queue and processes the messages in batches. The application sends the data to another SQS queue to be consumed by another legacy application. The legacy system can take up to 5 minutes to process some transaction data.\n\nA developer wants to ensure that there are no out-of-order updates in the legacy system. The developer cannot alter the behavior of the legacy system.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use an SQS FIFO queue. Configure the visibility timeout value.",
      "Use an SQS standard queue with a SendMessageBatchRequestEntry data type. Configure the DelaySeconds values.",
      "Use an SQS standard queue with a SendMessageBatchRequestEntry data type. Configure the visibility timeout value.",
      "Use an SQS FIFO queue. Configure the DelaySeconds value."
    ],
    "site_answers": [
      "Use an SQS FIFO queue. Configure the visibility timeout value."
    ]
  },
  {
    "question_text": "A company is building a compute-intensive application that will run on a fleet of Amazon EC2 instances. The application uses attached Amazon Elastic Block Store (Amazon EBS) volumes for storing data. The Amazon EBS volumes will be created at time of initial deployment. The application will process sensitive information. All of the data must be encrypted. The solution should not impact the application's performance.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure the fleet of EC2 instances to use encrypted EBS volumes to store data.",
      "Configure the application to write all data to an encrypted Amazon S3 bucket.",
      "Configure a custom encryption algorithm for the application that will encrypt and decrypt all data.",
      "Configure an Amazon Machine Image (AMI) that has an encrypted root volume and store the data to ephemeral disks."
    ],
    "site_answers": [
      "Configure the fleet of EC2 instances to use encrypted EBS volumes to store data."
    ]
  },
  {
    "question_text": "A developer is updating the production version of an AWS Lambda function to fix a defect. The developer has tested the updated code in a test environment. The developer wants to slowly roll out the updates to a small subset of production users before rolling out the changes to all users. Only 10% of the users should be initially exposed to the new code in production.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Update the Lambda code and create a new version of the Lambda function. Create a Lambda function trigger. Configure the traffic weights in the trigger between the two Lambda function versions. Send 90% of the traffic to the production version, and send 10% of the traffic to the new version.",
      "Create a new Lambda function that uses the updated code. Create a Lambda alias for the production Lambda function. Configure the Lambda alias to send 90% of the traffic to the production Lambda function, and send 10% of the traffic to the test Lambda function.",
      "Update the Lambda code and create a new version of the Lambda function. Create a Lambda proxy integration. Configure the Lambda proxy to split traffic between the two Lambda function versions. Send 90% of the traffic to the production version, and send 10% of the traffic to the new version.",
      "Update the Lambda code and create a new version of the Lambda function. Create a Lambda function alias. Configure the traffic weights in the Lambda alias between the two Lambda function versions. Send 90% of the traffic to the production version, and send 10% of the traffic to the new version."
    ],
    "site_answers": [
      "Update the Lambda code and create a new version of the Lambda function. Create a Lambda function alias. Configure the traffic weights in the Lambda alias between the two Lambda function versions. Send 90% of the traffic to the production version, and send 10% of the traffic to the new version."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function that consumes messages from an Amazon Simple Queue Service (Amazon SQS) standard queue. The developer notices that the Lambda function processes some messages multiple times.\n\nHow should developer resolve this issue MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Change the Amazon SQS standard queue to an Amazon SQS FIFO queue by using the Amazon SQS message deduplication ID.",
      "Set up a dead-letter queue.",
      "Set the maximum concurrency limit of the AWS Lambda function to 1.",
      "Change the message processing to use Amazon Kinesis Data Streams instead of Amazon SQS."
    ],
    "site_answers": [
      "Change the Amazon SQS standard queue to an Amazon SQS FIFO queue by using the Amazon SQS message deduplication ID."
    ]
  },
  {
    "question_text": "A developer is optimizing an AWS Lambda function and wants to test the changes in production on a small percentage of all traffic. The Lambda function serves requests to a RE ST API in Amazon API Gateway. The developer needs to deploy their changes and perform a test in production without changing the API Gateway URL.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Define a function version for the currently deployed production Lambda function. Update the API Gateway endpoint to reference the new Lambda function version. Upload and publish the optimized Lambda function code. On the production API Gateway stage, define a canary release and set the percentage of traffic to direct to the canary release. Update the API Gateway endpoint to use the $LATEST version of the Lambda function. Publish the API to the canary stage.",
      "Define a function version for the currently deployed production Lambda function. Update the API Gateway endpoint to reference the new Lambda function version. Upload and publish the optimized Lambda function code. Update the API Gateway endpoint to use the $LATEST version of the Lambda function. Deploy a new API Gateway stage.",
      "Define an alias on the $LATEST version of the Lambda function. Update the API Gateway endpoint to reference the new Lambda function alias. Upload and publish the optimized Lambda function code. On the production API Gateway stage, define a canary release and set the percentage of traffic to direct to the canary release. Update the API Gateway endpoint to use the $LATEST version of the Lambda function. Publish to the canary stage.",
      "Define a function version for the currently deployed production Lambda function. Update the API Gateway endpoint to reference the new Lambda function version. Upload and publish the optimized Lambda function code. Update the API Gateway endpoint to use the $LATEST version of the Lambda function. Deploy the API to the production API Gateway stage."
    ],
    "site_answers": [
      "Define an alias on the $LATEST version of the Lambda function. Update the API Gateway endpoint to reference the new Lambda function alias. Upload and publish the optimized Lambda function code. On the production API Gateway stage, define a canary release and set the percentage of traffic to direct to the canary release. Update the API Gateway endpoint to use the $LATEST version of the Lambda function. Publish to the canary stage."
    ]
  },
  {
    "question_text": "A company notices that credentials that the company uses to connect to an external software as a service (SaaS) vendor are stored in a configuration file as plaintext.\n\nThe developer needs to secure the API credentials and enforce automatic credentials rotation on a quarterly basis.\n\nWhich solution will meet these requirements MOST securely?",
    "question_type": "single",
    "choices": [
      "Use AWS Key Management Service (AWS KMS) to encrypt the configuration file. Decrypt the configuration file when users make API calls to the SaaS vendor. Enable rotation.",
      "Retrieve temporary credentials from AWS Security Token Service (AWS STS) every 15 minutes. Use the temporary credentials when users make API calls to the SaaS vendor.",
      "Store the credentials in AWS Secrets Manager and enable rotation. Configure the API to have Secrets Manager access.",
      "Store the credentials in AWS Systems Manager Parameter Store and enable rotation. Retrieve the credentials when users make API calls to the SaaS vendor."
    ],
    "site_answers": [
      "Store the credentials in AWS Secrets Manager and enable rotation. Configure the API to have Secrets Manager access."
    ]
  },
  {
    "question_text": "A company has an application that is hosted on Amazon EC2 instances. The application stores objects in an Amazon S3 bucket and allows users to download objects from the S3 bucket. A developer turns on S3 Block Public Access for the S3 bucket. After this change, users report errors when they attempt to download objects. The developer needs to implement a solution so that only users who are signed in to the application can access objects in the S3 bucket.\n\nWhich combination of steps will meet these requirements in the MOST secure way? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Create an EC2 instance profile and role with an appropriate policy. Associate the role with the EC2 instances.",
      "Create an IAM user with an appropriate policy. Store the access key ID and secret access key on the EC2 instances.",
      "Modify the application to use the S3 GeneratePresignedUrl API call.",
      "Modify the application to use the S3 GetObject API call and to return the object handle to the user.",
      "Modify the application to delegate requests to the S3 bucket."
    ],
    "site_answers": [
      "Create an EC2 instance profile and role with an appropriate policy. Associate the role with the EC2 instances.",
      "Modify the application to use the S3 GeneratePresignedUrl API call."
    ]
  },
  {
    "question_text": "An Amazon Simple Queue Service (Amazon SQS) queue serves as an event source for an AWS Lambda function. In the SQS queue, each item corresponds to a video file that the Lambda function must convert to a smaller resolution. The Lambda function is timing out on longer video files, but the Lambda function's timeout is already configured to its maximum value.\n\nWhat should a developer do to avoid the timeouts without additional code changes?",
    "question_type": "single",
    "choices": [
      "Increase the memory configuration of the Lambda function.",
      "Increase the visibility timeout on the SQS queue.",
      "Increase the instance size of the host that runs the Lambda function.",
      "Use multi-threading for the conversion."
    ],
    "site_answers": [
      "Increase the memory configuration of the Lambda function."
    ]
  },
  {
    "question_text": "A company is building an application on AWS. The application's backend includes an Amazon API Gateway REST API. The company's frontend application developers cannot continue work until the backend API is ready for integration. The company needs a solution that will allow the frontend application developers to continue their work.\n\nWhich solution will meet these requirements in the MOST operationally efficient way?",
    "question_type": "single",
    "choices": [
      "Configure mock integrations for API Gateway API methods.",
      "Integrate a Lambda function with API Gateway and return a mocked response.",
      "Add new API endpoints to the API Gateway stage and returns a mocked response.",
      "Configure a proxy resource for API Gateway API methods."
    ],
    "site_answers": [
      "Configure mock integrations for API Gateway API methods."
    ]
  },
  {
    "question_text": "A company is preparing to migrate an application to the company's first AWS environment. Before this migration, a developer is creating a proof-of-concept application to validate a model for building and deploying container-based applications on AWS.\n\nWhich combination of steps should the developer take to deploy the containerized proof-of-concept application with the LEAST operational effort? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Package the application into a .zip file by using a command line tool. Upload the package to Amazon S3.",
      "Package the application into a container image by using the Docker CLI. Upload the image to Amazon Elastic Container Registry (Amazon ECR).",
      "Deploy the application to an Amazon EC2 instance by using AWS CodeDeploy.",
      "Deploy the application to Amazon Elastic Kubernetes Service (Amazon EKS) on AWS Fargate.",
      "Deploy the application to Amazon Elastic Container Service (Amazon ECS) on AWS Fargate."
    ],
    "site_answers": [
      "Package the application into a container image by using the Docker CLI. Upload the image to Amazon Elastic Container Registry (Amazon ECR).",
      "Deploy the application to Amazon Elastic Container Service (Amazon ECS) on AWS Fargate."
    ]
  },
  {
    "question_text": "A developer supports an application that accesses data in an Amazon DynamoDB table. One of the item attributes is expirationDate in the timestamp format. The application uses this attribute to find items, archive them, and remove them from the table based on the timestamp value.\n\nThe application will be decommissioned soon, and the developer must find another way to implement this functionality. The developer needs a solution that will require the least amount of code to write.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Enable TTL on the expirationDate attribute in the table. Create a DynamoDB stream. Create an AWS Lambda function to process the deleted items. Create a DynamoDB trigger for the Lambda function.",
      "Create two AWS Lambda functions: one to delete the items and one to process the items. Create a DynamoDB stream. Use the DeleteItem API operation to delete the items based on the expirationDate attribute. Use the GetRecords API operation to get the items from the DynamoDB stream and process them.",
      "Create two AWS Lambda functions: one to delete the items and one to process the items. Create an Amazon EventBridge scheduled rule to invoke the Lambda functions. Use the DeleteItem API operation to delete the items based on the expirationDate attribute. Use the GetRecords API operation to get the items from the DynamoDB table and process them.",
      "Enable TTL on the expirationDate attribute in the table. Specify an Amazon Simple Queue Service (Amazon SQS) dead-letter queue as the target to delete the items. Create an AWS Lambda function to process the items."
    ],
    "site_answers": [
      "Enable TTL on the expirationDate attribute in the table. Create a DynamoDB stream. Create an AWS Lambda function to process the deleted items. Create a DynamoDB trigger for the Lambda function."
    ]
  },
  {
    "question_text": "A developer needs to implement a custom machine learning (ML) library in an application. The size of the library is 15 GB. The size of the library is increasing. The application uses AWS Lambda functions. All the Lambda functions must have access to the library.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Save the library in Lambda layers. Attach the layers to all Lambda functions.",
      "Save the library in Amazon S3. Download the library from Amazon S3 inside the Lambda function.",
      "Save the library as a Lambda container image. Redeploy the Lambda functions with the new image.",
      "Save the library in an Amazon Elastic File System (Amazon EFS) file system. Mount the EFS file system in all the Lambda functions."
    ],
    "site_answers": [
      "Save the library in an Amazon Elastic File System (Amazon EFS) file system. Mount the EFS file system in all the Lambda functions."
    ]
  },
  {
    "question_text": "A developer is designing a serverless application for a game in which users register and log in through a web browser. The application makes requests on behalf of users to a set of AWS Lambda functions that run behind an Amazon API Gateway HTTP API.\n\nThe developer needs to implement a solution to register and log in users on the application's sign-in page. The solution must minimize operational overhead and must minimize ongoing management of user identities.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create Amazon Cognito user pools for external social identity providers. Configure IAM roles for the identity pools.",
      "Program the sign-in page to create users' IAM groups with the IAM roles attached to the groups.",
      "Create an Amazon RDS for SQL Server DB instance to store the users and manage the permissions to the backend resources in AWS.",
      "Configure the sign-in page to register and store the users and their passwords in an Amazon DynamoDB table with an attached IAM policy."
    ],
    "site_answers": [
      "Create Amazon Cognito user pools for external social identity providers. Configure IAM roles for the identity pools."
    ]
  },
  {
    "question_text": "A company has a web application that is hosted on Amazon EC2 instances. The EC2 instances are configured to stream logs to Amazon CloudWatch Logs. The company needs to receive an Amazon Simple Notification Service (Amazon SNS) notification when the number of application error messages exceeds a defined threshold within a 5-minute period.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Rewrite the application code to stream application logs to Amazon SNS. Configure an SNS topic to send a notification when the number of errors exceeds the defined threshold within a 5-minute period.",
      "Configure a subscription filter on the CloudWatch Logs log group. Configure the filter to send an SNS notification when the number of errors exceeds the defined threshold within a 5-minute period.",
      "Install and configure the Amazon Inspector agent on the EC2 instances to monitor for errors. Configure Amazon Inspector to send an SNS notification when the number of errors exceeds the defined threshold within a 5-minute period.",
      "Create a CloudWatch metric filter to match the application error pattern in the log data. Set up a CloudWatch alarm based on the new custom metric. Configure the alarm to send an SNS notification when the number of errors exceeds the defined threshold within a 5-minute period."
    ],
    "site_answers": [
      "Create a CloudWatch metric filter to match the application error pattern in the log data. Set up a CloudWatch alarm based on the new custom metric. Configure the alarm to send an SNS notification when the number of errors exceeds the defined threshold within a 5-minute period."
    ]
  },
  {
    "question_text": "A photo sharing application uses Amazon S3 to store image files. All user images are manually audited for inappropriate content by a third-party company. The audits are completed 1-24 hours after user upload and the results are written to an Amazon DynamoDB table, which uses the S3 object key as a primary key. The database items can be queried by using a REST API created by the third-party company.\n\nAn application developer needs to implement an automated process to tag all S3 objects with the results of the content audit.\n\nWhat should the developer do to meet these requirements in the MOST operationally efficient way?",
    "question_type": "single",
    "choices": [
      "Create an AWS Lambda function to run in response to the s3:ObjectCreated event type. Write the S3 key to an Amazon Simple Queue Service (Amazon SQS) queue with a visibility timeout of 24 hours. Create and configure a second Lambda function to read items from the queue. Retrieve the results for each item from the DynamoDB table. Tag each S3 object accordingly.",
      "Create an AWS Lambda function to run in response to the s3:ObjectCreated event type. Integrate the function into an AWS Step Functions standard workflow. Define an AWS Step Functions Wait state and set the value to 24 hours. Create and configure a second Lambda function to retrieve the audit results and tag the S3 objects accordingly after the Wait state is over.",
      "Create an AWS Lambda function to load all untagged S3 objects. Retrieve the results for each item from the REST API and tag each S3 object accordingly. Create and configure an Amazon EventBridge rule to run at regular intervals. Set the Lambda function as a target for the EventBridge rule.",
      "Launch an Amazon EC2 instance. Deploy a script to the EC2 instance to use the external database results to tag the S3 objects accordingly. Configure a crontab file to run the script at regular intervals."
    ],
    "site_answers": [
      "Create an AWS Lambda function to run in response to the s3:ObjectCreated event type. Integrate the function into an AWS Step Functions standard workflow. Define an AWS Step Functions Wait state and set the value to 24 hours. Create and configure a second Lambda function to retrieve the audit results and tag the S3 objects accordingly after the Wait state is over."
    ]
  },
  {
    "question_text": "A company has built an AWS Lambda function to convert large image files into output files that can be used in a third-party viewer application. The company recently added a new module to the function to improve the output of the generated files. However, the new module has increased the bundle size and has increased the time that is needed to deploy changes to the function code.\n\nHow can a developer increase the speed of the Lambda function deployment?",
    "question_type": "single",
    "choices": [
      "Use AWS CodeDeploy to deploy the function code.",
      "Use Lambda layers to package and load dependencies.",
      "Increase the memory size of the function.",
      "Use Amazon S3 to host the function dependencies."
    ],
    "site_answers": [
      "Use Lambda layers to package and load dependencies."
    ]
  },
  {
    "question_text": "A developer creates a static website for their department. The developer deploys the static assets for the website to an Amazon S3 bucket and serves the assets with Amazon CloudFront. The developer uses origin access control (OAC) on the CloudFront distribution to access the S3 bucket.\n\nThe developer notices users can access the root URL and specific pages but cannot access directories without specifying a file name. For example, /products/index.html works, but /products/ returns an error. The developer needs to enable accessing directories without specifying a file name without exposing the S3 bucket publicly.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Update the CloudFront distribution's settings to index.html as the default root object is set.",
      "Update the Amazon S3 bucket settings and enable static website hosting. Specify index.html as the Index document. Update the S3 bucket policy to enable access. Update the CloudFront distribution's origin to use the S3 website endpoint.",
      "Create a CloudFront function that examines the request URL and appends index.html when directories are being accessed. Add the function as a viewer request CloudFront function to the CloudFront distribution's behavior.",
      "Create a custom error response on the CloudFront distribution with the HTTP error code set to the HTTP 404 Not Found response code and the response page path to /index.html. Set the HTTP response code to the HTTP 200 OK response code."
    ],
    "site_answers": [
      "Create a CloudFront function that examines the request URL and appends index.html when directories are being accessed. Add the function as a viewer request CloudFront function to the CloudFront distribution's behavior."
    ]
  },
  {
    "question_text": "A developer is testing a RESTful application that is deployed by using Amazon API Gateway and AWS Lambda. When the developer tests the user login by using credentials that are not valid, the developer receives an HTTP 405: METHOD_NOT_ALLOWED error. The developer has verified that the test is sending the correct request for the resource.\n\nWhich HTTP error should the application return in response to the request?",
    "question_type": "single",
    "choices": [
      "HTTP 401",
      "HTTP 404",
      "HTTP 503",
      "HTTP 505"
    ],
    "site_answers": [
      "HTTP 401"
    ]
  },
  {
    "question_text": "A developer must use multi-factor authentication (MFA) to access data in an Amazon S3 bucket that is in another AWS account.\n\nWhich AWS Security Token Service (AWS STS) API operation should the developer use with the MFA information to meet this requirement?",
    "question_type": "single",
    "choices": [
      "AssumeRoleWithWebIdentity",
      "GetFederationToken",
      "AssumeRoleWithSAML",
      "AssumeRole"
    ],
    "site_answers": [
      "AssumeRole"
    ]
  },
  {
    "question_text": "A developer designed an application on an Amazon EC2 instance. The application makes API requests to objects in an Amazon S3 bucket.\n\nWhich combination of steps will ensure that the application makes the API requests in the MOST secure manner? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Create an IAM user that has permissions to the S3 bucket. Add the user to an IAM group.",
      "Create an IAM role that has permissions to the S3 bucket.",
      "Add the IAM role to an instance profile. Attach the instance profile to the EC2 instance.",
      "Create an IAM role that has permissions to the S3 bucket. Assign the role to an IAM group.",
      "Store the credentials of the IAM user in the environment variables on the EC2 instance."
    ],
    "site_answers": [
      "Create an IAM role that has permissions to the S3 bucket.",
      "Add the IAM role to an instance profile. Attach the instance profile to the EC2 instance."
    ]
  },
  {
    "question_text": "An AWS Lambda function requires read access to an Amazon S3 bucket and requires read/write access to an Amazon DynamoDB table. The correct IAM policy already exists.\n\nWhat is the MOST secure way to grant the Lambda function access to the S3 bucket and the DynamoDB table?",
    "question_type": "single",
    "choices": [
      "Attach the existing IAM policy to the Lambda function.",
      "Create an IAM role for the Lambda function. Attach the existing IAM policy to the role. Attach the role to the Lambda function.",
      "Create an IAM user with programmatic access. Attach the existing IAM policy to the user. Add the user access key ID and secret access key as environment variables in the Lambda function.",
      "Add the AWS account root user access key ID and secret access key as encrypted environment variables in the Lambda function."
    ],
    "site_answers": [
      "Create an IAM role for the Lambda function. Attach the existing IAM policy to the role. Attach the role to the Lambda function."
    ]
  },
  {
    "question_text": "A developer is using AWS Step Functions to automate a workflow. The workflow defines each step as an AWS Lambda function task. The developer notices that runs of the Step Functions state machine fail in the GetResource task with either an IllegalArgumentException error or a TooManyRequestsException error.\n\nThe developer wants the state machine to stop running when the state machine encounters an IllegalArgumentException error. The state machine needs to retry the GetResource task one additional time after 10 seconds if the state machine encounters a TooManyRequestsException error. If the second attempt fails, the developer wants the state machine to stop running.\n\nHow can the developer implement the Lambda retry functionality without adding unnecessary complexity to the state machine?",
    "question_type": "single",
    "choices": [
      "Add a Delay task after the GetResource task. Add a catcher to the GetResource task. Configure the catcher with an error type of TooManyRequestsException. Configure the next step to be the Delay task. Configure the Delay task to wait for an interval of 10 seconds. Configure the next step to be the GetResource task.",
      "Add a catcher to the GetResource task. Configure the catcher with an error type of TooManyRequestsException, an interval of 10 seconds, and a maximum attempts value of 1. Configure the next step to be the GetResource task.",
      "Add a retrier to the GetResource task. Configure the retrier with an error type of TooManyRequestsException, an interval of 10 seconds, and a maximum attempts value of 1.",
      "Duplicate the GetResource task. Rename the new GetResource task to TryAgain. Add a catcher to the original GetResource task. Configure the catcher with an error type of TooManyRequestsException. Configure the next step to be TryAgain."
    ],
    "site_answers": [
      "Add a retrier to the GetResource task. Configure the retrier with an error type of TooManyRequestsException, an interval of 10 seconds, and a maximum attempts value of 1."
    ]
  },
  {
    "question_text": "A developer is creating a serverless application that uses an AWS Lambda function. The developer will use AWS CloudFormation to deploy the application. The application will write logs to Amazon CloudWatch Logs. The developer has created a log group in a CloudFormation template for the application to use. The developer needs to modify the CloudFormation template to make the name of the log group available to the application at runtime.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Use the AWS::Include transform in CloudFormation to provide the log group's name to the application.",
      "Pass the log group's name to the application in the user data section of the CloudFormation template.",
      "Use the CloudFormation template's Mappings section to specify the log group's name for the application.",
      "Pass the log group's Amazon Resource Name (ARN) as an environment variable to the Lambda function."
    ],
    "site_answers": [
      "Pass the log group's Amazon Resource Name (ARN) as an environment variable to the Lambda function."
    ]
  },
  {
    "question_text": "A developer is creating an Amazon DynamoDB table by using the AWS CLI. The DynamoDB table must use server-side encryption with an AWS owned encryption key.\n\nHow should the developer create the DynamoDB table to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an AWS Key Management Service (AWS KMS) customer managed key. Provide the key's Amazon Resource Name (ARN) in the KMSMasterKeyId parameter during creation of the DynamoDB table.",
      "Create an AWS Key Management Service (AWS KMS) AWS managed key. Provide the key's Amazon Resource Name (ARN) in the KMSMasterKeyId parameter during creation of the DynamoDB table.",
      "Create an AWS owned key. Provide the key's Amazon Resource Name (ARN) in the KMSMasterKeyId parameter during creation of the DynamoDB table.",
      "Create the DynamoDB table with the default encryption options."
    ],
    "site_answers": [
      "Create the DynamoDB table with the default encryption options."
    ]
  },
  {
    "question_text": "A company has an application that runs across multiple AWS Regions. The application is experiencing performance issues at irregular intervals. A developer must use AWS X-Ray to implement distributed tracing for the application to troubleshoot the root cause of the performance issues.\n\nWhat should the developer do to meet this requirement?",
    "question_type": "single",
    "choices": [
      "Use the X-Ray console to add annotations for AWS services and user-defined services.",
      "Use Region annotation that X-Ray adds automatically for AWS services. Add Region annotation for user-defined services.",
      "Use the X-Ray daemon to add annotations for AWS services and user-defined services.",
      "Use Region annotation that X-Ray adds automatically for user-defined services. Configure X-Ray to add Region annotation for AWS services."
    ],
    "site_answers": [
      "Use Region annotation that X-Ray adds automatically for AWS services. Add Region annotation for user-defined services."
    ]
  },
  {
    "question_text": "A company runs an application on AWS. The application uses an AWS Lambda function that is configured with an Amazon Simple Queue Service (Amazon SQS) queue called high priority queue as the event source. A developer is updating the Lambda function with another SQS queue called low priority queue as the event source. The Lambda function must always read up to 10 simultaneous messages from the high priority queue before processing messages from low priority queue. The Lambda function must be limited to 100 simultaneous invocations.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Set the event source mapping batch size to 10 for the high priority queue and to 90 for the low priority queue.",
      "Set the delivery delay to 0 seconds for the high priority queue and to 10 seconds for the low priority queue.",
      "Set the event source mapping maximum concurrency to 10 for the high priority queue and to 90 for the low priority queue.",
      "Set the event source mapping batch window to 10 for the high priority queue and to 90 for the low priority queue."
    ],
    "site_answers": [
      "Set the event source mapping maximum concurrency to 10 for the high priority queue and to 90 for the low priority queue."
    ]
  },
  {
    "question_text": "A data visualization company wants to strengthen the security of its core applications. The applications are deployed on AWS across its development, staging, pre-production, and production environments. The company needs to encrypt all of its stored sensitive credentials. The sensitive credentials need to be automatically rotated. A version of the sensitive credentials need to be stored for each environment.\n\nWhich solution will meet these requirements in the MOST operationally efficient way?",
    "question_type": "single",
    "choices": [
      "Configure AWS Secrets Manager versions to store different copies of the same credentials across multiple environments.",
      "Create a new parameter version in AWS Systems Manager Parameter Store for each environment. Store the environment-specific credentials in the parameter version.",
      "Configure the environment variables in the application code. Use different names for each environment type.",
      "Configure AWS Secrets Manager to create a new secret for each environment type. Store the environment-specific credentials in the secret."
    ],
    "site_answers": [
      "Configure AWS Secrets Manager to create a new secret for each environment type. Store the environment-specific credentials in the secret."
    ]
  },
  {
    "question_text": "A developer is investigating an issue in part of a company's application. In the application, messages are sent to an Amazon Simple Queue Service (Amazon SQS) queue. The AWS Lambda function polls messages from the SQS queue and sends email messages by using Amazon Simple Email Service (Amazon SES). Users have been receiving duplicate email messages during periods of high traffic.\n\nWhich reasons could explain the duplicate email messages? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Standard SQS queues support at-least-once message delivery.",
      "Standard SQS queues support exactly-once processing, so the duplicate email messages are because of user error.",
      "Amazon SES has the DomainKeys Identified Mail (DKIM) authentication incorrectly configured.",
      "The SQS queue's visibility timeout is lower than or the same as the Lambda function's timeout.",
      "The Amazon SES bounce rate metric is too high."
    ],
    "site_answers": [
      "Standard SQS queues support at-least-once message delivery.",
      "The SQS queue's visibility timeout is lower than or the same as the Lambda function's timeout."
    ]
  },
  {
    "question_text": "A developer is deploying a company's application to Amazon EC2 instances. The application generates gigabytes of data files each day. The files are rarely accessed, but the files must be available to the application's users within minutes of a request during the first year of storage. The company must retain the files for 7 years.\n\nHow can the developer implement the application to meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Store the files in an Amazon S3 bucket. Use the S3 Glacier Instant Retrieval storage class. Create an S3 Lifecycle policy to transition the files to the S3 Glacier Deep Archive storage class after 1 year.",
      "Store the files in an Amazon S3 bucket. Use the S3 Standard storage class. Create an S3 Lifecycle policy to transition the files to the S3 Glacier Flexible Retrieval storage class after 1 year.",
      "Store the files on an Amazon Elastic Block Store (Amazon EBS) volume. Use Amazon Data Lifecycle Manager (Amazon DLM) to create snapshots of the EBS volumes and to store those snapshots in Amazon S3.",
      "Store the files on an Amazon Elastic File System (Amazon EFS) mount. Configure EFS lifecycle management to transition the files to the EFS Standard- Infrequent Access (Standard-IA) storage class after 1 year."
    ],
    "site_answers": [
      "Store the files in an Amazon S3 bucket. Use the S3 Glacier Instant Retrieval storage class. Create an S3 Lifecycle policy to transition the files to the S3 Glacier Deep Archive storage class after 1 year."
    ]
  },
  {
    "question_text": "A company's developer has deployed an application in AWS by using AWS CloudFormation. The CloudFormation stack includes parameters in AWS Systems Manager Parameter Store that the application uses as configuration settings. The application can modify the parameter values.\n\nWhen the developer updated the stack to create additional resources with tags, the developer noted that the parameter values were reset and that the values ignored the latest changes made by the application. The developer needs to change the way the company deploys the CloudFormation stack. The developer also needs to avoid resetting the parameter values outside the stack.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Modify the CloudFormation stack to set the deletion policy to Retain for the Parameter Store parameters.",
      "Create an Amazon DynamoDB table as a resource in the CloudFormation stack to hold configuration data for the application. Migrate the parameters that the application is modifying from Parameter Store to the DynamoDB table.",
      "Create an Amazon RDS DB instance as a resource in the CloudFormation stack. Create a table in the database for parameter configuration. Migrate the parameters that the application is modifying from Parameter Store to the configuration table.",
      "Modify the CloudFormation stack policy to deny updates on Parameter Store parameters."
    ],
    "site_answers": [
      "Modify the CloudFormation stack to set the deletion policy to Retain for the Parameter Store parameters."
    ]
  },
  {
    "question_text": "A company has a social media application that receives large amounts of traffic. User posts and interactions are continuously updated in an Amazon RDS database. The data changes frequently, and the data types can be complex. The application must serve read requests with minimal latency.\n\nThe application's current architecture struggles to deliver these rapid data updates efficiently. The company needs a solution to improve the application's performance.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use Amazon DynamoDB Accelerator (DAX) in front of the RDS database to provide a caching layer for the high volume of rapidly changing data.",
      "Set up Amazon S3 Transfer Acceleration on the RDS database to enhance the speed of data transfer from the databases to the application.",
      "Add an Amazon CloudFront distribution in front of the RDS database to provide a caching layer for the high volume of rapidly changing data.",
      "Create an Amazon ElastiCache for Redis cluster. Update the application code to use a write-through caching strategy and read the data from Redis."
    ],
    "site_answers": [
      "Create an Amazon ElastiCache for Redis cluster. Update the application code to use a write-through caching strategy and read the data from Redis."
    ]
  },
  {
    "question_text": "A developer created an AWS Lambda function that performs a series of operations that involve multiple AWS services. The function's duration time is higher than normal. To determine the cause of the issue, the developer must investigate traffic between the services without changing the function code.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Enable AWS X-Ray active tracing in the Lambda function. Review the logs in X-Ray.",
      "Configure AWS CloudTrail. View the trail logs that are associated with the Lambda function.",
      "Review the AWS Config logs in Amazon CloudWatch.",
      "Review the Amazon CloudWatch logs that are associated with the Lambda function."
    ],
    "site_answers": [
      "Enable AWS X-Ray active tracing in the Lambda function. Review the logs in X-Ray."
    ]
  },
  {
    "question_text": "A company has on-premises data centers that run an image processing service. The service consists of containerized applications that run on Kubernetes clusters. All the applications have access to the same NFS share for files and data storage.\n\nThe company is running out of NFS capacity in the data centers and needs to migrate to AWS as soon as possible. The Kubernetes clusters must be highly available on AWS.\n\nWhich combination of actions will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Transfer the information that is in the NFS share to an Amazon Elastic Block Store (Amazon EBS) volume. Upload the container images to Amazon Elastic Container Registry (Amazon ECR).",
      "Transfer the information that is in the NFS share to an Amazon Elastic File System (Amazon EFS) volume. Upload the container images to Amazon Elastic Container Registry (Amazon ECR).",
      "Create an Amazon Elastic Container Service (Amazon ECS) cluster to run the applications. Configure each node of the cluster to mount the Amazon Elastic Block Store (Amazon EBS) volume at the required path for the container images.",
      "Create an Amazon Elastic Kubernetes Service (Amazon EKS) cluster to run the applications. Configure each node of the cluster to mount the Amazon Elastic Block Store (Amazon EBS) volume at the required path for the container images.",
      "Create an Amazon Elastic Kubernetes Service (Amazon EKS) cluster to run the applications. Configure each node of the cluster to mount the Amazon Elastic File System (Amazon EFS) volume at the required path for the container images."
    ],
    "site_answers": [
      "Transfer the information that is in the NFS share to an Amazon Elastic File System (Amazon EFS) volume. Upload the container images to Amazon Elastic Container Registry (Amazon ECR).",
      "Create an Amazon Elastic Kubernetes Service (Amazon EKS) cluster to run the applications. Configure each node of the cluster to mount the Amazon Elastic File System (Amazon EFS) volume at the required path for the container images."
    ]
  },
  {
    "question_text": "A company has an analytics application that uses an AWS Lambda function to process transaction data asynchronously. A developer notices that asynchronous invocations of the Lambda function sometimes fail. When failed Lambda function invocations occur, the developer wants to invoke a second Lambda function to handle errors and log details.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure a Lambda function destination with a failure condition. Specify Lambda function as the destination type. Specify the error-handling Lambda function's Amazon Resource Name (ARN) as the resource.",
      "Enable AWS X-Ray active tracing on the initial Lambda function. Configure X-Ray to capture stack traces of the failed invocations. Invoke the error-handling Lambda function by including the stack traces in the event object.",
      "Configure a Lambda function trigger with a failure condition. Specify Lambda function as the destination type. Specify the error-handling Lambda function's Amazon Resource Name (ARN) as the resource.",
      "Create a status check alarm on the initial Lambda function. Configure the alarm to invoke the error-handling Lambda function when the alarm is initiated. Ensure that the alarm passes the stack trace in the event object."
    ],
    "site_answers": [
      "Configure a Lambda function destination with a failure condition. Specify Lambda function as the destination type. Specify the error-handling Lambda function's Amazon Resource Name (ARN) as the resource."
    ]
  },
  {
    "question_text": "A company introduced a new feature that should be accessible to only a specific group of premium customers. A developer needs the ability to turn the feature on and off in response to performance and feedback. The developer needs a solution to validate and deploy these configurations quickly without causing any disruptions.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use AWS AppConfig to manage the feature configuration and to validate and deploy changes. Use feature flags to turn the feature on and off.",
      "Use AWS Secrets Manager to securely manage and validate the feature configurations. Enable lifecycle rules to turn the feature on and off.",
      "Use AWS Config to manage the feature configuration and validation. Set up AWS Config rules to turn the feature on and off based on predefined conditions.",
      "Use AWS Systems Manager Parameter Store to store and validate the configuration settings for the feature. Enable lifecycle rules to turn the feature on and off."
    ],
    "site_answers": [
      "Use AWS AppConfig to manage the feature configuration and to validate and deploy changes. Use feature flags to turn the feature on and off."
    ]
  },
  {
    "question_text": "A developer needs approval from a product owner before the developer can deploy code for an application to production. The developer uses AWS CodePipeline to deploy the application. The developer configures an Amazon Simple Notification Service (Amazon SNS) topic to send notifications to the product owner.\n\nWhich solution is the MOST operationally efficient way for the developer to receive approval from the product owner?",
    "question_type": "single",
    "choices": [
      "Add a new stage to CodePipeline before the production deployment. Add a manual approval action to the new stage. Add a new notification rule in the pipeline settings. Specify manual approval as the event that initiates the notification. Specify the SNS topic's Amazon Resource Name (ARN) to notify the product owner.",
      "Develop an AWS Step Functions state machine that sends a notification to the product owner and accepts an approval. Add a new stage to CodePipeline before the production deployment. Add the state machine as a Step Functions action to the new stage.",
      "Add a manual approval action to the existing production deployment stage in CodePipeline. Specify the SNS topic's Amazon Resource Name (ARN) while configuring the new manual approval action.",
      "Edit the settings in CodePipeline. Create a new notification rule. Specify manual approval as the event that initiates the notification. Create a new notification target. Specify the SNS topic to notify the product owner. Save the notification rule."
    ],
    "site_answers": [
      "Add a new stage to CodePipeline before the production deployment. Add a manual approval action to the new stage. Add a new notification rule in the pipeline settings. Specify manual approval as the event that initiates the notification. Specify the SNS topic's Amazon Resource Name (ARN) to notify the product owner."
    ]
  },
  {
    "question_text": "A developer is building a serverless application on AWS for a workflow that processes high volumes of data. In the workflow, an AWS Step Functions state machine invokes several AWS Lambda functions.\n\nOne of the Lambda functions occasionally fails because of timeout errors during periods of high demand. The developer must ensure that the workflow automatically retries the failed function invocation if a timeout error occurs.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Add a Retry field in the Step Functions state machine definition. Configure the state machine with the maximum number of retry attempts and the timeout error type to retry on.",
      "Add a Timeout field in the Step Functions state machine definition. Configure the state machine with the maximum number of retry attempts.",
      "Add a Fail state to the Step Functions state machine definition. Configure the state machine with the maximum number of retry attempts.",
      "Update the Step Functions state machine to pass the invocation request to an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe a Lambda function to the SNS topic. Configure the Lambda function with the maximum number of retry attempts for a timeout error type."
    ],
    "site_answers": [
      "Add a Retry field in the Step Functions state machine definition. Configure the state machine with the maximum number of retry attempts and the timeout error type to retry on."
    ]
  },
  {
    "question_text": "A company runs a serverless application on AWS. The application includes an AWS Lambda function. The Lambda function processes data and stores the data in an Amazon RDS for PostgreSQL database. A developer created a user credentials in the database for the application.\n\nThe developer needs to use AWS Secrets Manager to manage the user credentials. The password must to be rotated on a regular basis. The solution needs to ensure that there is high availability and no downtime for the application during secret rotation.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure managed rotation with the single user rotation strategy.",
      "Configure managed rotation with the alternating users rotation strategy.",
      "Configure automatic rotation with the single user rotation strategy.",
      "Configure automatic rotation with the alternating users rotation strategy."
    ],
    "site_answers": [
      "Configure automatic rotation with the alternating users rotation strategy."
    ]
  },
  {
    "question_text": "A company runs an application on AWS. The application consists of a static website that is hosted on Amazon S3. The application includes Amazon API Gateway APIs that invoke AWS Lambda functions. During a period of high traffic on the application, application users reported that the application was slow at irregular intervals. There were no failed requests.\n\nA developer needs to find the slow executions across all the Lambda functions.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Perform a query across all the Lambda function log groups by using Amazon CloudWatch Logs Insights. Filter on type of report and sort descending by Lambda function execution duration.",
      "Enable AWS CloudTrail Insights on the account where the Lambda functions are running. After CloudTrail Insights has finished processing, review CloudTrail Insights to find the anomalous functions.",
      "Enable AWS X-Ray for all the Lambda functions. Configure an X-Ray insight on a new group that includes all the Lambda functions. After the X-Ray insight has finished processing, review the X-Ray logs.",
      "Set up AWS Glue to crawl through the logs in Amazon CloudWatch Logs for the Lambda functions. Configure an AWS Glue job to transform the logs into a structured format and to output the logs into Amazon S3. Use the Amazon CloudWatch dashboard to visualize the slowest functions based on the duration."
    ],
    "site_answers": [
      "Enable AWS X-Ray for all the Lambda functions. Configure an X-Ray insight on a new group that includes all the Lambda functions. After the X-Ray insight has finished processing, review the X-Ray logs."
    ]
  },
  {
    "question_text": "A company is building a serverless application on AWS. The application uses Amazon API Gateway and AWS Lambda. The company wants to deploy the application to its development, test, and production environments.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Use API Gateway stage variables and create Lambda aliases to reference environment-specific resources.",
      "Use Amazon Elastic Container Service (Amazon ECS) to deploy the application to the environments.",
      "Duplicate the code for each environment. Deploy the code to a separate API Gateway stage.",
      "Use AWS Elastic Beanstalk to deploy the application to the environments."
    ],
    "site_answers": [
      "Use API Gateway stage variables and create Lambda aliases to reference environment-specific resources."
    ]
  },
  {
    "question_text": "A developer uses AWS CloudFormation to deploy an Amazon API Gateway API and an AWS Step Functions state machine. The state machine must reference the API Gateway API after the CloudFormation template is deployed. The developer needs a solution that uses the state machine to reference the API Gateway endpoint.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Configure the CloudFormation template to reference the API endpoint in the DefinitionSubstitutions property for the AWS::StepFunctions::StateMachine resource.",
      "Configure the CloudFormation template to store the API endpoint in an environment variable for the AWS::StepFunctions::StateMachine resource. Configure the state machine to reference the environment variable.",
      "Configure the CloudFormation template to store the API endpoint in a standard AWS::SecretsManager::Secret resource. Configure the state machine to reference the resource.",
      "Configure the CloudFormation template to store the API endpoint in a standard AWS::AppConfig::ConfigurationProfile resource. Configure the state machine to reference the resource."
    ],
    "site_answers": [
      "Configure the CloudFormation template to reference the API endpoint in the DefinitionSubstitutions property for the AWS::StepFunctions::StateMachine resource."
    ]
  },
  {
    "question_text": "A developer is building an application on AWS. The application includes an AWS Lambda function that processes messages from an Amazon Simple Queue Service (Amazon SQS) queue.\n\nThe Lambda function sometimes fails or times out. The developer needs to figure out why the Lambda function fails to process some messages.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Increase the maximum timeout of the Lambda function to 15 minutes. Check the AWS CloudTrail event history for error details.",
      "Increase the visibility timeout of the SQS queue. Check logs in Amazon CloudWatch Logs for error details.",
      "Create a dead-letter queue. Configure the Lambda function to send the failed messages to the dead-letter queue.",
      "Create an Amazon DynamoDB table. Update the Lambda function to send the failed messages to the DynamoDB table."
    ],
    "site_answers": [
      "Create a dead-letter queue. Configure the Lambda function to send the failed messages to the dead-letter queue."
    ]
  },
  {
    "question_text": "A developer needs to deploy an application in three AWS Regions by using AWS CloudFormation. Each Region will use an AWS Elastic Beanstalk environment with an Application Load Balancer (ALB). The developer wants to use AWS Certificate Manager (ACM) to deploy SSL certificates to each ALB.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a certificate in ACM in any one of the Regions. Import the certificate into the ALB that is in each Region.",
      "Create a global certificate in ACM. Update the CloudFormation template to deploy the global certificate to each ALB.",
      "Create a certificate in ACM in each Region. Import the certificate into the ALB for each Region.",
      "Create a certificate in ACM in the us-east-1 Region. Update the CloudFormation template to deploy the certificate to each ALB."
    ],
    "site_answers": [
      "Create a certificate in ACM in each Region. Import the certificate into the ALB for each Region."
    ]
  },
  {
    "question_text": "A company needs to deploy all its cloud resources by using AWS CloudFormation templates. A developer must create an Amazon Simple Notification Service (Amazon SNS) automatic notification to help enforce this rule. The developer creates an SNS topic and subscribes the email address of the company's security team to the SNS topic.\n\nThe security team must receive a notification immediately if an IAM role is created without the use of CloudFormation.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Create an AWS Lambda function to filter events from CloudTrail if a role was created without CloudFormation. Configure the Lambda function to publish to the SNS topic. Create an Amazon EventBridge schedule to invoke the Lambda function every 15 minutes.",
      "Create an AWS Fargate task in Amazon Elastic Container Service (Amazon ECS) to filter events from CloudTrail if a role was created without CloudFormation. Configure the Fargate task to publish to the SNS topic. Create an Amazon EventBridge schedule to run the Fargate task every 15 minutes.",
      "Launch an Amazon EC2 instance that includes a script to filter events from CloudTrail if a role was created without CloudFormation. Configure the script to publish to the SNS topic. Create a cron job to run the script on tile EC2 instance every 15 minutes.",
      "Create an Amazon EventBridge rule to filter events from CloudTrail if a role was created without CloudFormation. Specify the SNS topic as the target of the EventBridge rule."
    ],
    "site_answers": [
      "Create an Amazon EventBridge rule to filter events from CloudTrail if a role was created without CloudFormation. Specify the SNS topic as the target of the EventBridge rule."
    ]
  },
  {
    "question_text": "A company is adopting serverless computing for some of its new services. A development team needs to create a serverless infrastructure by using AWS Serverless Application Model (AWS SAM). All infrastructure must be deployed by using AWS CloudFormation templates.\n\nWhat should the development team do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add a Resources section to the CloudFormation templates that contains AWS::Lambda::Function resources.",
      "Add a Mappings section to the CloudFormation templates that contains AWS::Serverless::Function and AWS::Serverless::API.",
      "Add a Transform section to the CloudFormation templates. Use the AWS SAM syntax to define the resources.",
      "Add a Parameters section to the CloudFormation templates that specifies the relevant AWS SAM Globals section."
    ],
    "site_answers": [
      "Add a Transform section to the CloudFormation templates. Use the AWS SAM syntax to define the resources."
    ]
  },
  {
    "question_text": "A developer is building an application that invokes AWS Lambda functions asynchronously to process events. The developer notices that a Lambda function fails to process some events at random times. The developer needs to investigate the failed events and capture the events that the Lambda function fails to process.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Add an Amazon EventBridge rule for the Lambda function. Configure the EventBridge rule to react to failed events and to store the events in an Amazon DynamoDB table.",
      "Configure the Lambda function with a dead-letter queue based in Amazon Kinesis. Update the Lambda function's execution role with the required permissions.",
      "Configure the Lambda function with an Amazon Simple Queue Service (Amazon SQS) dead-letter queue. Update the Lambda function's execution role with the required permissions.",
      "Configure the Lambda function with an Amazon Simple Queue Service (Amazon SQS) FIFO dead-letter queue. Update the Lambda function's execution role with the required permissions."
    ],
    "site_answers": [
      "Configure the Lambda function with an Amazon Simple Queue Service (Amazon SQS) dead-letter queue. Update the Lambda function's execution role with the required permissions."
    ]
  },
  {
    "question_text": "A company has built a serverless application for its ecommerce website. The application includes a REST API in Amazon API Gateway that invokes an AWS Lambda function. The Lambda function processes data and stores the data in Amazon DynamoDB table. The Lambda function calls a third-party stock application API to process the order. After the ordered is processed, the Lambda function returns an HTTP 200 status code with no body to the client.\n\nDuring peak usage when the API calls exceeds a certain threshold, the third-party stock application sometimes fails to process the data and responds with error messages. The company needs a solution that will not overwhelm the third-party stock application.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure the REST API in API Gateway to write the requests directly into DynamoDB. Configure a DynamoDB intrinsic function to perform the transformation. Set up a DynamoDB stream to call the third-party stock application API with each new row. Delete the Lambda function.",
      "Configure the REST API in API Gateway to write the requests directly into an Amazon Simple Queue Service (Amazon SQS) queue. Configure the Lambda function with a reserved concurrency equal to the third-party stock application's threshold. Set Lambda function to process the messages from the SQS queue.",
      "Configure the REST API in API Gateway to write the requests directly into an Amazon Simple Notification Service (Amazon SNS) topic. Configure the Lambda function with a provisioned concurrency equal to the third-party stock application's threshold. Set the Lambda function to process the messages from the SNS topic.",
      "Configure the REST API in API Gateway to write the requests directly into Amazon Athena. Configure the transformation of the data by using SQL with multiple query result locations set up to point to the DynamoDB table and the third-party stock fulfilment application API. Delete the Lambda function."
    ],
    "site_answers": [
      "Configure the REST API in API Gateway to write the requests directly into an Amazon Simple Queue Service (Amazon SQS) queue. Configure the Lambda function with a reserved concurrency equal to the third-party stock application's threshold. Set Lambda function to process the messages from the SQS queue."
    ]
  },
  {
    "question_text": "A company hosts its application on AWS. The application runs on an Amazon Elastic Container Service (Amazon ECS) cluster that uses AWS Fargate. The cluster runs behind an Application Load Balancer. The application stores data in an Amazon Aurora database. A developer encrypts and manages database credentials inside the application.\n\nThe company wants to use a more secure credential storage method and implement periodic credential rotation.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Migrate the secret credentials to Amazon RDS parameter groups. Encrypt the parameter by using an AWS Key Management Service (AWS KMS) key. Turn on secret rotation. Use IAM policies and roles to grant AWS KMS permissions to access Amazon RDS.",
      "Migrate the credentials to AWS Systems Manager Parameter Store. Encrypt the parameter by using an AWS Key Management Service (AWS KMS) key. Turn on secret rotation. Use IAM policies and roles to grant Amazon ECS Fargate permissions to access to AWS Secrets Manager.",
      "Migrate the credentials to ECS Fargate environment variables. Encrypt the credentials by using an AWS Key Management Service (AWS KMS) key. Turn on secret rotation. Use IAM policies and roles to grant Amazon ECS Fargate permissions to access to AWS Secrets Manager.",
      "Migrate the credentials to AWS Secrets Manager. Encrypt the credentials by using an AWS Key Management Service (AWS KMS) key. Turn on secret rotation. Use IAM policies and roles to grant Amazon ECS Fargate permissions to access to AWS Secrets Manager by using keys."
    ],
    "site_answers": [
      "Migrate the credentials to AWS Secrets Manager. Encrypt the credentials by using an AWS Key Management Service (AWS KMS) key. Turn on secret rotation. Use IAM policies and roles to grant Amazon ECS Fargate permissions to access to AWS Secrets Manager by using keys."
    ]
  },
  {
    "question_text": "A company has a mobile app. The app includes an Amazon API Gateway REST API that invokes AWS Lambda functions. The Lambda functions process data from the app.\n\nThe company needs to test updated Lambda functions that have new features. The company must conduct these tests with a subset of users before deployment. The tests must not affect other users of the app.\n\nWhich solution will meet these requirements with the LEAST amount of operational effort?",
    "question_type": "single",
    "choices": [
      "Create a new version of each Lambda function with a weighted alias. Configure a weight value for each version of the Lambda function. Update the new weighted alias Amazon Resource Name (ARN) in the REST API.",
      "Create a new REST API in API Gateway. Set up a Lambda proxy integration to connect to multiple Lambda functions. Enable canary settings on the deployment stage. Specify a smaller percentage of API traffic to go to the new version of the Lambda function.",
      "Create a new version of each Lambda function. Integrate a predefined canary deployment in AWS CodeDeploy to slowly shift the traffic to the new versions automatically.",
      "Create a new REST API in API Gateway. Set up a Lambda non-proxy integration to connect to multiple Lambda functions. Specify the necessary parameters and properties in API Gateway. Enable canary settings on the deployment stage. Specify a smaller percentage of API traffic to go to the new version of the Lambda function."
    ],
    "site_answers": [
      "Create a new REST API in API Gateway. Set up a Lambda proxy integration to connect to multiple Lambda functions. Enable canary settings on the deployment stage. Specify a smaller percentage of API traffic to go to the new version of the Lambda function."
    ]
  },
  {
    "question_text": "A developer works for a company that only has a single pre-production AWS account with an AWS CloudFormation AWS Serverless Application Model (AWS SAM) stack. The developer made changes to an existing AWS Lambda function specified in the AWS SAM template and additional Amazon Simple Notification service (Amazon SNS) topics.\n\nThe developer wants to do a one-time deploy of the changes to test if the changes are working. The developer does not want to impact the existing pre-production application that is currently being used by other team members as part of the release pipeline.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use the AWS SAM CLI to package and deploy the SAM application to the pre-production AWS account. Specify the debug parameter.",
      "Use the AWS SAM CLI to package and create a change set against the pre-production AWS account. Execute the change set in a new AWS account designated for a development environment.",
      "Use the AWS SAM CLI to package and deploy the SAM application to a new AWS account designated for a development environment.",
      "Update the CloudFormation stack in the pre-production account. Add a separate stage that points to a new AWS account designated for a development environment."
    ],
    "site_answers": [
      "Use the AWS SAM CLI to package and deploy the SAM application to a new AWS account designated for a development environment."
    ]
  },
  {
    "question_text": "A company built an online event platform. For each event, the company organizes quizzes and generates leaderboards that are based on the quiz scores. The company stores the leaderboard data in Amazon DynamoDB and retains the data for 30 days after an event is complete. The company then uses a scheduled job to delete the old leaderboard data.\n\nThe DynamoDB table is configured with a fixed write capacity. During the months when many events occur, the DynamoDB write API requests are throttled when the scheduled delete job runs.\n\nA developer must create a long-term solution that deletes the old leaderboard data and optimizes write throughput.\n\nWhich solution meets these requirements?",
    "question_type": "single",
    "choices": [
      "Configure a TTL attribute for the leaderboard data.",
      "Use DynamoDB Streams to schedule and delete the leaderboard data.",
      "Use AWS Step Functions to schedule and delete the leaderboard data.",
      "Set a higher write capacity when the scheduled delete job runs."
    ],
    "site_answers": [
      "Configure a TTL attribute for the leaderboard data."
    ]
  },
  {
    "question_text": "A company uses an AWS Lambda function that reads messages from an Amazon Simple Queue Service (Amazon SQS) standard queue. The Lambda function makes an HTTP call to a third-party API for each message. The company wants to ensure that the Lambda function does not overwhelm the third-party API with more than two concurrent requests.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure a provisioned concurrency of two on the Lambda function.",
      "Configure a batch size of two on the Amazon SQS event source mapping for the Lambda function.",
      "Configure Lambda event filtering to process two messages from Amazon SQS at every invocations.",
      "Configure a maximum concurrency of two on the Amazon SQS event source mapping for the Lambda function."
    ],
    "site_answers": [
      "Configure a maximum concurrency of two on the Amazon SQS event source mapping for the Lambda function."
    ]
  },
  {
    "question_text": "A company is using Amazon API Gateway to develop an API for its application on AWS. A developer needs to test and generate API responses. Other teams are required to test the API immediately.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Set up a mock integration request in API Gateway. Configure the method's integration request and integration response to associate a response with a given status code.",
      "Set up the request validators in the API's OpenAPI definition file. Import the OpenAPI definitions into API Gateway to test the API.",
      "Set up a gateway response for the API in API Gateway. Configure response headers with hardcoded HTTP status codes and responses.",
      "Set up a request parameter-based Lambda authorizer to control access to the API. Configure the Lambda function with the necessary mapping template."
    ],
    "site_answers": [
      "Set up a mock integration request in API Gateway. Configure the method's integration request and integration response to associate a response with a given status code."
    ]
  },
  {
    "question_text": "A company is releasing a new feature. Users can request early access to the new feature by using an application form. The company expects a surge of requests when the application form becomes available. Each request will be stored as an item in an Amazon DynamoDB table.\n\nEach item will contain the user's username, the submission date, and a validation status of UNVALIDATED. VALID, or NOT VALID. Each item also will contain the user's rating of the process on a scale of 1 to 5.\n\nEach user can submit one request. For the DynamoDB table, the developer must choose a partition key that will give the workload well-distributed records across partitions.\n\nWhich DynamoDB attribute will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Username",
      "Submission date",
      "Validation status",
      "Rating of the process on a scale of 1 to 5"
    ],
    "site_answers": [
      "Username"
    ]
  },
  {
    "question_text": "A developer is creating a publicly accessible enterprise website consisting of only static assets. The developer is hosting the website in Amazon S3 and serving the website to users through an Amazon CloudFront distribution. The users of this application must not be able to access the application content directly from an S3 bucket. All content must be served through the Amazon CloudFront distribution.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a new origin access control (OAC) in CloudFront. Configure the CloudFront distribution's origin to use the new OAC. Update the S3 bucket policy to allow CloudFront OAC with read and write access to access Amazon S3 as the origin.",
      "Update the S3 bucket settings. Enable the block all public access setting in Amazon S3. Configure the CloudFront distribution's with Amazon S3 as the origin. Update the S3 bucket policy to allow CloudFront write access.",
      "Update the S3 bucket's static website settings. Enable static website hosting and specifying index and error documents. Update the CloudFront origin to use the S3 bucket's website endpoint.",
      "Update the CloudFront distribution's origin to send a custom header. Update the S3 bucket policy with a condition by using the aws:RequestTag/tag-key key. Configure the tag-key as the custom header name, and the value being matched is the header's value."
    ],
    "site_answers": [
      "Create a new origin access control (OAC) in CloudFront. Configure the CloudFront distribution's origin to use the new OAC. Update the S3 bucket policy to allow CloudFront OAC with read and write access to access Amazon S3 as the origin."
    ]
  },
  {
    "question_text": "A developer built an application that calls an external API to obtain data, processes the data, and saves the result to Amazon S3. The developer built a container image with all of the necessary dependencies to run the application as a container.\n\nThe application runs locally and requires minimal CPU and RAM resources. The developer has created an Amazon ECS cluster. The developer needs to run the application hourly in Amazon Elastic Container Service (Amazon ECS).\n\nWhich solution will meet these requirements with the LEAST amount of infrastructure management overhead?",
    "question_type": "single",
    "choices": [
      "Add a capacity provider to manage instances.",
      "Add an Amazon EC2 instance that runs the application.",
      "Define a task definition with an AWS Fargate launch type.",
      "Create an Amazon ECS cluster and add the managed node groups feature to run the application."
    ],
    "site_answers": [
      "Define a task definition with an AWS Fargate launch type."
    ]
  },
  {
    "question_text": "A company runs its website on AWS. The company posts daily polls on its website and publishes the poll results next day. The website stores user responses in an Amazon DynamoDB table. After the poll results are published, the company does not need to keep the user responses.\n\nA developer needs to implement a solution that will automatically remove old user responses from the DynamoDB table. The developer adds a new expiration_date attribute to the DynamoDB table. The developer plans to use the expiration_date attribute for the automation.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Create an AWS Lambda function to delete old user responses based on the expiration_date attribute. Create an Amazon EventBridge schedule to run the Lambda function daily.",
      "Create an AWS Fargate task in Amazon Elastic Container Service (Amazon ECS) to delete old user responses based on the expiration_date attribute. Create an Amazon EventBridge schedule to run the Fargate task daily.",
      "Create an AWS Glue job to delete old user responses based on the expiration_date attribute. Create an AWS Glue trigger schedule to run the job daily.",
      "Enable TTL on the DynamoDB table and specify the expiration_date attribute. Expire old user responses by using DynamoDB TTL."
    ],
    "site_answers": [
      "Enable TTL on the DynamoDB table and specify the expiration_date attribute. Expire old user responses by using DynamoDB TTL."
    ]
  },
  {
    "question_text": "A developer is creating a simple proof-of-concept demo by using AWS CloudFormation and AWS Lambda functions. The demo will use a CloudFormation template to deploy an existing Lambda function. The Lambda function uses deployment packages and dependencies stored in Amazon S3. The developer defined an AWS::Lambda::Function resource in a CloudFormation template. The developer needs to add the S3 bucket to the CloudFormation template.\n\nWhat should the developer do to meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Add the function code in the CloudFormation template inline as the code property.",
      "Add the function code in the CloudFormation template as the ZipFile property.",
      "Find the S3 key for the Lambda function. Add the S3 key as the ZipFile property in the CloudFormation template.",
      "Add the relevant key and bucket to the S3Bucket and S3Key properties in the CloudFormation template."
    ],
    "site_answers": [
      "Add the relevant key and bucket to the S3Bucket and S3Key properties in the CloudFormation template."
    ]
  },
  {
    "question_text": "A developer is building a microservices-based application by using Python on AWS and several AWS services. The developer must use AWS X-Ray. The developer views the service map by using the console to view the service dependencies. During testing, the developer notices that some services are missing from the service map.\n\nWhat can the developer do to ensure that all services appear in the X-Ray service map?",
    "question_type": "single",
    "choices": [
      "Modify the X-Ray Python agent configuration in each service to increase the sampling rate.",
      "Instrument the application by using the X-Ray SDK for Python. Install the X-Ray SDK for all the services that the application uses.",
      "Enable X-Ray data aggregation in Amazon CloudWatch Logs for all the services that the application uses.",
      "Increase the X-Ray service map timeout value in the X-Ray console."
    ],
    "site_answers": [
      "Instrument the application by using the X-Ray SDK for Python. Install the X-Ray SDK for all the services that the application uses."
    ]
  },
  {
    "question_text": "A developer is building a containerized application on AWS. The application communicates with a third-party service by using API keys. The developer needs a secure way to store the API keys and pass the API keys to the containerized application.\n\nWhich solutions will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Store the API keys as a SecureString parameter in AWS Systems Manager Parameter Store. Grant the application access to retrieve the value from Parameter Store.",
      "Store the API keys in AWS CloudFormation templates by using base64 encoding. Pass the API keys to the application through container definition environment variables.",
      "Add a new AWS CloudFormation parameter to the CloudFormation template. Pass the API keys to the application by using the container definition environment variables.",
      "Embed the API keys in the application. Build the container image on-premises. Upload the container image to Amazon Elastic Container Registry (Amazon ECR).",
      "Store the API keys as a SecretString parameter in AWS Secrets Manager. Grant the application access to retrieve the value from Secrets Manager."
    ],
    "site_answers": [
      "Store the API keys as a SecureString parameter in AWS Systems Manager Parameter Store. Grant the application access to retrieve the value from Parameter Store.",
      "Store the API keys as a SecretString parameter in AWS Secrets Manager. Grant the application access to retrieve the value from Secrets Manager."
    ]
  },
  {
    "question_text": "A company runs an application on AWS. The application stores data in an Amazon DynamoDB table. Some queries are taking a long time to run. These slow queries involve an attribute that is not the table's partition key or sort key.\n\nThe amount of data that the application stores in the DynamoDB table is expected to increase significantly. A developer must increase the performance of the queries.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Increase the page size for each request by setting the Limit parameter to be higher than the default value. Configure the application to retry any request that exceeds the provisioned throughput.",
      "Create a global secondary index (GSI). Set query attribute to be the partition key of the index.",
      "Perform a parallel scan operation by issuing individual scan requests. In the parameters, specify the segment for the scan requests and the total number of segments for the parallel scan.",
      "Turn on read capacity auto scaling for the DynamoDB table. Increase the maximum read capacity units (RCUs)."
    ],
    "site_answers": [
      "Create a global secondary index (GSI). Set query attribute to be the partition key of the index."
    ]
  },
  {
    "question_text": "A company runs a payment application on Amazon EC2 instances behind an Application Load Balance. The EC2 instances run in an Auto Scaling group across multiple Availability Zones. The application needs to retrieve application secrets during the application startup and export the secrets as environment variables. These secrets must be encrypted at rest and need to be rotated every month.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Save the secrets in a text file and store the text file in Amazon S3. Provision a customer managed key. Use the key for secret encryption in Amazon S3. Read the contents of the text file and read the export as environment variables. Configure S3 Object Lambda to rotate the text file every month.",
      "Save the secrets as strings in AWS Systems Manager Parameter Store and use the default AWS Key Management Service (AWS KMS) key. Configure an Amazon EC2 user data script to retrieve the secrets during the startup and export as environment variables. Configure an AWS Lambda function to rotate the secrets in Parameter Store every month.",
      "Save the secrets as base64 encoded environment variables in the application properties. Retrieve the secrets during the application startup. Reference the secrets in the application code. Write a script to rotate the secrets saved as environment variables.",
      "Store the secrets in AWS Secrets Manager. Provision a new customer master key. Use the key to encrypt the secrets. Enable automatic rotation. Configure an Amazon EC2 user data script to programmatically retrieve the secrets during the startup and export as environment variables."
    ],
    "site_answers": [
      "Store the secrets in AWS Secrets Manager. Provision a new customer master key. Use the key to encrypt the secrets. Enable automatic rotation. Configure an Amazon EC2 user data script to programmatically retrieve the secrets during the startup and export as environment variables."
    ]
  },
  {
    "question_text": "A company is using Amazon API Gateway to invoke a new AWS Lambda function. The company has Lambda function versions in its PROD and DEV environments. In each environment, there is a Lambda function alias pointing to the corresponding Lambda function version. API Gateway has one stage that is configured to point at the PROD alias.\n\nThe company wants to configure API Gateway to enable the PROD and DEV Lambda function versions to be simultaneously and distinctly available.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Enable a Lambda authorizer for the Lambda function alias in API Gateway. Republish PROD and create a new stage for DEV. Create API Gateway stage variables for the PROD and DEV stages. Point each stage variable to the PROD Lambda authorizer to the DEV Lambda authorizer.",
      "Set up a gateway response in API Gateway for the Lambda function alias. Republish PROD and create a new stage for DEV. Create gateway responses in API Gateway for PROD and DEV Lambda aliases.",
      "Use an environment variable for the Lambda function alias in API Gateway. Republish PROD and create a new stage for development. Create API gateway environment variables for PROD and DEV stages. Point each stage variable to the PROD Lambda function alias to the DEV Lambda function alias.",
      "Use an API Gateway stage variable to configure the Lambda function alias. Republish PROD and create a new stage for development. Create API Gateway stage variables for PROD and DEV stages. Point each stage variable to the PROD Lambda function alias and to the DEV Lambda function alias."
    ],
    "site_answers": [
      "Use an API Gateway stage variable to configure the Lambda function alias. Republish PROD and create a new stage for development. Create API Gateway stage variables for PROD and DEV stages. Point each stage variable to the PROD Lambda function alias and to the DEV Lambda function alias."
    ]
  },
  {
    "question_text": "A developer is working on an ecommerce platform that communicates with several third-party payment processing APIs. The third-party payment services do not provide a test environment.\n\nThe developer needs to validate the ecommerce platform's integration with the third-party payment processing APIs. The developer must test the API integration code without invoking the third-party payment processing APIs.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Set up an Amazon API Gateway REST API with a gateway response configured for status code 200. Add response templates that contain sample responses captured from the real third-party API.",
      "Set up an AWS AppSync GraphQL API with a data source configured for each third-party API. Specify an integration type of Mock. Configure integration responses by using sample responses captured from the real third-party API.",
      "Create an AWS Lambda function for each third-party API. Embed responses captured from the real third-party API. Configure Amazon Route 53 Resolver with an inbound endpoint for each Lambda function's Amazon Resource Name (ARN).",
      "Set up an Amazon API Gateway REST API for each third-party API. Specify an integration request type of Mock. Configure integration responses by using sample responses captured from the real third-party API."
    ],
    "site_answers": [
      "Set up an Amazon API Gateway REST API for each third-party API. Specify an integration request type of Mock. Configure integration responses by using sample responses captured from the real third-party API."
    ]
  },
  {
    "question_text": "A developer is storing many objects in a single Amazon S3 bucket. The developer needs to optimize the S3 bucket for high request rates.\n\nHow should the developer store the objects to meet this requirement?",
    "question_type": "single",
    "choices": [
      "Store the objects by using S3 Intelligent-Tiering.",
      "Store the objects at the root of the S3 bucket.",
      "Store the objects by using object key names distributed across multiple prefixes.",
      "Store each object with an object tag named \"prefix\" that contains a unique value."
    ],
    "site_answers": [
      "Store the objects by using object key names distributed across multiple prefixes."
    ]
  },
  {
    "question_text": "A company deploys a new application to AWS. The company is streaming application logs to Amazon CloudWatch Logs. The company's development team must receive notification by email when the word \"ERROR\" appears in any log lines. A developer sets up an Amazon Simple Notification Service (Amazon SNS) topic and subscribes the development team to the topic.\n\nWhat should the developer do next to meet the requirements?",
    "question_type": "single",
    "choices": [
      "Select the appropriate log group. Create a CloudWatch metric filter with \"ERROR\" as the search term. Create an alarm on this metric that notifies the SNS topic when the metric is 1 or higher.",
      "In CloudWatch Logs Insights, select the appropriate log group. Create a metric query to search for the term \"ERROR\" in the logs. Create an alarm on this metric that notifies the SNS topic when the metric is 1 or higher.",
      "Select the appropriate log group. Create an SNS subscription filter with \"ERROR\" as the filter pattern. Select the SNS topic as the destination.",
      "Create a CloudWatch alarm that includes \"ERROR\" as a filter pattern, a log group dimension that defines the appropriate log group, and a destination that notifies the SNS topic."
    ],
    "site_answers": [
      "Select the appropriate log group. Create a CloudWatch metric filter with \"ERROR\" as the search term. Create an alarm on this metric that notifies the SNS topic when the metric is 1 or higher."
    ]
  },
  {
    "question_text": "A company uses Amazon Simple Queue Service (Amazon SQS) to decouple its microservices architecture. Some messages in an SQS queue contain sensitive information. A developer must implement a solution that encrypts all the data at rest.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Enable server-side encryption for the SQS queue by using an SQS managed encryption key (SSE-SQS).",
      "Use the aws:SecureTransport condition in the queue policy to ensure that only HTTPS (TLS) is used for all requests to the SQS queue.",
      "Use AWS Certificate Manager (ACM) to generate an SSL/TLS certificate. Reference the certificate when messages are sent to the queue.",
      "Set a message attribute in the SQS SendMessage request for messages that are sent to the queue. Set the Name to ENCRYPT. Set the Value to TRUE."
    ],
    "site_answers": [
      "Enable server-side encryption for the SQS queue by using an SQS managed encryption key (SSE-SQS)."
    ]
  },
  {
    "question_text": "A company recently deployed a new serverless user portal. Users have reported that part of the portal is slow. The initial analysis found a single Amazon API Gateway endpoint that is responsible for the performance issues. The endpoint integrates with an AWS Lambda function. However, the Lambda function interacts with other APIs and AWS services.\n\nHow can a developer find the source of the increased response time by using operational best practices?",
    "question_type": "single",
    "choices": [
      "Update the Lambda function by adding logging statements with high-precision timestamps before and after each external request. Deploy the updated Lambda function. After accumulating enough usage data, examine the Amazon CloudWatch logs for the Lambda function to determine the likely sources for the increased response time.",
      "Instrument the Lambda function with the AWS X-Ray SDK. Add HTTP and HTTPS interceptors and SDK client handlers. Deploy the updated Lambda function. Turn on X-Ray tracing. After accumulating enough usage data, use the X-Ray service map to examine the average response times to determine the likely sources.",
      "Review the Lambda function's Amazon CloudWatch metrics by using the metrics explorer. Apply anomaly detection to the Duration metric and the Throttles metric. Review the anomalies to determine the likely sources.",
      "Use Amazon CloudWatch Synthetics to create a new canary. Turn on AWS X-Ray tracing on the canary. Configure the canary to scan the user portal. After accumulating enough usage data, use the CloudWatch Synthetics canary dashboard to view the metrics from the canary."
    ],
    "site_answers": [
      "Instrument the Lambda function with the AWS X-Ray SDK. Add HTTP and HTTPS interceptors and SDK client handlers. Deploy the updated Lambda function. Turn on X-Ray tracing. After accumulating enough usage data, use the X-Ray service map to examine the average response times to determine the likely sources."
    ]
  },
  {
    "question_text": "A developer is building an event-driven application by using AWS Lambda and Amazon EventBridge. The Lambda function needs to push events to an EventBridge event bus. The developer uses an SDK to run the PutEvents EventBridge action and specifies no credentials in the code. After deploying the Lambda function, the developer notices that the function is failing and there are AccessDeniedException errors in the logs.\n\nHow should the developer resolve this issue?",
    "question_type": "single",
    "choices": [
      "Configure a VPC peering connection between the Lambda function and EventBridge.",
      "Modify their AWS credentials to include permissions for the PutEvents EventBridge action.",
      "Modify the Lambda function execution role to include permissions for the PutEvents EventBridge action.",
      "Add a resource-based policy to the Lambda function to include permissions for the PutEvents EventBridge action."
    ],
    "site_answers": [
      "Modify the Lambda function execution role to include permissions for the PutEvents EventBridge action."
    ]
  },
  {
    "question_text": "A company's application has an AWS Lambda function that processes messages from IoT devices. The company wants to monitor the Lambda function to ensure that the Lambda function is meeting its required service level agreement (SLA).\n\nA developer must implement a solution to determine the application's throughput in near real time. The throughput must be based on the number of messages that the Lambda function receives and processes in a given time period. The Lambda function performs initialization and post-processing steps that must not factor into the throughput measurement.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use the Lambda function's ConcurrentExecutions metric in Amazon CloudWatch to measure the throughput.",
      "Modify the application to log the calculated throughput to Amazon CloudWatch Logs. Use Amazon EventBridge to invoke a separate Lambda function to process the logs on a schedule.",
      "Modify the application to publish custom Amazon CloudWatch metrics when the Lambda function receives and processes each message. Use the metrics to calculate the throughput.",
      "Use the Lambda function's Invocations metric and Duration metric to calculate the throughput in Amazon CloudWatch."
    ],
    "site_answers": [
      "Modify the application to publish custom Amazon CloudWatch metrics when the Lambda function receives and processes each message. Use the metrics to calculate the throughput."
    ]
  },
  {
    "question_text": "A developer is using an AWS CodePipeline pipeline to provide continuous integration and continuous delivery (CI/CD) support for a Java application. The developer needs to update the pipeline to support the introduction of a new application dependency .jar file. The pipeline must start a build when a new version of the .jar file becomes available.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon S3 bucket to store the dependency .jar file. Publish the dependency .jar file to the S3 bucket. Use an Amazon Simple Notification Service (Amazon SNS) notification to start a CodePipeline pipeline build.",
      "Create an Amazon Elastic Container Registry (Amazon ECR) private repository. Publish the dependency .jar file to the repository. Use an ECR source action to start a CodePipeline pipeline build.",
      "Create an Amazon Elastic Container Registry (Amazon ECR) private repository. Publish the dependency .jar file to the repository. Use an Amazon Simple Notification Service (Amazon SNS) notification to start a CodePipeline pipeline build.",
      "Create an AWS CodeArtifact repository. Publish the dependency .jar file to the repository. Use an Amazon EventBridge rule to start a CodePipeline pipeline build."
    ],
    "site_answers": [
      "Create an AWS CodeArtifact repository. Publish the dependency .jar file to the repository. Use an Amazon EventBridge rule to start a CodePipeline pipeline build."
    ]
  },
  {
    "question_text": "A company with multiple branch locations has an analytics and reporting application. Each branch office pushes a sales report to a shared Amazon S3 bucket at a predefined time each day. The company has developed an AWS Lambda function that analyzes the reports from all branch offices in a single pass. The Lambda function stores the results in a database.\n\nThe company needs to start the analysis once each day at a specific time.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Configure an S3 event notification to invoke the Lambda function when a branch office uploads a sales report.",
      "Create an AWS Step Functions state machine that invokes the Lambda function once each day at the predefined time.",
      "Configure the Lambda function to run continuously and to begin analysis only at the predefined time each day.",
      "Create an Amazon EventBridge scheduled rule that invokes the Lambda function once each day at the predefined time."
    ],
    "site_answers": [
      "Create an Amazon EventBridge scheduled rule that invokes the Lambda function once each day at the predefined time."
    ]
  },
  {
    "question_text": "A developer has an application that asynchronously invokes an AWS Lambda function. The developer wants to store messages that resulted in failed invocations of the Lambda function so that the application can retry the call later.\n\nWhat should the developer do to accomplish this goal with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Set up Amazon CloudWatch Logs log groups to filter and store the messages in an Amazon S3 bucket. Import the messages in Lambda. Run the Lambda function again.",
      "Configure Amazon EventBridge to send the messages to Amazon Simple Notification Service (Amazon SNS) to initiate the Lambda function again.",
      "Implement a dead-letter queue for discarded messages. Set the dead-letter queue as an event source for the Lambda function.",
      "Send Amazon EventBridge events to an Amazon Simple Queue Service (Amazon SQS) queue. Configure the Lambda function to pull messages from the SQS queue. Run the Lambda function again."
    ],
    "site_answers": [
      "Implement a dead-letter queue for discarded messages. Set the dead-letter queue as an event source for the Lambda function."
    ]
  },
  {
    "question_text": "A company is using AWS CloudFormation templates to deploy AWS resources. The company needs to update one of its AWS CloudFormation stacks.\n\nWhat can the company do to find out how the changes will impact the resources that are running?",
    "question_type": "single",
    "choices": [
      "Investigate the change sets.",
      "Investigate the stack policies.",
      "Investigate the Metadata section.",
      "Investigate the Resources section."
    ],
    "site_answers": [
      "Investigate the change sets."
    ]
  },
  {
    "question_text": "A company stores all personally identifiable information (PII) in an Amazon DynamoDB table named PII in Account A. Developers are working on an application that is running on Amazon EC2 instances in Account B. The application in Account B requires access to the PII table.\n\nAn administrator in Account A creates an IAM role named AccessPII that has permission to access the PII table. The administrator also creates a trust policy that specifies Account B as a principal that can assume the role.\n\nWhich combination of steps should the developers take in Account B to allow their application to access the PII table? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Allow the EC2 IAM role the permission to assume the AccessPII role.",
      "Allow the EC2 IAM role the permission to access the PII table.",
      "Include the AWS API in the application code logic to obtain temporary credentials from the EC2 IAM role to access the PII table.",
      "Include the AssumeRole API operation in the application code logic to obtain temporary credentials to access the PII table.",
      "Include the GetSessionToken API operation in the application code logic to obtain temporary credentials to access the PII table."
    ],
    "site_answers": [
      "Allow the EC2 IAM role the permission to assume the AccessPII role.",
      "Include the AssumeRole API operation in the application code logic to obtain temporary credentials to access the PII table."
    ]
  },
  {
    "question_text": "A gaming website gives users the ability to trade game items with each other on the platform. The platform requires both users' records to be updated and persisted in one transaction. If any update fails, the transaction must roll back.\n\nWhich AWS solutions can provide the transactional capability that is required for this feature? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Amazon DynamoDB with operations made with the ConsistentRead parameter set to true",
      "Amazon ElastiCache for Memcached with operations made within a transaction block",
      "Amazon DynamoDB with reads and writes made by using Transact* operations",
      "Amazon Aurora MySQL with operations made within a transaction block",
      "Amazon Athena with operations made within a transaction block"
    ],
    "site_answers": [
      "Amazon DynamoDB with reads and writes made by using Transact* operations",
      "Amazon Aurora MySQL with operations made within a transaction block"
    ]
  },
  {
    "question_text": "A developer is deploying an application in the AWS Cloud by using AWS CloudFormation. The application will connect to an existing Amazon RDS database. The hostname of the RDS database is stored in AWS Systems Manager Parameter Store as a plaintext value. The developer needs to incorporate the database hostname into the CloudFormation template to initialize the application when the stack is created.\n\nHow should the developer reference the parameter that contains the database hostname?",
    "question_type": "single",
    "choices": [
      "Use the ssm dynamic reference.",
      "Use the Ref intrinsic function.",
      "Use the Fn::ImportValue intrinsic function.",
      "Use the ssm-secure dynamic reference."
    ],
    "site_answers": [
      "Use the ssm dynamic reference."
    ]
  },
  {
    "question_text": "A company uses an AWS Lambda function to call a third-party service. The third-party service has a limit of requests each minute. If the number of requests exceeds the limit, the third-party service returns rate-limiting errors.\n\nA developer needs to configure the Lambda function to avoid receiving rate limiting errors from the third-party service.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Set the reserved concurrency on the Lambda function to match the number of concurrent requests that the third-party service allows.",
      "Decrease the memory that is allocated to the Lambda function.",
      "Set the provisioned concurrency on the Lambda function to match the number of concurrent requests that the third-party service allows.",
      "Increase the timeout value that is specified on the Lambda function."
    ],
    "site_answers": [
      "Set the reserved concurrency on the Lambda function to match the number of concurrent requests that the third-party service allows."
    ]
  },
  {
    "question_text": "A developer is building a new containerized application by using AWS Copilot. The developer uses the AWS Copilot command line interface (CLI) to deploy the application during development. The developer committed the application code to a new AWS CodeCommit repository. The developer must create an automated deployment process before releasing the new application to production.\n\nWhat should the developer do to meet these requirements in the MOST operationally efficient way?",
    "question_type": "single",
    "choices": [
      "Create a buildspec file that invokes the AWS Copilot CLI commands to build and deploy the application. Use the AWS Copilot CLI to create an AWS CodePipeline that uses the CodeCommit repository in the source stage and AWS CodeBuild in the build stage.",
      "Use the AWS Serverless Application Model (AWS SAM) CLI to bootstrap and initialize an AWS CodePipeline configuration. Use the CodeCommit repository as the source. Invoke the AWS Copilot CLI to build and deploy the application.",
      "Use the AWS Copilot CLI to define the AWS Copilot pipeline and to deploy the AWS CodePipeline. Select CodeCommit as the source for the AWS CodePipeline.",
      "Define an AWS CloudFormation template for an AWS CodePipeline with CodeCommit as the source. Configure the template as an AWS Copilot CLI add-on. Use the AWS Copilot CLI to deploy the application."
    ],
    "site_answers": [
      "Use the AWS Copilot CLI to define the AWS Copilot pipeline and to deploy the AWS CodePipeline. Select CodeCommit as the source for the AWS CodePipeline."
    ]
  },
  {
    "question_text": "A developer is creating a new application for a pet store. The application will manage customer rewards points. The developer will use Amazon DynamoDB to store the data for the application. The developer needs to optimize query performance and limit partition overload before actual performance analysis.\n\nWhich option should the developer use for a partition key to meet these requirements?",
    "question_type": "single",
    "choices": [
      "A randomly generated universally unique identifier (UUID)",
      "The customer's full name",
      "The date when the customer signed up for the rewards program",
      "The name of the customer's pet"
    ],
    "site_answers": [
      "A randomly generated universally unique identifier (UUID)"
    ]
  },
  {
    "question_text": "A developer uses AWS IAM Identity Center (AWS Single Sign-On) to interact with the AWS CLI and AWS SDKs on a local workstation. API calls to AWS services were working when the SSO access was first configured. However, the developer is now receiving Access Denied errors. The developer has not changed any configuration files or scripts that were previously working on the workstation.\n\nWhat is the MOST likely cause of the developer's access issue?",
    "question_type": "single",
    "choices": [
      "The access permissions to the developer's AWS CLI binary file have changed.",
      "The permission set that is assumed by IAM Identity Center does not have the necessary permissions to complete the API call.",
      "The credentials from the IAM Identity Center federated role have expired.",
      "The developer is attempting to make API calls to the incorrect AWS account."
    ],
    "site_answers": [
      "The credentials from the IAM Identity Center federated role have expired."
    ]
  },
  {
    "question_text": "A company is building a serverless application. The application uses an API key to authenticate with a third-party application. The company wants to store the external API key as a part of an AWS Lambda configuration. The company needs to have full control over the AWS Key Management Service (AWS KMS) keys that will encrypt the API key and should be visible only to authorized entities.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Store the API key in AWS Systems Manager Parameter Store as a string parameter. Use the default AWS KMS key that AWS provides to encrypt the API key.",
      "Store the API key in AWS Lambda environment variables. Create an AWS KMS customer managed key to encrypt the API key.",
      "Store the API key in the code repository. Use an AWS managed key to encrypt the code repository.",
      "Store the API key as an Amazon DynamoDB table record. Use an AWS managed key to encrypt the API key."
    ],
    "site_answers": [
      "Store the API key in AWS Lambda environment variables. Create an AWS KMS customer managed key to encrypt the API key."
    ]
  },
  {
    "question_text": "A developer is writing an application to analyze the traffic to a fleet of Amazon EC2 instances. The EC2 instances run behind a public Application Load Balancer (ALB). An HTTP server runs on each of the EC2 instances, logging all requests to a log file.\n\nThe developer wants to capture the client public IP addresses. The developer analyzes the log files and notices only the IP address of the ALB.\n\nWhat must the developer do to capture the client public IP addresses in the log file?",
    "question_type": "single",
    "choices": [
      "Add a Host header to the HTTP server log configuration file.",
      "Install the Amazon CloudWatch Logs agent on each EC2 instance. Configure the agent to write to the log file.",
      "Install the AWS X-Ray daemon on each EC2 instance. Configure the daemon to write to the log file.",
      "Add an X-Forwarded-For header to the HTTP server log configuration file."
    ],
    "site_answers": [
      "Add an X-Forwarded-For header to the HTTP server log configuration file."
    ]
  },
  {
    "question_text": "A company is developing a serverless application by using AWS Lambda functions. One of the Lambda functions needs to access an Amazon RDS DB instance. The DB instance is in a private subnet inside a VPC.\n\nThe company creates a role that includes the necessary permissions to access the DB instance. The company then assigns the role to the Lambda function. A developer must take additional action to give the Lambda function access to the DB instance.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Assign a public IP address to the DB instance. Modify the security group of the DB instance to allow inbound traffic from the IP address of the Lambda function.",
      "Set up an AWS Direct Connect connection between the Lambda function and the DB instance.",
      "Configure an Amazon CloudFront distribution to create a secure connection between the Lambda function and the DB instance.",
      "Configure the Lambda function to connect to the private subnets in the VPC. Add security group rules to allow traffic to the DB instance from the Lambda function."
    ],
    "site_answers": [
      "Configure the Lambda function to connect to the private subnets in the VPC. Add security group rules to allow traffic to the DB instance from the Lambda function."
    ]
  },
  {
    "question_text": "A developer needs temporary access to resources in a second account.\n\nWhat is the MOST secure way to achieve this?",
    "question_type": "single",
    "choices": [
      "Use the Amazon Cognito user pools to get short-lived credentials for the second account.",
      "Create a dedicated IAM access key for the second account, and send it by mail.",
      "Create a cross-account access role, and use sts:AssumeRole API to get short-lived credentials.",
      "Establish trust, and add an SSH key for the second account to the IAM user."
    ],
    "site_answers": [
      "Create a cross-account access role, and use sts:AssumeRole API to get short-lived credentials."
    ]
  },
  {
    "question_text": "A company wants to migrate applications from its on-premises servers to AWS. As a first step, the company is modifying and migrating a non-critical application to a single Amazon EC2 instance. The application will store information in an Amazon S3 bucket. The company needs to follow security best practices when deploying the application on AWS.\n\nWhich approach should the company take to allow the application to interact with Amazon S3?",
    "question_type": "single",
    "choices": [
      "Create an IAM role that has administrative access to AWS. Attach the role to the EC2 instance.",
      "Create an IAM user. Attach the AdministratorAccess policy. Copy the generated access key and secret key. Within the application code, use the access key and secret key along with the AWS SDK to communicate with Amazon S3.",
      "Create an IAM role that has the necessary access to Amazon S3. Attach the role to the EC2 instance.",
      "Create an IAM user. Attach a policy that provides the necessary access to Amazon S3. Copy the generated access key and secret key. Within the application code, use the access key and secret key along with the AWS SDK to communicate with Amazon S3."
    ],
    "site_answers": [
      "Create an IAM role that has the necessary access to Amazon S3. Attach the role to the EC2 instance."
    ]
  },
  {
    "question_text": "A company has an internal website that contains sensitive data. The company wants to make the website public. The company must ensure that only employees who authenticate through the company's OpenID Connect (OIDC) identity provider (IdP) can access the website. A developer needs to implement authentication without editing the website.\n\nWhich combination of steps will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Create a public Network Load Balancer.",
      "Create a public Application Load Balancer.",
      "Configure a listener for the load balancer that listens on HTTPS port 443. Add a default authenticate action providing the OIDC IdP configuration.",
      "Configure a listener for the load balancer that listens on HTTP port 80. Add a default authenticate action providing the OIDC IdP configuration.",
      "Configure a listener for the load balancer that listens on HTTPS port 443. Add a default AWS Lambda action providing an Amazon Resource Name (ARN) to a Lambda authentication function."
    ],
    "site_answers": [
      "Create a public Application Load Balancer.",
      "Configure a listener for the load balancer that listens on HTTPS port 443. Add a default authenticate action providing the OIDC IdP configuration."
    ]
  },
  {
    "question_text": "A developer is working on a web application that requires selective activation of specific features. The developer wants to keep the features hidden from end users until the features are ready for public access.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a feature flag configuration profile in AWS AppSync. Store the feature flag values in the configuration profile. Activate and deactivate feature flags as needed.",
      "Store prerelease data in an Amazon DynamoDB table. Enable Amazon DynamoDB Streams in the table. Toggle between hidden and visible states by using DynamoDB Streams.",
      "Create a feature flag configuration profile in AWS AppConfig. Store the feature flag values in the configuration profile. Activate and deactivate feature flags as needed.",
      "Store prerelease data in AWS Amplify DataStore. Toggle between hidden and visible states by using Amplify DataStore cloud synchronization."
    ],
    "site_answers": [
      "Create a feature flag configuration profile in AWS AppConfig. Store the feature flag values in the configuration profile. Activate and deactivate feature flags as needed."
    ]
  },
  {
    "question_text": "A developer at a company writes an AWS CloudFormation template. The template refers to subnets that were created by a separate AWS CloudFormation template that the company's network team wrote. When the developer attempts to launch the stack for the first time, the launch fails.\n\nWhich template coding mistakes could have caused this failure? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "The developer's template does not use the Ref intrinsic function to refer to the subnets.",
      "The developer's template does not use the ImportValue intrinsic function to refer to the subnets.",
      "The Mappings section of the developer's template does not refer to the subnets.",
      "The network team's template does not export the subnets in the Outputs section.",
      "The network team's template does not export the subnets in the Mappings section."
    ],
    "site_answers": [
      "The developer's template does not use the ImportValue intrinsic function to refer to the subnets.",
      "The network team's template does not export the subnets in the Outputs section."
    ]
  },
  {
    "question_text": "A developer is running an application on an Amazon EC2 instance. When the application tries to read an Amazon S3 bucket, the application fails. The developer notices that the associated IAM role is missing the S3 read permission. The developer needs to give the application the ability to read the S3 bucket.\n\nWhich solution will meet this requirement with the LEAST application disruption?",
    "question_type": "single",
    "choices": [
      "Add the permission to the role. Terminate the existing EC2 instance. Launch a new EC2 instance.",
      "Add the permission to the role so that the change will take effect automatically.",
      "Add the permission to the role. Hibernate and restart the existing EC2 instance.",
      "Add the permission to the S3 bucket. Restart the EC2 instance."
    ],
    "site_answers": [
      "Add the permission to the role so that the change will take effect automatically."
    ]
  },
  {
    "question_text": "A developer is writing a web application that is deployed on Amazon EC2 instances behind an internet-facing Application Load Balancer (ALB). The developer must add an Amazon CloudFront distribution in front of the ALB. The developer also must ensure that customer data from outside the VPC is encrypted in transit.\n\nWhich combination of CloudFront configuration settings should the developer use to meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Restrict viewer access by using signed URLs.",
      "Set the Origin Protocol Policy setting to Match Viewer.",
      "Enable field-level encryption.",
      "Enable automatic object compression.",
      "Set the Viewer Protocol Policy setting to Redirect HTTP to HTTPS."
    ],
    "site_answers": [
      "Set the Origin Protocol Policy setting to Match Viewer.",
      "Set the Viewer Protocol Policy setting to Redirect HTTP to HTTPS."
    ]
  },
  {
    "question_text": "A developer is implementing an AWS Lambda function that will be invoked when an object is uploaded to Amazon S3. The developer wants to test the Lambda function in a local development machine before publishing the function to a production AWS account.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Upload an object to Amazon S3 by using the aws s3api put-object CLI command. Wait for the local Lambda invocation from the S3 event.",
      "Create a sample JSON text file for a put object S3 event. Invoke the Lambda function locally. Use the aws lambda invoke CLI command with the JSON file and Lambda function name as arguments.",
      "Use the sam local start-lambda CLI command to start Lambda. Use the sam local generate-event s3 put CLI command to create the Lambda test JSON file. Use the sam local invoke CLI command with the JSON file as the argument to invoke the Lambda function.",
      "Create a JSON string for the put object S3 event. In the AWS Management Console, use the JSON string to create a test event for the local Lambda function. Perform the test."
    ],
    "site_answers": [
      "Use the sam local start-lambda CLI command to start Lambda. Use the sam local generate-event s3 put CLI command to create the Lambda test JSON file. Use the sam local invoke CLI command with the JSON file as the argument to invoke the Lambda function."
    ]
  },
  {
    "question_text": "A developer is publishing critical log data to a log group in Amazon CloudWatch Logs. The log group was created 2 months ago. The developer must encrypt the log data by using an AWS Key Management Service (AWS KMS) key so that future data can be encrypted to comply with the company's security policy.\n\nWhich solution will meet this requirement with the LEAST effort?",
    "question_type": "single",
    "choices": [
      "Use the AWS Encryption SDK for encryption and decryption of the data before writing to the log group.",
      "Use the AWS KMS console to associate the KMS key with the log group.",
      "Use the AWS CLI aws logs create-log-group command, and specify the key Amazon Resource Name (ARN).",
      "Use the AWS CLI aws logs associate-kms-key command, and specify the key Amazon Resource Name (ARN)."
    ],
    "site_answers": [
      "Use the AWS CLI aws logs associate-kms-key command, and specify the key Amazon Resource Name (ARN)."
    ]
  },
  {
    "question_text": "A developer is working on an app for a company that uses an Amazon DynamoDB table named Orders to store customer orders. The table uses OrderID as the partition key and there is no sort key. The table contains more than 100,000 records. The developer needs to add a functionality that will retrieve all Orders records that contain an OrderSource attribute with the MobileApp value.\n\nWhich solution will improve the user experience in the MOST efficient way?",
    "question_type": "single",
    "choices": [
      "Perform a Scan operation on the Orders table. Provide a QueryFilter condition to filter to only the items where the OrderSource attribute is equal to the MobileApp value.",
      "Create a local secondary index (LSI) with OrderSource as the partition key. Perform a Query operation by using MobileApp as the key.",
      "Create a global secondary index (GSI) with OrderSource as the sort key. Perform a Query operation by using MobileApp as the key.",
      "Create a global secondary index (GSI) with OrderSource as the partition key. Perform a Query operation by using MobileApp as the key."
    ],
    "site_answers": [
      "Create a global secondary index (GSI) with OrderSource as the partition key. Perform a Query operation by using MobileApp as the key."
    ]
  },
  {
    "question_text": "A company has an application that uses an AWS Lambda function to process data. A developer must implement encryption in transit for all sensitive configuration data, such as API keys, that is stored in the application. The developer creates an AWS Key Management Service (AWS KMS) customer managed key.\n\nWhat should the developer do next to meet the encryption requirement?",
    "question_type": "single",
    "choices": [
      "Create parameters of the String type in AWS Systems Manager Parameter Store. For each parameter, specify the KMS key ID to encrypt the parameter in transit. Reference the GetParameter API call in the Lambda environment variables.",
      "Create secrets in AWS Secrets Manager by using the customer managed KMS key. Create a new Lambda function and set up a Lambda layer. Configure the Lambda layer to retrieve the values from Secrets Manager.",
      "Create objects in Amazon S3 for each sensitive data field. Specify the customer managed KMS key to encrypt the object. Configure the Lambda function to retrieve the objects from Amazon S3 during data processing.",
      "Create encrypted Lambda environment variables. Specify the customer managed KMS key to encrypt the variables. Enable encryption helpers for encryption in transit. Grant permission to the Lambda function's execution role to access the KMS key."
    ],
    "site_answers": [
      "Create encrypted Lambda environment variables. Specify the customer managed KMS key to encrypt the variables. Enable encryption helpers for encryption in transit. Grant permission to the Lambda function's execution role to access the KMS key."
    ]
  },
  {
    "question_text": "A developer is building an ecommerce application. When there is a sale event, the application needs to concurrently call three third-party systems to record the sale. The developer wrote three AWS Lambda functions. There is one Lambda function for each third-party system, which contains complex integration logic.\n\nThese Lambda functions are all independent. The developer needs to design the application so each Lambda function will run regardless of others' success or failure.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Publish the sale event from the application to an Amazon Simple Queue Service (Amazon SQS) queue. Configure the three Lambda functions to poll the queue.",
      "Publish the sale event from the application to an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe the three Lambda functions to be triggered by the SNS topic.",
      "Publish the sale event from the application to an Application Load Balancer (ALB). Add the three Lambda functions as ALB targets.",
      "Publish the sale event from the application to an AWS Step Functions state machine. Move the logic from the three Lambda functions into the Step Functions state machine."
    ],
    "site_answers": [
      "Publish the sale event from the application to an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe the three Lambda functions to be triggered by the SNS topic."
    ]
  },
  {
    "question_text": "A developer is writing an application, which stores data in an Amazon DynamoDB table. The developer wants to query the DynamoDB table by using the partition key and a different sort key value. The developer needs the latest data with all recent write operations.\n\nHow should the developer write the DynamoDB query?",
    "question_type": "single",
    "choices": [
      "Add a local secondary index (LSI) during table creation. Query the LSI by using eventually consistent reads.",
      "Add a local secondary index (LSI) during table creation. Query the LSI by using strongly consistent reads.",
      "Add a global secondary index (GSI) during table creation. Query the GSI by using eventually consistent reads.",
      "Add a global secondary index (GSI) during table creation. Query the GSI by using strongly consistent reads."
    ],
    "site_answers": [
      "Add a local secondary index (LSI) during table creation. Query the LSI by using strongly consistent reads."
    ]
  },
  {
    "question_text": "A developer manages an application that writes customer orders to an Amazon DynamoDB table. The orders use customer_id as the partition key, order_id as the sort key, and order_date as an attribute. A new access pattern requires accessing data by order_date and order_id. The developer needs to implement a new AWS Lambda function to support the new access pattern.\n\nHow should the developer support the new access pattern in the MOST operationally efficient way?",
    "question_type": "single",
    "choices": [
      "Add a new local secondary index (LSI) to the DynamoDB table that specifies order_date as the partition key and order_id as the sort key. Write the new Lambda function to query the new LSI index.",
      "Write the new Lambda function to scan the DynamoDB table. In the Lambda function, write a method to retrieve and combine results by order_date and order_id.",
      "Add a new global secondary index (GSI) to the DynamoDB table that specifies order_date as the partition key and order_id as the sort key. Write the new Lambda function to query the new GSI index.",
      "Enable DynamoDB Streams on the table. Choose the new and old images information to write to the DynamoDB stream. Write the new Lambda function to query the DynamoDB stream"
    ],
    "site_answers": [
      "Add a new global secondary index (GSI) to the DynamoDB table that specifies order_date as the partition key and order_id as the sort key. Write the new Lambda function to query the new GSI index."
    ]
  },
  {
    "question_text": "A developer is creating a web application for a school that stores data in Amazon DynamoDB. The ExamScores table has the following attributes: student_id, subject_name, and top_score.\n\nEach item in the ExamScores table is identified with student_id as the partition key and subject_name as the sort key. The web application needs to display the student _id for the top scores for each school subject. The developer needs to increase the speed of the queries to retrieve the student_id for the top scorer for each school subject.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a local secondary index (LSI) with subject_name as the partition key and top_score as the sort key.",
      "Create a local secondary index (LSI) with top_score as the partition key and student_id as the sort key.",
      "Create a global secondary index (GSI) with subject_name as the partition key and top_score as the sort key.",
      "Create a global secondary index (GSI) with subject_name as the partition key and student_id as the sort key."
    ],
    "site_answers": [
      "Create a global secondary index (GSI) with subject_name as the partition key and top_score as the sort key."
    ]
  },
  {
    "question_text": "A developer wrote an application that uses an AWS Lambda function to asynchronously generate short videos based on requests from customers. This video generation can take up to 10 minutes. After the video is generated, a URL to download the video is pushed to the customer's web browser. The customer should be able to access these videos for at least 3 hours after generation.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Store the video in the /tmp folder within the Lambda execution environment. Push a Lambda function URL to the customer.",
      "Store the video in an Amazon Elastic File System (Amazon EFS) file system attached to the function. Generate a pre-signed URL for the video object and push the URL to the customer.",
      "Store the video in Amazon S3. Generate a pre-signed URL for the video object and push the URL to the customer.",
      "Store the video in an Amazon CloudFront distribution. Generate a pre-signed URL for the video object and push the URL to the customer."
    ],
    "site_answers": [
      "Store the video in Amazon S3. Generate a pre-signed URL for the video object and push the URL to the customer."
    ]
  },
  {
    "question_text": "A developer is creating an AWS Lambda function that is invoked by messages to an Amazon Simple Notification Service (Amazon SNS) topic. The messages represent customer data updates from a customer relationship management (CRM) systemThe developer wants the Lambda function to process only the messages that pertain to email address changes. Additional subscribers to the SNS topic will process any other messages.\n\nWhich solution will meet these requirements in the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Use Lambda event filtering to allow only messages that are related to email address changes to invoke the Lambda function.",
      "Use an SNS filter policy on the Lambda function subscription to allow only messages that are related to email address changes to invoke the Lambda function.",
      "Subscribe an Amazon Simple Queue Service (Amazon SQS) queue to the SNS topic. Configure the SQS queue with a filter policy to allow only messages that are related to email address changes.Connect the SQS queue to the Lambda function.",
      "Configure the Lambda code to check the received message. If the message is not related to an email address change, configure the Lambda function to publish the message back to the SNS topic for the other subscribers to process."
    ],
    "site_answers": [
      "Use an SNS filter policy on the Lambda function subscription to allow only messages that are related to email address changes to invoke the Lambda function."
    ]
  },
  {
    "question_text": "A developer is designing a fault-tolerant environment where client sessions will be saved.\n\nHow can the developer ensure that no sessions are lost if an Amazon EC2 instance fails?",
    "question_type": "single",
    "choices": [
      "Use sticky sessions with an Elastic Load Balancer target group.",
      "Use Amazon SQS to save session data.",
      "Use Amazon DynamoDB to perform scalable session handling.",
      "Use Elastic Load Balancer connection draining to stop sending requests to failing instances."
    ],
    "site_answers": [
      "Use Amazon DynamoDB to perform scalable session handling."
    ]
  },
  {
    "question_text": "A developer is creating AWS CloudFormation templates to manage an application's deployment in Amazon Elastic Container Service (Amazon ECS) through AWS CodeDeploy. The developer wants to automatically deploy new versions of the application to a percentage of users before the new version becomes available for all users.\n\nHow should the developer manage the deployment of the new version?",
    "question_type": "single",
    "choices": [
      "Modify the CloudFormation template to include a Transform section and the AWS::CodeDeploy::BlueGreen hook.",
      "Deploy the new version in a new CloudFormation stack. After testing is complete, update the application's DNS records for the new stack.",
      "Run CloudFormation stack updates on the application stack to deploy new application versions when they are available.",
      "Create a nested stack for the new version. Include a Transform section and the AWS::CodeDeploy::BlueGreen hook."
    ],
    "site_answers": [
      "Modify the CloudFormation template to include a Transform section and the AWS::CodeDeploy::BlueGreen hook."
    ]
  },
  {
    "question_text": "A developer has written a distributed application that uses microservices. The microservices are running on Amazon EC2 instances. Because of message volume, the developer is unable to match log output from each microservice to a specific transaction. The developer needs to analyze the message flow to debug the application.\n\nWhich combination of steps should the developer take to meet this requirement? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Download the AWS X-Ray daemon. Install the daemon on an EC2 instance. Ensure that the EC2 instance allows UDP traffic on port 2000.",
      "Configure an interface VPC endpoint to allow traffic to reach the global AWS X-Ray daemon on TCP port 2000.",
      "Enable AWS X-Ray. Configure Amazon CloudWatch to push logs to X-Ray.",
      "Add the AWS X-Ray software development kit (SDK) to the microservices. Use X-Ray to trace requests that each microservice makes.",
      "Set up Amazon CloudWatch metric streams to collect streaming data from the microservices."
    ],
    "site_answers": [
      "Download the AWS X-Ray daemon. Install the daemon on an EC2 instance. Ensure that the EC2 instance allows UDP traffic on port 2000.",
      "Add the AWS X-Ray software development kit (SDK) to the microservices. Use X-Ray to trace requests that each microservice makes."
    ]
  },
  {
    "question_text": "A company is working on a new serverless application. A developer needs to find an automated way to deploy AWS Lambda functions and the dependent infrastructure with minimum coding effort. The application also needs to be reliable.\n\nWhich method will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Build the application by using shell scripts to create .zip files for each Lambda function. Manually upload the .zip files to the AWS Management Console.",
      "Build the application by using the AWS Serverless Application Model (AWS SAM). Use a continuous integration and continuous delivery (CI/CD) pipeline and the SAM CLI to deploy the Lambda functions.",
      "Build the application by using shell scripts to create .zip files for each Lambda function. Upload the .zip files. Deploy the .zip files as Lambda functions by using the AWS CLI in a continuous integration and continuous delivery (CI/CD) pipeline.",
      "Build a container for each Lambda function. Store the container images in AWS CodeArtifact. Deploy the containers as Lambda functions by using the AWS CLI in a continuous integration and continuous delivery (CI/CD) pipeline."
    ],
    "site_answers": [
      "Build the application by using the AWS Serverless Application Model (AWS SAM). Use a continuous integration and continuous delivery (CI/CD) pipeline and the SAM CLI to deploy the Lambda functions."
    ]
  },
  {
    "question_text": "A developer needs to modify an application architecture to meet new functional requirements. Application data is stored in Amazon DynamoDB and processed for analysis in a nightly batch. The system analysts do not want to wait until the next day to view the processed data and have asked to have it available in near-real time.\n\nWhich application architecture pattern would enable the data to be processed as it is received?",
    "question_type": "single",
    "choices": [
      "Event driven",
      "Client-server driven",
      "Fan-out driven",
      "Schedule driven"
    ],
    "site_answers": [
      "Event driven"
    ]
  },
  {
    "question_text": "A company hosts its application in the us-west-1 Region. The company wants to add redundancy in the us-east-1 Region.\n\nThe application secrets are stored in AWS Secrets Manager in us-west-1. A developer needs to replicate the secrets to us-east-1.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Configure secret replication for each secret. Add us-east-1 as a replication Region. Choose an AWS Key Management Service (AWS KMS) key in us-east-1 to encrypt the replicated secrets.",
      "Create a new secret in us-east-1 for each secret. Configure secret replication in us-east-1. Set the source to be the corresponding secret in us-west-1. Choose an AWS Key Management Service (AWS KMS) key in us-west-1 to encrypt the replicated secrets.",
      "Create a replication rule for each secret. Set us-east-1 as the destination Region. Configure the rule to run during secret rotation. Choose an AWS Key Management Service (AWS KMS) key in us-east-1 to encrypt the replicated secrets.",
      "Create a Secrets Manager lifecycle rule to replicate each secret to a new Amazon S3 bucket in us-west-1. Configure an S3 replication rule to replicate the secrets to us-east-1."
    ],
    "site_answers": [
      "Configure secret replication for each secret. Add us-east-1 as a replication Region. Choose an AWS Key Management Service (AWS KMS) key in us-east-1 to encrypt the replicated secrets."
    ]
  },
  {
    "question_text": "A company runs an ecommerce application on AWS. The application stores data in an Amazon Aurora database.\n\nA developer is adding a caching layer to the application. The caching strategy must ensure that the application always uses the most recent value for each data item.\n\nWhich caching strategy will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Implement a TTL strategy for every item that is saved in the cache.",
      "Implement a write-through strategy for every item that is created and updated.",
      "Implement a lazy loading strategy for every item that is loaded.",
      "Implement a read-through strategy for every item that is loaded."
    ],
    "site_answers": [
      "Implement a write-through strategy for every item that is created and updated."
    ]
  },
  {
    "question_text": "A company has a serverless application that uses Amazon API Gateway backed by AWS Lambda proxy integration. The company is developing several backend APIs. The company needs a landing page to provide an overview of navigation to the APIs.\n\nA developer creates a new/LandingPage resource and a new GET method that uses mock integration.\n\nWhat should the developer do next to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure the integration request mapping template with Content-Type of text/html and statusCode of 200. Configure the integration response mapping template with Content-Type of application/json. In the integration response mapping template, include the LandingPage HTML code that references the APIs.",
      "Configure the integration request mapping template with Content-Type of application/json. In the integration request mapping template, include the LandingPage HMTL code that references the APIs. Configure the integration response mapping template with Content-Type of text/html and statusCode of 200.",
      "Configure the integration request mapping template with Content-Type of application/json and statusCode of 200. Configure the integration response mapping template with Content-Type of text/html. In the integration response mapping template, include the LandingPage HTML code that references the APIs.",
      "Configure the integration request mapping template with Content-Type of text/html. In the integration request mapping template, include the LandingPage HTML code that references the APIs. Configure the integration response mapping template with Content-Type of application/json and statusCode of 200."
    ],
    "site_answers": [
      "Configure the integration request mapping template with Content-Type of application/json and statusCode of 200. Configure the integration response mapping template with Content-Type of text/html. In the integration response mapping template, include the LandingPage HTML code that references the APIs."
    ]
  },
  {
    "question_text": "A developer creates an AWS Lambda function that is written in Java. During testing, the Lambda function does not work how the developer expected. The developer wants to use tracing capabilities to troubleshoot the problem.\n\nWhich AWS service should the developer use to accomplish this goal?",
    "question_type": "single",
    "choices": [
      "AWS Trusted Advisor",
      "Amazon CloudWatch",
      "AWS X-Ray",
      "AWS CloudTrail"
    ],
    "site_answers": [
      "AWS X-Ray"
    ]
  },
  {
    "question_text": "A company is developing an application that will be accessed through the Amazon API Gateway REST API. Registered users should be the only ones who can access certain resources of this API. The token being used should expire automatically and needs to be refreshed periodically.\n\nHow can a developer meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create an Amazon Cognito identity pool, configure the Amazon Cognito Authorizer in API Gateway, and use the temporary credentials generated by the identity pool.",
      "Create and maintain a database record for each user with a corresponding token and use an AWS Lambda authorizer in API Gateway.",
      "Create an Amazon Cognito user pool, configure the Cognito Authorizer in API Gateway, and use the identity or access token.",
      "Create an IAM user for each API user, attach an invoke permissions policy to the API, and use an IAM authorizer in API Gateway."
    ],
    "site_answers": [
      "Create an Amazon Cognito user pool, configure the Cognito Authorizer in API Gateway, and use the identity or access token."
    ]
  },
  {
    "question_text": "A company used AWS to develop an application for customers. The application includes an Amazon API Gateway API that invokes AWS Lambda functions. The Lambda functions process data and store the data in Amazon DynamoDB tables.\n\nThe company must monitor the entire application to identify potential bottlenecks in the architecture that can negatively affect customers.\n\nWhich solution will meet this requirement with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Instrument the application with AWS X-Ray. Inspect the service map to identify errors and issues.",
      "Configure Lambda exceptions and additional logging to Amazon CloudWatch. Use CloudWatch Logs Insights to query the logs.",
      "Configure API Gateway to log responses to Amazon CloudWatch. Create a metric filter for the TooManyRequestsException error message.",
      "Use Amazon CloudWatch metrics for the DynamoDB tables to identify all the ProvisionedThroughputExceededException error messages."
    ],
    "site_answers": [
      "Instrument the application with AWS X-Ray. Inspect the service map to identify errors and issues."
    ]
  },
  {
    "question_text": "A company launched an online portal to announce a new product that the company will release in 6 months. The portal requests that users enter an email address to receive communications about the product. The company needs to create a REST API that will store the email addresses in Amazon DynamoDB.\n\nA developer has created an AWS Lambda function that can store the email addresses. The developer will deploy the Lambda function by using the AWS Serverless Application Model (AWS SAM). The developer must provide access to the Lambda function over HTTP.\n\nWhich solutions will meet these requirements with the LEAST additional configuration? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Expose the Lambda function by using function URLs.",
      "Expose the Lambda function by using a Gateway Load Balancer.",
      "Expose the Lambda function by using a Network Load Balancer.",
      "Expose the Lambda function by using AWS Global Accelerator.",
      "Expose the Lambda function by using Amazon API Gateway."
    ],
    "site_answers": [
      "Expose the Lambda function by using function URLs.",
      "Expose the Lambda function by using Amazon API Gateway."
    ]
  },
  {
    "question_text": "A company has a website that displays a daily newsletter. When a user visits the website, an AWS Lambda function processes the browser's request and queries the company's on-premises database to obtain the current newsletter. The newsletters are stored in English. The Lambda function uses the Amazon Translate TranslateText API operation to translate the newsletters, and the translation is displayed to the user.\n\nDue to an increase in popularity, the website's response time has slowed. The database is overloaded. The company cannot change the database and needs a solution that improves the response time of the Lambda function.\n\nWhich solution meets these requirements?",
    "question_type": "single",
    "choices": [
      "Change to asynchronous Lambda function invocation.",
      "Cache the translated newsletters in the Lambda/tmp directory.",
      "Enable TranslateText API caching.",
      "Change the Lambda function to use parallel processing."
    ],
    "site_answers": [
      "Cache the translated newsletters in the Lambda/tmp directory."
    ]
  },
  {
    "question_text": "A developer is monitoring an application that runs on an Amazon EC2 instance. The developer has configured a custom Amazon CloudWatch metric with data granularity of 1 second. If any issues occur, the developer wants to be notified within 30 seconds by Amazon Simple Notification Service (Amazon SNS).\n\nWhat should the developer do to meet this requirement?",
    "question_type": "single",
    "choices": [
      "Configure a high-resolution CloudWatch alarm.",
      "Set up a custom CloudWatch dashboard.",
      "Use Amazon CloudWatch Logs Insights.",
      "Change to a default CloudWatch metric."
    ],
    "site_answers": [
      "Configure a high-resolution CloudWatch alarm."
    ]
  },
  {
    "question_text": "A company has a web application that contains an Amazon API Gateway REST API. A developer has created an AWS CloudFormation template for the initial deployment of the application. The developer has deployed the application successfully as part of an AWS CodePipeline continuous integration and continuous delivery (CI/CD) process. All resources and methods are available through the deployed stage endpoint.\n\nThe CloudFormation template contains the following resource types:\u2022\tAWS::ApiGateway::RestApi\u2022\tAWS::ApiGateway::Resource\u2022\tAWS::ApiGateway::Method\u2022\tAWS::ApiGateway::Stage\u2022\tAWS::ApiGateway::DeploymentThe developer adds a new resource to the REST API with additional methods and redeploys the template. CloudFormation reports that the deployment is successful and that the stack is in the UPDATE_COMPLETE state. However, calls to all new methods are returning 404 (Not Found) errors.\n\nWhat should the developer do to make the new methods available?",
    "question_type": "single",
    "choices": [
      "Specify the disable-rollback option during the update-stack operation.",
      "Unset the CloudFormation stack failure options.",
      "Add an AWS CodeBuild stage to CodePipeline to run the aws apigateway create-deployment AWS CLI command.",
      "Add an action to CodePipeline to run the aws cloudfront create-invalidation AWS CLI command."
    ],
    "site_answers": [
      "Add an AWS CodeBuild stage to CodePipeline to run the aws apigateway create-deployment AWS CLI command."
    ]
  },
  {
    "question_text": "A developer updates an AWS Lambda function that an Amazon API Gateway API uses. The API is the backend for a web application.\n\nThe developer needs to test the updated Lambda function before deploying the Lambda function to production. The testing must not affect any production users of the web application.\n\nWhich solution will meet these requirements in the MOST operationally efficient way?",
    "question_type": "single",
    "choices": [
      "Create a canary release deployment for the existing API stage. Deploy the API to the existing stage. Test the updated Lambda function by using the existing URL.",
      "Update the API Gateway API endpoint type to private. Deploy the changes to the existing API stage. Test the API by using the existing URL.",
      "Create a new test API stage in API Gateway. Add stage variables to deploy the updated Lambda function to only the test stage. Test the updated Lambda function by using the new stage URL.",
      "Create a new AWS CloudFormation stack to deploy a copy of the entire production API and Lambda function. Use the stack's API URL to test the updated Lambda function."
    ],
    "site_answers": [
      "Create a new test API stage in API Gateway. Add stage variables to deploy the updated Lambda function to only the test stage. Test the updated Lambda function by using the new stage URL."
    ]
  },
  {
    "question_text": "A developer wants the ability to roll back to a previous version of an AWS Lambda function in the event of errors caused by a new deployment.\n\nHow can the developer achieve this with MINIMAL impact on users?",
    "question_type": "single",
    "choices": [
      "Change the application to use an alias that points to the current version. Deploy the new version of the code. Update the alias to use the newly deployed version. If too many errors are encountered, point the alias back to the previous version.",
      "Change the application to use an alias that points to the current version. Deploy the new version of the code. Update the alias to direct 10% of users to the newly deployed version. If too many errors are encountered, send 100% of traffic to the previous version.",
      "Do not make any changes to the application. Deploy the new version of the code. If too many errors are encountered, point the application back to the previous version using the version number in the Amazon Resource Name (ARN).",
      "Create three aliases: new, existing, and router. Point the existing alias to the current version. Have the router alias direct 100% of users to the existing alias. Update the application to use the router alias. Deploy the new version of the code. Point the new alias to this version. Update the router alias to direct 10% of users to the new alias. If too many errors are encountered, send 100% of traffic to the existing alias."
    ],
    "site_answers": [
      "Change the application to use an alias that points to the current version. Deploy the new version of the code. Update the alias to direct 10% of users to the newly deployed version. If too many errors are encountered, send 100% of traffic to the previous version."
    ]
  },
  {
    "question_text": "A company maintains a REST service using Amazon API Gateway and the API Gateway native API key validation. The company recently launched a new registration page, which allows users to sign up for the service. The registration page creates a new API key using CreateApiKey and sends the new key to the user. When the user attempts to call the API using this key, the user receives a 403 Forbidden error. Existing users are unaffected and can still call the API.\n\nWhat code updates will grant these new users access to the API?",
    "question_type": "single",
    "choices": [
      "The createDeployment method must be called so the API can be redeployed to include the newly created API key.",
      "The updateAuthorizer method must be called to update the API's authorizer to include the newly created API key.",
      "The importApiKeys method must be called to import all newly created API keys into the current stage of the API.",
      "The createUsagePlanKey method must be called to associate the newly created API key with the correct usage plan."
    ],
    "site_answers": [
      "The createUsagePlanKey method must be called to associate the newly created API key with the correct usage plan."
    ]
  },
  {
    "question_text": "A company uses an AWS CloudFormation template to deploy and manage its AWS infrastructure. The CloudFormation template creates Amazon VPC security groups and Amazon EC2 security groups.\n\nA manager finds out that some engineers modified the security groups of a few EC2 instances for testing purposes. A developer needs to determine what modifications occurred.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Add a Conditions section statement in the source YAML file of the template. Run the CloudFormation stack.",
      "Perform a drift detection operation on the CloudFormation stack.",
      "Execute a change set for the CloudFormation stack.",
      "Use Amazon Detective to detect the modifications."
    ],
    "site_answers": [
      "Perform a drift detection operation on the CloudFormation stack."
    ]
  },
  {
    "question_text": "An IAM role is attached to an Amazon EC2 instance that explicitly denies access to all Amazon S3 API actions. The EC2 instance credentials file specifies the IAM access key and secret access key, which allow full administrative access.\n\nGiven that multiple modes of IAM access are present for this EC2 instance, which of the following is correct?",
    "question_type": "single",
    "choices": [
      "The EC2 instance will only be able to list the S3 buckets.",
      "The EC2 instance will only be able to list the contents of one S3 bucket at a time.",
      "The EC2 instance will be able to perform all actions on any S3 bucket.",
      "The EC2 instance will not be able to perform any S3 action on any S3 bucket."
    ],
    "site_answers": [
      "The EC2 instance will not be able to perform any S3 action on any S3 bucket."
    ]
  },
  {
    "question_text": "A company uses an AWS Lambda function to transfer files from an Amazon S3 bucket to the company's SFTP server. The Lambda function connects to the SFTP server by using credentials such as username and password. The company uses Lambda environment variables to store these credentials.\n\nA developer needs to implement encrypted username and password credentials.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Remove the user credentials from the Lambda environment. Implement IAM database authentication.",
      "Move the user credentials from Lambda environment variables to AWS Systems Manager Parameter Store.",
      "Move the user credentials from Lambda environment variables to AWS Key Management Service (AWS KMS).",
      "Move the user credentials from the Lambda environment to an encrypted .txt file. Store the file in an S3 bucket."
    ],
    "site_answers": [
      "Move the user credentials from Lambda environment variables to AWS Systems Manager Parameter Store."
    ]
  },
  {
    "question_text": "A developer is creating a new batch application that will run on an Amazon EC2 instance. The application requires read access to an Amazon S3 bucket. The developer needs to follow security best practices to grant S3 read access to the application.\n\nWhich solution meets these requirements?",
    "question_type": "single",
    "choices": [
      "Add the permissions to an IAM policy. Attach the policy to a role. Attach the role to the EC2 instance profile.",
      "Add the permissions inline to an IAM group. Attach the group to the EC2 instance profile.",
      "Add the permissions to an IAM policy. Attach the policy to a user. Attach the user to the EC2 instance profile.",
      "Add the permissions to an IAM policy. Use IAM web identity federation to access the S3 bucket with the policy."
    ],
    "site_answers": [
      "Add the permissions to an IAM policy. Attach the policy to a role. Attach the role to the EC2 instance profile."
    ]
  },
  {
    "question_text": "A company has an application that receives batches of orders from partners every day. The application uses an AWS Lambda function to process the batches.\n\nIf a batch contains no orders, the Lambda function must publish to an Amazon Simple Notification Service (Amazon SNS) topic as soon as possible.\n\nWhich combination of steps will meet this requirement with the LEAST implementation effort? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Update the existing Lambda function's code to send an Amazon CloudWatch custom metric for the number of orders in a batch for each partner.",
      "Create a new Lambda function as an Amazon Kinesis data stream consumer. Configure the new Lambda function to track orders and to publish to the SNS topic when a batch contains no orders.",
      "Set up an Amazon CloudWatch alarm that will send a notification to the SNS topic when the value of the custom metric is 0.",
      "Schedule a new Lambda function to analyze Amazon CloudWatch metrics every 24 hours to identify batches that contain no orders. Configure the Lambda function to publish to the SNS topic.",
      "Modify the existing Lambda function to log orders to an Amazon Kinesis data stream."
    ],
    "site_answers": [
      "Update the existing Lambda function's code to send an Amazon CloudWatch custom metric for the number of orders in a batch for each partner.",
      "Set up an Amazon CloudWatch alarm that will send a notification to the SNS topic when the value of the custom metric is 0."
    ]
  },
  {
    "question_text": "A developer has an application that uses an Amazon DynamoDB table with a configured local secondary index (LSI). During application testing, the DynamoDB table metrics report a ProvisionedThroughputExceededException error message. The number of requests made by the test suite did not exceed the table's provisioned capacity limits.\n\nWhat is the cause of this issue?",
    "question_type": "single",
    "choices": [
      "The data in the table's partition key column is not evenly distributed.",
      "The LSI's capacity is different from the table's capacity.",
      "The application is not implementing exponential backoff retry logic while interacting with the DynamoDB API.",
      "The application has the IAM permission to query the DynamoDB table but not to query the LSI."
    ],
    "site_answers": [
      "The data in the table's partition key column is not evenly distributed."
    ]
  },
  {
    "question_text": "A developer manages a website that distributes its content by using Amazon CloudFront. The website's static artifacts are stored in an Amazon S3 bucket.\n\nThe developer deploys some changes and can see the new artifacts in the S3 bucket. However, the changes do not appear on the webpage that the CloudFront distribution delivers.\n\nHow should the developer resolve this issue?",
    "question_type": "single",
    "choices": [
      "Configure S3 Object Lock to update to the latest version of the files every time an S3 object is updated.",
      "Configure the S3 bucket to clear all old objects from the bucket before new artifacts are uploaded.",
      "Set CloudFront to invalidate the cache after the artifacts have been deployed to Amazon S3.",
      "Set CloudFront to modify the distribution origin after the artifacts have been deployed to Amazon S3."
    ],
    "site_answers": [
      "Set CloudFront to invalidate the cache after the artifacts have been deployed to Amazon S3."
    ]
  },
  {
    "question_text": "A company has a development team that uses AWS CodeCommit for version control. The development team has CodeCommit repositories in multiple AWS accounts. The team is expanding to include developers who work in various locations.\n\nThe company must ensure that the developers have secure access to the repositories.\n\nWhich solution will meet these requirements in the MOST operationally efficient way?",
    "question_type": "single",
    "choices": [
      "Configure IAM roles for each developer and grant access individually.",
      "Configure permission sets in AWS IAM Identity Center to grant access to the accounts.",
      "Share AWS access keys with the development team for direct repository access.",
      "Use public SSH keys for authentication to the CodeCommit repositories."
    ],
    "site_answers": [
      "Configure permission sets in AWS IAM Identity Center to grant access to the accounts."
    ]
  },
  {
    "question_text": "A developer received the following error message during an AWS CloudFormation deployment:DELETE_FAILED (The following resource(s) failed to delete: [ASGInstanceRole12345678].)Which action should the developer take to resolve this error?",
    "question_type": "single",
    "choices": [
      "Contact AWS Support to report an issue with the Auto Scaling Groups (ASG) service.",
      "Add a DependsOn attribute to the ASGInstanceRole12345678 resource in the CloudFormation template. Then delete the stack.",
      "Modify the CloudFormation template to retain the ASGInstanceRole12345678 resource. Then manually delete the resource after deployment.",
      "Add a force parameter when calling CloudFormation with the role-arn of ASGInstanceRole12345678."
    ],
    "site_answers": [
      "Modify the CloudFormation template to retain the ASGInstanceRole12345678 resource. Then manually delete the resource after deployment."
    ]
  },
  {
    "question_text": "A company runs a critical application on Amazon Elastic Container Service (Amazon ECS) by using Amazon EC2 instances. The company needs to migrate the application to Amazon ECS on AWS Fargate. A developer is configuring Fargate and the ECS capacity providers to make the change.\n\nWhich solution will meet these requirements with the LEAST downtime during migration?",
    "question_type": "single",
    "choices": [
      "Use the PutClusterCapacityProviders API operation to associate the ECS cluster with the FARGATE and FARGATE_SPOT capacity provider strategies. Use FARGATE as Provider 1 with a base value. Use FARGATE_SPOT as Provider 2 for failover.",
      "Use the CreateCapacityProvider API operation to associate the ECS cluster with the FARGATE and FARGATE_SPOT capacity provider strategies. Use FARGATE as Provider 1 with a base value. Use FARGATE_SPOT as Provider 2 for failover.",
      "Use the PutClusterCapacityProviders API operation to associate the ECS cluster with the FARGATE and FARGATE_SPOT capacity provider strategies. Use FARGATE_SPOT as Provider 1 with a base value. Use FARGATE as Provider 2 for failover.",
      "Use the CreateCapacityProvider API operation to associate the ECS cluster with the FARGATE and FARGATE_SPOT capacity provider strategies. Use FARGATE_SPOT as Provider 1 with a base value. Use FARGATE as Provider 2 for failover."
    ],
    "site_answers": [
      "Use the PutClusterCapacityProviders API operation to associate the ECS cluster with the FARGATE and FARGATE_SPOT capacity provider strategies. Use FARGATE as Provider 1 with a base value. Use FARGATE_SPOT as Provider 2 for failover."
    ]
  },
  {
    "question_text": "A company has a web application that is hosted on AWS. The application is behind an Amazon CloudFront distribution. A developer needs a dashboard to monitor error rates and anomalies of the CloudFront distribution as frequently as possible.\n\nWhich combination of steps should the developer take to meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Stream the CloudFront distribution logs to an Amazon S3 bucket. Detect anomalies and error rates by using Amazon Athena.",
      "Enable real-time logs on the CloudFront distribution. Create a data stream in Amazon Kinesis Data Streams.",
      "Set up Amazon Kinesis Data Streams to send the logs to Amazon OpenSearch Service by using an AWS Lambda function. Make a dashboard in OpenSearch Dashboards.",
      "Stream the CloudFront distribution logs to Amazon Kinesis Data Firehose.",
      "Set up Amazon Kinesis Data Firehose to send the logs to AWS CloudTrail. Create CloudTrail metrics, alarms, and dashboards."
    ],
    "site_answers": [
      "Enable real-time logs on the CloudFront distribution. Create a data stream in Amazon Kinesis Data Streams.",
      "Set up Amazon Kinesis Data Streams to send the logs to Amazon OpenSearch Service by using an AWS Lambda function. Make a dashboard in OpenSearch Dashboards."
    ]
  },
  {
    "question_text": "A developer creates an Amazon DynamoDB table. The table has OrderID as the partition key and NumberOfItemsPurchased as the sort key. The data type of the partition key and the sort key is Number.\n\nWhen the developer queries the table, the results are sorted by NumberOfItemsPurchased in ascending order. The developer needs the query results to be sorted by NumberOfItemsPurchased in descending order.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Create a local secondary index (LSI) on the NumberOfItemsPurchased sort key.",
      "Change the sort key from NumberOfItemsPurchased to NumberOfItemsPurchasedDescending.",
      "In the Query operation, set the ScanIndexForward parameter to false.",
      "In the Query operation, set the KeyConditionExpression parameter to false."
    ],
    "site_answers": [
      "In the Query operation, set the ScanIndexForward parameter to false."
    ]
  },
  {
    "question_text": "A developer needs to use a code template to create an automated deployment of an application onto Amazon EC2 instances. The template must be configured to repeat deployment, installation, and updates of resources for the application. The template must be able to create identical environments and roll back to previous versions.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Use AWS Amplify for automatic deployment templates. Use a traffic-splitting deployment to copy any deployments. Modify any resources created by Amplify, if necessary.",
      "Use AWS CodeBuild for automatic deployment. Upload the required AppSpec file template. Save the appspec.yml file in the root directory folder of the revision. Specify the deployment group that includes the EC2 instances for the deployment.",
      "Use AWS CloudFormation to create an infrastructure template in JSON format to deploy the EC2 instances. Use CloudFormation helper scripts to install the necessary software and to start the application. Call the scripts directly from the template.",
      "Use AWS AppSync to deploy the application. Upload the template as a GraphQL schema. Specify the EC2 instances for deployment of the application. Use resolvers as a version control mechanism and to make any updates to the deployments."
    ],
    "site_answers": [
      "Use AWS CloudFormation to create an infrastructure template in JSON format to deploy the EC2 instances. Use CloudFormation helper scripts to install the necessary software and to start the application. Call the scripts directly from the template."
    ]
  },
  {
    "question_text": "A developer has a continuous integration and continuous delivery (CI/CD) pipeline that uses AWS CodeArtifact and AWS CodeBuild. The build artifacts are between 0.5 GB and 1.5 GB in size. The builds happen frequently and retrieve many dependencies from CodeArtifact each time.\n\nThe builds have been slow because of the time it takes to transfer dependencies. The developer needs to improve build performance by reducing the number of dependencies that are retrieved for each build.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Specify an Amazon S3 cache in CodeBuild. Add the S3 cache folder path to the buildspec.yaml file for the build project.",
      "Specify a local cache in CodeBuild. Add the CodeArtifact repository name to the buildspec.yaml file for the build project.",
      "Specify a local cache in CodeBuild. Add the cache folder path to the buildspec.yaml file for the build project.",
      "Retrieve the buildspec.yaml file directly from CodeArtifact. Add the CodeArtifact repository name to the buildspec.yaml file for the build project."
    ],
    "site_answers": [
      "Specify a local cache in CodeBuild. Add the cache folder path to the buildspec.yaml file for the build project."
    ]
  },
  {
    "question_text": "A company that has large online business uses an Amazon DynamoDB table to store sales data. The company enabled Amazon DynamoDB Streams on the table. The transaction status of each sale is stored in a TransactionStatus attribute in the table. The value of the TransactionStatus attribute must be either failed, pending, or completed.\n\nThe company wants to be notified of failed sales where the Price attribute is above a specific threshold. A developer needs to set up notification for the failed sales.\n\nWhich solution will meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Create an event source mapping between DynamoDB Streams and an AWS Lambda function. Use Lambda event filtering to trigger the Lambda function only if sales fail when the price is above the specified threshold. Configure the Lambda function to publish the data to an Amazon Simple Notification Service (Amazon SNS) topic.",
      "Create an event source mapping between DynamoDB Streams and an AWS Lambda function. Configure the Lambda function handler code to publish to an Amazon Simple Notification Service (Amazon SNS) topic if sales fail when price is above the specified threshold.",
      "Create an event source mapping between DynamoDB Streams and an Amazon Simple Notification Service (Amazon SNS) topic. Use event filtering to publish to the SNS topic if sales fail when the price is above the specified threshold.",
      "Create an Amazon CloudWatch alarm to monitor the DynamoDB Streams sales data. Configure the alarm to publish to an Amazon Simple Notification Service (Amazon SNS) topic if sales fail due when price is above the specified threshold."
    ],
    "site_answers": [
      "Create an event source mapping between DynamoDB Streams and an AWS Lambda function. Use Lambda event filtering to trigger the Lambda function only if sales fail when the price is above the specified threshold. Configure the Lambda function to publish the data to an Amazon Simple Notification Service (Amazon SNS) topic."
    ]
  },
  {
    "question_text": "An AWS Lambda function is invoked asynchronously to process events. Occasionally, the Lambda function falls to process events. A developer needs to collect and analyze these failed events to fix the issue.\n\nWhat should the developer do to meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Add logging statements for all events in the Lambda function. Filter AWS CloudTrail logs for errors.",
      "Configure the Lambda function to start an AWS Step Functions workflow with retries for failed events.",
      "Add a dead-letter queue to send messages to an Amazon Simple Queue Service (Amazon SQS) standard queue.",
      "Add a dead-letter queue to send messages to an Amazon Simple Notification Service (Amazon SNS) FIFO topic."
    ],
    "site_answers": [
      "Add a dead-letter queue to send messages to an Amazon Simple Queue Service (Amazon SQS) standard queue."
    ]
  },
  {
    "question_text": "A company has an application that uses an Amazon S3 bucket for object storage. A developer needs to configure in-transit encryption for the S3 bucket. All the S3 objects containing personal data needs to be encrypted at rest with AWS Key Management Service (AWS KMS) keys, which can be rotated on demand.\n\nWhich combination of steps will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Write an S3 bucket policy to allow only encrypted connections over HTTPS by using permissions boundary.",
      "Configure an S3 bucket policy to enable client-side encryption for the objects containing personal data by using an AWS KMS customer managed key.",
      "Configure the application to encrypt the objects by using an AWS KMS customer managed key before uploading the objects containing personal data to Amazon S3.",
      "Write an S3 bucket policy to allow only encrypted connections over HTTPS by using the aws:SecureTransport condition.",
      "Configure S3 Block Public Access settings for the S3 bucket to allow only encrypted connections over HTTPS."
    ],
    "site_answers": [
      "Configure the application to encrypt the objects by using an AWS KMS customer managed key before uploading the objects containing personal data to Amazon S3.",
      "Write an S3 bucket policy to allow only encrypted connections over HTTPS by using the aws:SecureTransport condition."
    ]
  },
  {
    "question_text": "A company has a monolithic desktop-based application that processes images. A developer is converting the application into an AWS Lambda function by using Python. Currently, the desktop application runs every 5 minutes to process the latest image from an Amazon S3 bucket. The desktop application completes the image processing task within 1 minute.\n\nDuring testing on AWS, the developer notices that the Lambda function runs at the specified 5-minute interval. However, the Lambda function takes more than 2 minutes to complete the image processing task. The developer needs a solution that will improve the Lambda function's performance.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Update the instance type of the Lambda function to a compute optimized instance with at least eight virtual CPU (vCPU).",
      "Update the configuration of the Lambda function to use the latest Python runtime.",
      "Increase the memory that is allocated to the Lambda function.",
      "Configure a reserved concurrency on the Lambda function."
    ],
    "site_answers": [
      "Increase the memory that is allocated to the Lambda function."
    ]
  },
  {
    "question_text": "A company uses AWS CloudFormation templates to manage infrastructure for a public-facing application in its development, pre-production, and production environments. The company needs to scale for increasing customer demand. A developer must upgrade the Amazon RDS DB instance type to a larger instance.\n\nThe developer deploys an update to the CloudFormation stack with the instance size change in the pre-production environment. The developer notices that the stack is in an UPDATE_ROLLBACK_FAILED slate in CloudFormation.\n\nWhich option is the cause of this issue?",
    "question_type": "single",
    "choices": [
      "The new instance type specified in the CloudFormation template is invalid",
      "The database was deleted or modified manually outside of the CloudFormation stack",
      "There is a syntax error in the CloudFormation template",
      "The developer has insufficient IAM permissions to provision an instance of the specified type"
    ],
    "site_answers": [
      "The database was deleted or modified manually outside of the CloudFormation stack"
    ]
  },
  {
    "question_text": "A developer needs to store files in an Amazon S3 bucket for a company's application. Each S3 object can have multiple versions. The objects must be permanently removed 1 year after object creation.\n\nThe developer creates an S3 bucket that has versioning enabled.\n\nWhat should the developer do next to meet the data retention requirements?",
    "question_type": "single",
    "choices": [
      "Create an S3 Lifecycle rule on the S3 bucket. Configure the rule to expire current versions of objects and permanently delete noncurrent versions 1 year after object creation.",
      "Create an event notification for all object creation events in the S3 bucket. Configure the event notification to invoke an AWS Lambda function. Program the Lambda function to check the object creation date and to delete the object if the object is older than 1 year.",
      "Create an event notification for all object removal events in the S3 bucket. Configure the event notification to invoke an AWS Lambda function. Program the Lambda function to check the object creation date and to delete the object if the object is older than 1 year.",
      "Create an S3 Lifecycle rule on the S3 bucket. Configure the rule to delete expired object delete markers and permanently delete noncurrent versions 1 year after object creation."
    ],
    "site_answers": [
      "Create an S3 Lifecycle rule on the S3 bucket. Configure the rule to expire current versions of objects and permanently delete noncurrent versions 1 year after object creation."
    ]
  },
  {
    "question_text": "A company uses AWS X-Ray to monitor a serverless application. The components of the application have different request rates. The user interactions and transactions are important to trace, but they are low in volume. The background processes such as application health checks, polling, and connection maintenance generate high volumes of read-only requests.\n\nCurrently, the default X-Ray sampling rules are universal for all requests. Only the first request per second and some additional requests are recorded. This setup is not helping the company review the requests based on service or request type.\n\nA developer must configure rules to trace requests based on service or request properties. The developer must trace the user interactions and transactions without wasting effort recording minor background tasks.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Disable sampling for high-volume read-only requests. Sample at a lower rate for all requests that handle user interactions or transactions.",
      "Disable sampling and trace all requests for requests that handle user interactions or transactions. Sample high-volume read-only requests at a higher rate.",
      "Disable sampling and trace all requests for requests that handle user interactions or transactions. Sample high-volume read-only requests at a lower rate.",
      "Disable sampling for high-volume read-only requests. Sample at a higher rate for all requests that handle user interactions or transactions."
    ],
    "site_answers": [
      "Disable sampling and trace all requests for requests that handle user interactions or transactions. Sample high-volume read-only requests at a lower rate."
    ]
  },
  {
    "question_text": "A developer uses an AWS Lambda function in an application to edit users' uploaded photos. The developer needs to update the Lambda function code and needs to test the updates.\n\nFor testing, the developer must divide the user traffic between the original version of the Lambda function and the new version of the Lambda function.\n\nWhich combination of steps will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Publish a version of the original Lambda function. Make the necessary changes to the Lambda code. Publish a new version of the Lambda function.",
      "Use AWS CodeBuild to detect updates to the Lambda function. Configure CodeBuild to incrementally shift traffic from the original version of the Lambda function to the new version of the Lambda function.",
      "Update the original version of the Lambda function to add a function URL. Make the necessary changes to the Lambda code. Publish another function URL for the updated Lambda code.",
      "Create an alias that points to the original version of the Lambda function. Configure the alias to be a weighted alias that also includes the new version of the Lambda function. Divide traffic between the two versions.",
      "Create an alias that points to the original function URL. Configure the alias to be a weighted alias that also includes the additional function URL. Divide traffic between the two function URLs."
    ],
    "site_answers": [
      "Publish a version of the original Lambda function. Make the necessary changes to the Lambda code. Publish a new version of the Lambda function.",
      "Create an alias that points to the original version of the Lambda function. Configure the alias to be a weighted alias that also includes the new version of the Lambda function. Divide traffic between the two versions."
    ]
  },
  {
    "question_text": "A company had an Amazon RDS for MySQL DB instance that was named mysql-db. The DB instance was deleted within the past 90 days.\n\nA developer needs to find which IAM user or role deleted the DB instance in the AWS environment.\n\nWhich solution will provide this information?",
    "question_type": "single",
    "choices": [
      "Retrieve the AWS CloudTrail events for the resource mysql-db where the event name is DeleteDBInstance. Inspect each event.",
      "Retrieve the Amazon CloudWatch log events from the most recent log stream within the rds/mysql-db log group. Inspect the log events.",
      "Retrieve the AWS X-Ray trace summaries. Filter by services with the name mysql-db. Inspect the ErrorRootCauses values within each summary.",
      "Retrieve the AWS Systems Manager deletions inventory. Filter the inventory by deletions that have a TypeName value of RDS. Inspect the deletion details."
    ],
    "site_answers": [
      "Retrieve the AWS CloudTrail events for the resource mysql-db where the event name is DeleteDBInstance. Inspect each event."
    ]
  },
  {
    "question_text": "A company has an ecommerce web application that uses an on-premises MySQL database as a data store. The company migrates the on-premises MySQL database to Amazon RDS for MySQL.\n\nA developer needs to configure the application's access to the RDS for MySQL database. The developer's solution must not use long term credentials.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Enable IAM database authentication on the RDS for MySQL DB instance. Create an IAM role that has the minimum required permissions. Assign the role to the application.",
      "Store the MySQL credentials as secrets in AWS Secrets Manager. Create an IAM role that has the minimum required permissions to retrieve the secrets. Assign the role to the application.",
      "Configure the MySQL credentials as environment variables that are available at runtime for the application.",
      "Store the MySQL credentials as SecureString parameters in AWS Systems Manager Parameter Store. Create an IAM role that has the minimum required permissions to retrieve the parameters. Assign the role to the application."
    ],
    "site_answers": [
      "Enable IAM database authentication on the RDS for MySQL DB instance. Create an IAM role that has the minimum required permissions. Assign the role to the application."
    ]
  },
  {
    "question_text": "A developer is creating an application that must transfer expired items from Amazon DynamoDB to Amazon S3. The developer sets up the DynamoDB table to automatically delete items after a specific TTL. The application must process the items in DynamoDB and then must store the expired items in Amazon S3. The entire process, including item processing and storage in Amazon S3, will take 5 minutes.\n\nWhich solution will meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Configure DynamoDB Accelerator (DAX) to query for expired items based on the TTL. Save the results to Amazon S3.",
      "Configure DynamoDB Streams to invoke an AWS Lambda function. Program the Lambda function to process the items and to store the expired items in Amazon S3.",
      "Deploy a custom application on an Amazon Elastic Container Service (Amazon ECS) cluster on Amazon EC2 instances. Program the custom application to process the items and to store the expired items in Amazon S3.",
      "Create an Amazon EventBridge rule to invoke an AWS Lambda function. Program the Lambda function to process the items and to store the expired items in Amazon S3."
    ],
    "site_answers": [
      "Configure DynamoDB Streams to invoke an AWS Lambda function. Program the Lambda function to process the items and to store the expired items in Amazon S3."
    ]
  },
  {
    "question_text": "A developer has an application that uses WebSocket APIs in Amazon API Gateway. The developer wants to use an API Gateway Lambda authorizer to control access to the application.\n\nThe developer needs to add credential caching and reduce repeated usage of secret keys and authorization tokens on every request.\n\nWhich combination of steps should the developer take to meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Use a token-based Lambda authorizer.",
      "Use a request parameter-based Lambda authorizer.",
      "Configure an integration request mapping template to reference the context map from the APIGateway Lambda authorizer.",
      "Configure an integration request mapping template to reference the identity API key value from the API Gateway Lambda authorizer.",
      "Use VPC endpoint policies for the WebSocket APIs."
    ],
    "site_answers": [
      "Use a token-based Lambda authorizer.",
      "Configure an integration request mapping template to reference the context map from the APIGateway Lambda authorizer."
    ]
  },
  {
    "question_text": "A developer builds a serverless application on AWS by using Amazon API Gateway, AWS Lambda functions, and Amazon Route 53. During testing, the developer notices errors but cannot immediately locate the root cause.\n\nTo identify the errors, the developer needs to search all the application's logs.\n\nWhat should the developer do to meet these requirements with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Set up API Gateway health checks to monitor the application's availability. Use the Amazon CloudWatch PutMetricData API operation to publish the logs to CloudWatch. Search and query the logs by using Amazon Athena.",
      "Set up Route 53 health checks to monitor the application's availability. Turn on AWS CloudTrail logs for all the AWS services that the application uses. Send the logs to a specified Amazon S3 bucket. Use Amazon Athena to query the log files directly from Amazon S3.",
      "Configure all the application's AWS services to publish a real-time feed of log events to an Amazon Kinesis Data Firehose delivery stream. Configure the delivery stream to publish all the logs to an Amazon S3 bucket. Use Amazon OpenSearch Service to search and analyze the logs.",
      "Set up Route 53 health checks to monitor the application's availability. Turn on Amazon CloudWatch Logs for the API Gateway stages to log API requests with a JSON log format. Use CloudWatch Logs Insights to search and analyze the logs from the AWS services that the application uses."
    ],
    "site_answers": [
      "Set up Route 53 health checks to monitor the application's availability. Turn on Amazon CloudWatch Logs for the API Gateway stages to log API requests with a JSON log format. Use CloudWatch Logs Insights to search and analyze the logs from the AWS services that the application uses."
    ]
  },
  {
    "question_text": "A developer needs to freeze changes to an AWS CodeCommit repository before a production release. The developer will work on new features while a quality assurance (QA) team tests the release.\n\nThe QA testing and all bug fixes must take place in isolation from the main branch. After the release, the developer must integrate all bug fixes into the main branch.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Create a release branch from the latest Git commit that will be in the release. Apply fixes to the release branch. Continue developing new features, and merge the features into the main branch. Merge the release branch into the main branch after the release.",
      "Create a Git tag on the latest Git commit that will be in the release. Continue developing new features, and merge the features into the main branch. Apply fixes to the main branch. Update the Git tag for the release to be on the latest commit on the main branch.",
      "Create a release branch from the latest Git commit that will be in the release. Apply fixes to the release branch. Continue developing new features, and merge the features into the main branch. Rebase the main branch onto the release branch after the release.",
      "Create a Git tag on the latest Git commit that will be in the release. Continue developing new features, and merge the features into the main branch. Apply the Git commits for fixes to the Git tag for the release."
    ],
    "site_answers": [
      "Create a release branch from the latest Git commit that will be in the release. Apply fixes to the release branch. Continue developing new features, and merge the features into the main branch. Merge the release branch into the main branch after the release."
    ]
  },
  {
    "question_text": "A developer is setting up AWS CodePipeline for a new application. During each build, the developer must generate a test report.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Create an AWS CodeBuild build project that runs tests. Configure the buildspec file with the test report information.",
      "Create an AWS CodeDeploy deployment that runs tests. Configure the AppSpec file with the test report information.",
      "Run the builds on an Amazon EC2 instance that has AWS Systems Manager Agent (SSM Agent) installed and activated.",
      "Create a repository in AWS CodeArtifact. Select the test report template."
    ],
    "site_answers": [
      "Create an AWS CodeBuild build project that runs tests. Configure the buildspec file with the test report information."
    ]
  },
  {
    "question_text": "A developer built an application by using multiple AWS Lambda functions. The Lambda functions must access dynamic configuration data at runtime. The data is maintained as a 6 KB JSON document in AWS AppConfig. The configuration data needs to be updated without requiring the redeployment of the application.\n\nThe developer needs a solution that will give the Lambda functions access to the dynamic configuration data.\n\nWhat should the developer do to meet these requirements with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Migrate the document from AWS AppConfig to a Lambda environment variable. Read the document at the runtime.",
      "Configure the AWS AppConfig Agent Lambda extension. Access the dynamic configuration data by calling the extension on a local host.",
      "Use the AWS X-Ray SDK to call the AWS AppConfig APIs. Retrieve the configuration file at runtime.",
      "Migrate the configuration file to a Lambda deployment package. Read the file from the file system at runtime."
    ],
    "site_answers": [
      "Configure the AWS AppConfig Agent Lambda extension. Access the dynamic configuration data by calling the extension on a local host."
    ]
  },
  {
    "question_text": "A developer has AWS Lambda functions that need to access a company's internal data science libraries and reference data. Separate teams manage the libraries and the data. The teams must be able to update and upload new data independently. The Lambda functions are connected to the company's central VPC.\n\nWhich solution will provide the Lambda functions with access to the libraries and data?",
    "question_type": "single",
    "choices": [
      "Attach an Amazon Elastic Block Store (Amazon EBS) volume to the Lambda functions by using EBS Multi-Attach in the central VPC. Update the Lambda function execution roles to give the functions to access the EBS volume. Update the Lambda function code to reference the files in the EBS volume.",
      "Compress the libraries and reference data in a Lambda /tmp folder. Update the Lambda function code to reference the files in the /tmp folder.",
      "Set up an Amazon Elastic File System (Amazon EFS) file system with mount targets in the central VPConfigure the Lambda functions to mount the EFS file system. Update the Lambda function execution roles to give the functions to access the EFS file system.",
      "Set up an Amazon FSx for Windows File Server file system with mount targets in the central VPC. Configure the Lambda functions to mount the Amazon FSx file system. Update the Lambda function execution roles to give the functions to access the Amazon FSx file system."
    ],
    "site_answers": [
      "Set up an Amazon Elastic File System (Amazon EFS) file system with mount targets in the central VPConfigure the Lambda functions to mount the EFS file system. Update the Lambda function execution roles to give the functions to access the EFS file system."
    ]
  },
  {
    "question_text": "A company has an application that uses an AWS Lambda function to consume messages from an Amazon Simple Queue Service (Amazon SQS) queue. The SQS queue is configured with a dead-letter queue. Due to a defect in the application, AWS Lambda failed to process some messages. A developer fixed the bug and wants to process the failed messages again.\n\nHow should the developer resolve this issue?",
    "question_type": "single",
    "choices": [
      "Use the SendMessageBatch API to send messages from the dead-letter queue to the original SQS queue.",
      "Use the ChangeMessageVisibility API to configure messages in the dead-letter queue to be visible in the original SQS queue.",
      "Use the StartMessageMoveTask API to move messages from the dead-letter queue to the original SQS queue.",
      "Use the PurgeQueue API to remove messages from the dead-letter queue and return the messages to the original SQS queue."
    ],
    "site_answers": [
      "Use the SendMessageBatch API to send messages from the dead-letter queue to the original SQS queue."
    ]
  },
  {
    "question_text": "A developer is working on an application that will be deployed on AWS. The developer needs to test and debug the code locally. The code is packaged and stored in an Amazon S3 bucket.\n\nHow can the developer test and debug the code locally with the LEAST amount of configuration?",
    "question_type": "single",
    "choices": [
      "Create an application and a deployment group in AWS CodeDeploy. For the compute platform, specify the local machine as the individual instance for the deployment. For the repository type, specify that the application is stored in Amazon S3. Start the deployment to test on the local machine.",
      "Create a repository in AWS CodeArtifact. Publish the application code package to the repository. Before deployment, create an upstream repository to test and validate the code.",
      "Create a build project in AWS CodeBuild. In AWS CodePipeline, add a CodeBuild test action by adding a stage and an action. For the action provider, specify a CodeBuild test and the build project. View the build log to see the test results.",
      "Install the AWS CodeDeploy agent locally to validate the deployment package. Run the codedeploy-local command. Specify the S3 bucket where the code package is located by using the --bundle-location option."
    ],
    "site_answers": [
      "Install the AWS CodeDeploy agent locally to validate the deployment package. Run the codedeploy-local command. Specify the S3 bucket where the code package is located by using the --bundle-location option."
    ]
  },
  {
    "question_text": "A developer is creating an application on Amazon Elastic Container Service (Amazon ECS). The developer needs to configure the application parameters. The developer must configure limits for the application's maximum number of simultaneous connections and maximum number of transactions per second.\n\nThe maximum number of connections and transactions can change in the future. The developer needs a solution that can automatically deploy these changes to the application, as needed, without causing downtime.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Make the configuration changes for the application. Use AWS CodeDeploy to create a deployment configuration. Specify an in-place deployment to deploy the changes.",
      "Bootstrap the application to use the AWS Cloud Development Kit (AWS CDK) and make the configuration changes. Specify the ECSCanary10Percent15Minutes launch type in the properties section of the ECS resource. Deploy the application by using the AWS CDK to implement the changes.",
      "Install the AWS AppConfig agent on Amazon ECS. Configure an IAM role with access to AWS AppConfig. Make the deployment changes by using AWS AppConfig. Specify Canary10Percent20Minutes as the deployment strategy.",
      "Create an AWS Lambda function to make the configuration changes. Create an Amazon CloudWatch alarm that monitors the Lambda function every 5 minutes to check if the Lambda function has been updated. When the Lambda function is updated, deploy the changes by using AWS CodeDeploy."
    ],
    "site_answers": [
      "Install the AWS AppConfig agent on Amazon ECS. Configure an IAM role with access to AWS AppConfig. Make the deployment changes by using AWS AppConfig. Specify Canary10Percent20Minutes as the deployment strategy."
    ]
  },
  {
    "question_text": "A developer has built an application running on AWS Lambda using AWS Serverless Application Model (AWS SAM).\n\nWhat is the correct sequence of steps to successfully deploy the application?",
    "question_type": "single",
    "choices": [
      "1. Build the SAM template in Amazon EC2.2. Package the SAM template to Amazon EBS storage.3. Deploy the SAM template from Amazon EBS.",
      "1. Build the SAM template locally.2. Package the SAM template onto Amazon S3.3. Deploy the SAM template from Amazon S3.",
      "1. Build the SAM template locally.2. Deploy the SAM template from Amazon S3.3. Package the SAM template for use.",
      "1. Build the SAM template locally.2. Package the SAM template from AWS CodeCommit.3. Deploy the SAM template to CodeCommit."
    ],
    "site_answers": [
      "1. Build the SAM template locally.2. Package the SAM template onto Amazon S3.3. Deploy the SAM template from Amazon S3."
    ]
  },
  {
    "question_text": "A developer needs to deploy the code for a new application on an AWS Lambda function. The application needs a dependency file that is 500 MB to run the business logic.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Compress the application code and dependencies into a .zip file. Directly upload the .zip file as a deployment package for the Lambda function instead of copying the code.",
      "Compress the application code and dependencies into a .zip file. Upload the .zip file to an Amazon S3 bucket. Configure the Lambda function to run the code from the .zip file in the S3 bucket.",
      "Package the application code and dependencies into a container image. Upload the image to an Amazon S3 bucket. Configure the Lambda function to run the code in the image.",
      "Package the application code and dependencies into a container image. Push the image to an Amazon Elastic Container Registry (Amazon ECR) repository. Deploy the image to the Lambda function."
    ],
    "site_answers": [
      "Package the application code and dependencies into a container image. Push the image to an Amazon Elastic Container Registry (Amazon ECR) repository. Deploy the image to the Lambda function."
    ]
  },
  {
    "question_text": "A company is developing a publicly accessible single-page application. The application makes calls from a client web browser to backend services to provide a user interface to customers. The application depends on a third-party web service exposed as an HTTP API. The web client must provide an API key to the third-party web service by using the HTTP header as part of the HTTP request. The company's API key must not be exposed to the users of the web application.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Use Amazon API Gateway to create a private REST API. Create an HTTP integration to integrate with the third-party HTTP API. Add the company's API key to the HTTP headers list of the integration request configuration.",
      "Use Amazon API Gateway to create a private REST API. Create an AWS Lambda proxy integration. Make calls to the third-party HTTP API from the Lambda function. Pass the company's API key as an HTTP request header.",
      "Use Amazon API Gateway to create a REST API. Create an HTTP integration to integrate with the third-party HTTP API. Add the company's API key to the HTTP headers list of the integration request configuration.",
      "Use Amazon API Gateway to create a REST API. Create an AWS Lambda proxy integration. Make calls to the third-party HTTP API from the Lambda function. Pass the company's API key as an HTTP request header."
    ],
    "site_answers": [
      "Use Amazon API Gateway to create a REST API. Create an AWS Lambda proxy integration. Make calls to the third-party HTTP API from the Lambda function. Pass the company's API key as an HTTP request header."
    ]
  },
  {
    "question_text": "A developer is setting up the deployment of application stacks to new test environments by using the AWS Cloud Development Kit (AWS CDK). The application contains the code for several AWS Lambda functions that will be deployed as assets. Each Lambda function is defined by using the AWS CDK Lambda construct library.\n\nThe developer has already successfully deployed the application stacks to the alpha environment in the first account by using the AWS CDK CLI's cdk deploy command. The developer is preparing to deploy to the beta environment in a second account for the first time. The developer makes no significant changes to the CDK code between deployments, but the initial deployment in the second account is unsuccessful and returns a NoSuchBucket error.\n\nWhich command should the developer run before redeployment to resolve this error?",
    "question_type": "single",
    "choices": [
      "cdk synth",
      "cdk bootstrap",
      "cdk init",
      "cdk destroy"
    ],
    "site_answers": [
      "cdk bootstrap"
    ]
  },
  {
    "question_text": "A developer is automating a new application deployment with AWS Serverless Application Model (AWS SAM). The new application has one AWS Lambda function and one Amazon S3 bucket. The Lambda function must access the S3 bucket to only read objects.\n\nHow should the developer configure AWS SAM to grant the necessary read privilege to the S3 bucket?",
    "question_type": "single",
    "choices": [
      "Reference a second Lambda authorizer function.",
      "Add a custom S3 bucket policy to the Lambda function.",
      "Create an Amazon Simple Queue Service (SQS) topic for only S3 object reads. Reference the topic in the template.",
      "Add the S3ReadPolicy template to the Lambda function's execution role."
    ],
    "site_answers": [
      "Add the S3ReadPolicy template to the Lambda function's execution role."
    ]
  },
  {
    "question_text": "A development team wants to immediately build and deploy an application whenever there is a change to the source code.\n\nWhich approaches could be used to trigger the deployment? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Store the source code in an Amazon S3 bucket. Configure AWS CodePipeline to start whenever a file in the bucket changes.",
      "Store the source code in an encrypted Amazon EBS volume. Configure AWS CodePipeline to start whenever a file in the volume changes.",
      "Store the source code in an AWS CodeCommit repository. Configure AWS CodePipeline to start whenever a change is committed to the repository.",
      "Store the source code in an Amazon S3 bucket. Configure AWS CodePipeline to start every 15 minutes.",
      "Store the source code in an Amazon EC2 instance's ephemeral storage. Configure the instance to start AWS CodePipeline whenever there are changes to the source code."
    ],
    "site_answers": [
      "Store the source code in an Amazon S3 bucket. Configure AWS CodePipeline to start whenever a file in the bucket changes.",
      "Store the source code in an AWS CodeCommit repository. Configure AWS CodePipeline to start whenever a change is committed to the repository."
    ]
  },
  {
    "question_text": "A developer is building an application integrating an Amazon API Gateway with an AWS Lambda function. When calling the API, the developer receives the following error:Wed Nov 08 01:13:00 UTC 2017 : Method completed with status: 502What should the developer do to resolve the error?",
    "question_type": "single",
    "choices": [
      "Change the HTTP endpoint of the API to an HTTPS endpoint.",
      "Change the format of the payload sent to the API Gateway.",
      "Change the format of the Lambda function response to the API call.",
      "Change the authorization header in the API call to access the Lambda function."
    ],
    "site_answers": [
      "Change the format of the Lambda function response to the API call."
    ]
  },
  {
    "question_text": "A developer is building various microservices for an application that will run on Amazon EC2 instances. The developer needs to monitor the end-to-end view of the requests between the microservices and debug any issues in the various microservices.\n\nWhat should the developer do to accomplish these tasks?",
    "question_type": "single",
    "choices": [
      "Use Amazon CloudWatch to aggregate the microservices' logs and metrics, and build the monitoring dashboard.",
      "Use AWS CloudTrail to aggregate the microservices' logs and metrics, and build the monitoring dashboard.",
      "Use the AWS X-Ray SDK to add instrumentation in all the microservices, and monitor using the X-Ray service map.",
      "Use AWS Health to monitor the health of all the microservices."
    ],
    "site_answers": [
      "Use the AWS X-Ray SDK to add instrumentation in all the microservices, and monitor using the X-Ray service map."
    ]
  },
  {
    "question_text": "A developer is building a microservice that uses AWS Lambda to process messages from an Amazon Simple Queue Service (Amazon SQS) standard queue. The Lambda function calls external APIs to enrich the SQS message data before loading the data into an Amazon Redshift data warehouse. The SQS queue must handle a maximum of 1,000 messages per second.\n\nDuring initial testing, the Lambda function repeatedly inserted duplicate data into the Amazon Redshift table. The duplicate data led to a problem with data analysis. All duplicate messages were submitted to the queue within 1 minute of each other.\n\nHow should the developer resolve this issue?",
    "question_type": "single",
    "choices": [
      "Create an SQS FIFO queue. Enable message deduplication on the SQS FIFO queue.",
      "Reduce the maximum Lambda concurrency that the SQS queue can invoke.",
      "Use Lambda's temporary storage to keep track of processed message identifiers",
      "Configure a message group ID for every sent message. Enable message deduplication on the SQS standard queue."
    ],
    "site_answers": [
      "Create an SQS FIFO queue. Enable message deduplication on the SQS FIFO queue."
    ]
  },
  {
    "question_text": "A company has an application that uses an Amazon API Gateway API to invoke an AWS Lambda function. The application is latency sensitive.\n\nA developer needs to configure the Lambda function to reduce the cold start time that is associated with default scaling.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Publish a new version of the Lambda function. Configure provisioned concurrency. Set the provisioned concurrency limit to meet the company requirements.",
      "Increase the Lambda function's memory to the maximum amount. Increase the Lambda function's reserved concurrency limit.",
      "Increase the reserved concurrency of the Lambda function to a number that matches the current production load.",
      "Use Service Quotas to request an increase in the Lambda function's concurrency limit for the AWS account where the function is deployed."
    ],
    "site_answers": [
      "Publish a new version of the Lambda function. Configure provisioned concurrency. Set the provisioned concurrency limit to meet the company requirements."
    ]
  },
  {
    "question_text": "A developer is deploying an application on Amazon EC2 instances that run in Account A. The application needs to read data from an existing Amazon Kinesis data stream in Account B.\n\nWhich actions should the developer take to provide the application with access to the stream? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Update the instance profile role in Account A with stream read permissions.",
      "Create an IAM role with stream read permissions in Account B.",
      "Add a trust policy to the instance profile role and IAM role in Account B to allow the instance profile role to assume the IAM role.",
      "Add a trust policy to the instance profile role and IAM role in Account B to allow reads from the stream.",
      "Add a resource-based policy in Account B to allow read access from the instance profile role."
    ],
    "site_answers": [
      "Create an IAM role with stream read permissions in Account B.",
      "Add a trust policy to the instance profile role and IAM role in Account B to allow the instance profile role to assume the IAM role."
    ]
  },
  {
    "question_text": "An ecommerce startup is preparing for an annual sales event. As the traffic to the company's application increases, the development team wants to be notified when the Amazon EC2 instance's CPU utilization exceeds 80%.\n\nWhich solution will meet this requirement?",
    "question_type": "single",
    "choices": [
      "Create a custom Amazon CloudWatch alarm that sends a notification to an Amazon SNS topic when the CPU utilization exceeds 80%.",
      "Create a custom AWS CloudTrail alarm that sends a notification to an Amazon SNS topic when the CPU utilization exceeds 80%.",
      "Create a cron job on the EC2 instance that invokes the --describe-instance-information command on the host instance every 15 minutes and sends the results to an Amazon SNS topic.",
      "Create an AWS Lambda function that queries the AWS CloudTrail logs for the CPUUtilization metric every 15 minutes and sends a notification to an Amazon SNS topic when the CPU utilization exceeds 80%."
    ],
    "site_answers": [
      "Create a custom Amazon CloudWatch alarm that sends a notification to an Amazon SNS topic when the CPU utilization exceeds 80%."
    ]
  },
  {
    "question_text": "A company has an application that is deployed on AWS Elastic Beanstalk. The application generates user-specific PDFs and stores the PDFs in an Amazon S3 bucket. The application then uses Amazon Simple Email Service (Amazon SES) to send the PDFs by email to subscribers.\n\nUsers no longer access the PDFs 90 days after the PDFs are generated. The S3 bucket is not versioned and contains many obsolete PDFs.\n\nA developer must reduce the number of files in the S3 bucket by removing PDFs that are older than 90 days.\n\nWhich solution will meet this requirement with the LEAST development effort?",
    "question_type": "single",
    "choices": [
      "Update the application code. In the code, add a rule to scan all the objects in the S3 bucket every day and to delete objects after 90 days.",
      "Create an AWS Lambda function. Program the Lambda function to scan all the objects in the S3 bucket every day and to delete objects after 90 days.",
      "Create an S3 Lifecycle rule for the S3 bucket to expire objects after 90 days.",
      "Partition the S3 objects with a // key prefix. Create an AWS Lambda function to remove objects that have prefixes that have reached the expiration date."
    ],
    "site_answers": [
      "Create an S3 Lifecycle rule for the S3 bucket to expire objects after 90 days."
    ]
  },
  {
    "question_text": "A developer is troubleshooting an application. The application includes several AWS Lambda functions that invoke an Amazon API Gateway API. The API Gateway's method request is set up to use an Amazon Cognito authorizer for authentication.\n\nAll the Lambda functions pass the user ID as part of the Authorization header to the API Gateway API. The API Gateway API returns a 403 status code for all GET requests.\n\nHow should the developer resolve this issue?",
    "question_type": "single",
    "choices": [
      "Modify the client GET request to include a valid API key in the Authorization header.",
      "Modify the client GET request to include a valid token in the Authorization header.",
      "Update the resource policy for the API Gateway API to allow the execute-api:Invoke action.",
      "Modify the client to send an OPTIONS preflight request before the GET request."
    ],
    "site_answers": [
      "Modify the client GET request to include a valid token in the Authorization header."
    ]
  },
  {
    "question_text": "A company processes incoming documents from an Amazon S3 bucket. Users upload documents to an S3 bucket using a web user interface. Upon receiving files in S3, an AWS Lambda function is invoked to process the files, but the Lambda function times out intermittently.\n\nIf the Lambda function is configured with the default settings, what will happen to the S3 event when there is a timeout exception?",
    "question_type": "single",
    "choices": [
      "Notification of a failed S3 event is sent as an email through Amazon SNS.",
      "The S3 event is sent to the default Dead Letter Queue.",
      "The S3 event is processed until it is successful.",
      "The S3 event is discarded after the event is retried twice."
    ],
    "site_answers": [
      "The S3 event is discarded after the event is retried twice."
    ]
  },
  {
    "question_text": "A developer uses Amazon S3 Event Notifications to invoke AWS Lambda functions. The Lambda functions process images after the images are uploaded to S3 buckets. The developer has set up a development S3 bucket, a production S3 bucket, a development Lambda function, and a production Lambda function in the same AWS account.\n\nThe developer notices that uploads to the development S3 bucket wrongly invoke the production Lambda function. The developer must prevent development data from affecting the production Lambda function.\n\nWhat should the developer do to meet these requirements?",
    "question_type": "single",
    "choices": [
      "Update the execution role for the production Lambda function. Add a policy that allows the execution role to read from only the production S3 bucket.",
      "Update the S3 bucket policy for the production S3 bucket to invoke the production Lambda function. Update the S3 bucket policy for the development S3 bucket to invoke the development Lambda function.",
      "Separate the development environment and the production environment into their own AWS accounts. Update the execution role for each Lambda function. Add a policy that allows the execution role to read from only the S3 bucket that is in the same account.",
      "Separate the development environment and the production environment into their own AWS accounts. Add a resource policy to the Lambda functions to allow only S3 bucket events in the same account to invoke the functions."
    ],
    "site_answers": [
      "Update the S3 bucket policy for the production S3 bucket to invoke the production Lambda function. Update the S3 bucket policy for the development S3 bucket to invoke the development Lambda function."
    ]
  },
  {
    "question_text": "A developer is writing an application that will run on Amazon EC2 instances in an Auto Scaling group. The developer wants to externalize the session state to support the application.\n\nWhich AWS services or resources can the developer use to meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Amazon DynamoDB",
      "Amazon Cognito",
      "Amazon ElastiCache",
      "Application Load Balancer",
      "Amazon Simple Queue Service (Amazon SQS)"
    ],
    "site_answers": [
      "Amazon DynamoDB",
      "Amazon ElastiCache"
    ]
  },
  {
    "question_text": "A company has a serverless application that uses an Amazon API Gateway API to invoke an AWS Lambda function. A developer creates a fix for a defect in the Lambda function code. The developer wants to deploy this fix to the production environment.\n\nTo test the changes, the developer needs to send 10% of the live production traffic to the updated Lambda function version.\n\nWhich combination of steps will meet these requirements? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Publish a new version of the Lambda function that contains the updated code.",
      "Set up a new stage in API Gateway with a new Lambda function version. Enable weighted routing in API Gateway stages.",
      "Create an alias for the Lambda function. Configure weighted routing on the alias. Specify a 10% weight for the new Lambda function version.",
      "Set up a routing policy on a Network Load Balancer. Configure 10% of the traffic to go to the new Lambda function version.",
      "Set up a weighted routing policy by using Amazon Route 53. Configure 10% of the traffic to go to the new Lambda function version."
    ],
    "site_answers": [
      "Publish a new version of the Lambda function that contains the updated code.",
      "Create an alias for the Lambda function. Configure weighted routing on the alias. Specify a 10% weight for the new Lambda function version."
    ]
  },
  {
    "question_text": "A developer is creating a video search application for a global company. The video files have an average size of 2.5 TB. The video storage system must provide instant access to the video files for the first 90 days. After the first 90 days, the video files can take more than 10 minutes to load.\n\nWhich solution will meet these requirements MOST cost-effectively?",
    "question_type": "single",
    "choices": [
      "Upload the video files to the Amazon Elastic File System (Amazon EFS) Standard storage class for the first 90 days. After 90 days, transition the video files to the EFS Standard-Infrequent Access (Standard-IA) storage class.",
      "Upload the video files to Amazon S3. Use the S3 Glacier Deep Archive storage class for the first 90 days. After 90 days, transition the video file to the S3 Glacier Flexible Retrieval storage class.",
      "Use Amazon Elastic Block Store (Amazon EBS) to store the video files for the first 90 days. After 90 days, transition the video files to the Amazon S3 Glacier Deep Archive storage class.",
      "Upload the video files to Amazon S3. Use the S3 Glacier Instant Retrieval storage class for the first 90 days. After 90 days, transition the video files to the S3 Glacier Flexible Retrieval storage class."
    ],
    "site_answers": [
      "Upload the video files to Amazon S3. Use the S3 Glacier Instant Retrieval storage class for the first 90 days. After 90 days, transition the video files to the S3 Glacier Flexible Retrieval storage class."
    ]
  },
  {
    "question_text": "A company has an ecommerce platform. A developer is designing an Amazon DynamoDB table to store customer order data for the platform. The table uses the order ID as the partition key.\n\nThe developer needs to modify the table to get all order IDs that are associated with a given customer email address in a single query. The solution must give the developer the ability to query order IDs by other item attributes in the future.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Configure the partition key to use the customer email address as the sort key.",
      "Update the table to use the customer email address as the partition key.",
      "Create a local secondary index (LSI) with the customer email address as the sort key.",
      "Create a global secondary index (GSI) with the customer email address as the partition key."
    ],
    "site_answers": [
      "Create a global secondary index (GSI) with the customer email address as the partition key."
    ]
  },
  {
    "question_text": "A company has a virtual reality (VR) game. The game has a serverless backend that consists of Amazon API Gateway, AWS Lambda, and Amazon DynamoDB. Recently, the company noticed a sudden increase of new users globally. The company also noticed delays in the retrieval of user data.\n\nWhich AWS service or feature can the company use to reduce the database response time to microseconds?",
    "question_type": "single",
    "choices": [
      "Amazon ElastiCache",
      "DynamoDB Accelerator (DAX)",
      "DynamoDB auto scaling",
      "Amazon CloudFront"
    ],
    "site_answers": [
      "DynamoDB Accelerator (DAX)"
    ]
  },
  {
    "question_text": "A developer is creating a solution to track an account's Amazon S3 buckets over time. The developer has created an AWS Lambda function that will run on a schedule. The function will list the account's S3 buckets and will store the list in an Amazon DynamoDB table. The developer receives a permissions error when the developer runs the function with the AWSLambdaBasicExecutionRole AWS managed policy.\n\nWhich combination of permissions should the developer use to resolve this error? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Cross-account IAM role",
      "Permission for the Lambda function to list buckets in Amazon S3",
      "Permission for the Lambda function to write in DynamoDB",
      "Permission for Amazon S3 to invoke the Lambda function",
      "Permission for DynamoDB to invoke the Lambda function"
    ],
    "site_answers": [
      "Permission for the Lambda function to list buckets in Amazon S3",
      "Permission for the Lambda function to write in DynamoDB"
    ]
  },
  {
    "question_text": "A company uses AWS to run its learning management system (LMS) application. The application runs on Amazon EC2 instances behind an Application Load Balancer (ALB). The application's domain name is managed in Amazon Route 53. The application is deployed in a single AWS Region, but the company wants to improve application performance for users all over the world.\n\nWhich solution will improve global performance with the LEAST operational overhead?",
    "question_type": "single",
    "choices": [
      "Set up an Amazon CloudFront distribution that uses the ALB as the origin server. Configure Route 53 to create a DNS alias record that points the application's domain name to the CloudFront distribution URL.",
      "Launch more EC2 instances behind the ALConfigure the ALB to use session affinity (sticky sessions). Create a Route 53 alias record for the ALB by using a geolocation routing policy.",
      "Create an AWS Client VPN endpoint in the VPInstruct users to connect to the VPN to access the application. Create a Route 53 alias record for the VPN endpoint. Configure Route 53 to use a geolocation routing policy.",
      "Deploy the application to multiple Regions across the world. Create a Route 53 alias record for the ALB by using a latency-based routing policy."
    ],
    "site_answers": [
      "Set up an Amazon CloudFront distribution that uses the ALB as the origin server. Configure Route 53 to create a DNS alias record that points the application's domain name to the CloudFront distribution URL."
    ]
  },
  {
    "question_text": "A developer hosts a static website on Amazon S3 and connects the website to an Amazon CloudFront distribution. The website uses a custom domain name that points to the CloudFront URL.\n\nThe developer has set up a continuous integration and continuous delivery (CI/CD) pipeline. The pipeline automatically runs when changes occur in an AWS CodeCommit repository. The pipeline has a source stage and then a build stage. The build stage invokes an AWS CodeBuild project that references a buildspec.yml file. The buildspec.yml file builds the code and deploys the static files to the S3 bucket.\n\nThe pipeline runs successfully, and the latest website files are visible in the S3 bucket and at the S3 website URL. However, when the developer accesses the website through the CloudFront domain, the updates are not reflected on the website.\n\nWhat should the developer configure the buildspec.yml file to do to resolve this issue?",
    "question_type": "single",
    "choices": [
      "Properly synchronize the objects in the S3 bucket with new files from the source stage.",
      "Delete the previous website files in the S3 bucket and redeploy the website files.",
      "Invalidate the file caches for the primary CloudFront distribution.",
      "Modify the cross-origin resource sharing (CORS) policy of the S3 bucket and redeploy the website files."
    ],
    "site_answers": [
      "Invalidate the file caches for the primary CloudFront distribution."
    ]
  },
  {
    "question_text": "A developer is working on an ecommerce application that stores data in an Amazon RDS for MySQL cluster. The developer needs to implement a caching layer for the application to retrieve information about the most viewed products.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Edit the RDS for MySQL cluster by adding a cache node. Configure the cache endpoint instead of the cluster endpoint in the application.",
      "Create an Amazon ElastiCache for Redis cluster. Update the application code to use the ElastiCache for Redis cluster endpoint.",
      "Create an Amazon DynamoDB Accelerator (DAX) cluster in front of the RDS for MySQL cluster. Configure the application to connect to the DAX endpoint instead of the RDS endpoint.",
      "Configure the RDS for MySQL cluster to add a standby instance in a different Availability Zone. Configure the application to read the data from the standby instance."
    ],
    "site_answers": [
      "Create an Amazon ElastiCache for Redis cluster. Update the application code to use the ElastiCache for Redis cluster endpoint."
    ]
  },
  {
    "question_text": "A gaming application stores scores for players in an Amazon DynamoDB table that has four attributes: user_id, user_name, user_score, and user_rank. The users are allowed to update their names only. A user is authenticated by web identity federation.\n\nWhich set of conditions should be added in the policy attached to the role for the dynamodb:PutItem API call?",
    "question_type": "single",
    "choices": [
      "",
      "",
      "",
      ""
    ],
    "site_answers": [
      ""
    ]
  },
  {
    "question_text": "A developer is creating a database of products. Queries for frequently accessed products must have retrieval times of microseconds. To ensure data consistency, the application cache must be updated whenever products are added, changed, or deleted.\n\nWhich solution will meet these requirements?",
    "question_type": "single",
    "choices": [
      "Set up an Amazon DynamoDB database and a DynamoDB Accelerator (DAX) cluster.",
      "Set up an Amazon RDS database and an Amazon ElastiCache for Redis cluster. Implement a lazy loading caching strategy with ElastiCache.",
      "Setup an Amazon DynamoDB database that has an in-memory cache. Implement a lazy loading caching strategy in the application.",
      "Set up an Amazon RDS database and an Amazon DynamoDB Accelerator (DAX) cluster. Specify a TTL setting for the DAX cluster."
    ],
    "site_answers": [
      "Set up an Amazon DynamoDB database and a DynamoDB Accelerator (DAX) cluster."
    ]
  },
  {
    "question_text": "A developer is creating a script to automate the deployment process for a serverless application. The developer wants to use an existing AWS Serverless Application Model (AWS SAM) template for the application.\n\nWhat should the developer use for the project? (Choose two.)",
    "question_type": "multiple",
    "choices": [
      "Call aws cloudformation package to create the deployment package. Call aws cloudformation deploy to deploy the package afterward.",
      "Call sam package to create the deployment package. Call sam deploy to deploy the package afterward.",
      "Call aws s3 cp to upload the AWS SAM template to Amazon S3. Call aws lambda update-function-code to create the application.",
      "Create a ZIP package locally and call aws serverlessrepo create-applicatiion to create the application.",
      "Create a ZIP package and upload it to Amazon S3. Call aws cloudformation create-stack to create the application."
    ],
    "site_answers": [
      "Call aws cloudformation package to create the deployment package. Call aws cloudformation deploy to deploy the package afterward.",
      "Call sam package to create the deployment package. Call sam deploy to deploy the package afterward."
    ]
  }
]
